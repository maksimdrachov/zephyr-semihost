
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	f8 1a 00 20 65 12 00 00 79 52 00 00 21 12 00 00     ... e...yR..!...
	...
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
  2c:	69 10 00 00 00 00 00 00 00 00 00 00 01 10 00 00     i...............
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	15 23 00 00                                         .#..

00000040 <_irq_vector_table>:
  40:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
  50:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
				*(const char **)buf = s;
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  70:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  80:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
  90:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
			switch (*fmt) {
  a0:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................
  b0:	dd 10 00 00 dd 10 00 00 dd 10 00 00 dd 10 00 00     ................

Disassembly of section text:

000000c0 <__gnu_thumb1_case_uqi>:
      c0:	b402      	push	{r1}
      c2:	4671      	mov	r1, lr
      c4:	0849      	lsrs	r1, r1, #1
      c6:	0049      	lsls	r1, r1, #1
      c8:	5c09      	ldrb	r1, [r1, r0]
      ca:	0049      	lsls	r1, r1, #1
      cc:	448e      	add	lr, r1
      ce:	bc02      	pop	{r1}
      d0:	4770      	bx	lr
      d2:	46c0      	nop			; (mov r8, r8)

000000d4 <__gnu_thumb1_case_shi>:
      d4:	b403      	push	{r0, r1}
      d6:	4671      	mov	r1, lr
      d8:	0849      	lsrs	r1, r1, #1
      da:	0040      	lsls	r0, r0, #1
      dc:	0049      	lsls	r1, r1, #1
      de:	5e09      	ldrsh	r1, [r1, r0]
      e0:	0049      	lsls	r1, r1, #1
      e2:	448e      	add	lr, r1
      e4:	bc03      	pop	{r0, r1}
      e6:	4770      	bx	lr

000000e8 <__udivsi3>:
      e8:	2900      	cmp	r1, #0
      ea:	d034      	beq.n	156 <CONFIG_FLASH_SIZE+0x56>

000000ec <.udivsi3_skip_div0_test>:
      ec:	2301      	movs	r3, #1
      ee:	2200      	movs	r2, #0
      f0:	b410      	push	{r4}
      f2:	4288      	cmp	r0, r1
      f4:	d32c      	bcc.n	150 <CONFIG_FLASH_SIZE+0x50>
				parsing = false;
      f6:	2401      	movs	r4, #1
			switch (*fmt) {
      f8:	0724      	lsls	r4, r4, #28
      fa:	42a1      	cmp	r1, r4
      fc:	d204      	bcs.n	108 <CONFIG_FLASH_SIZE+0x8>
      fe:	4281      	cmp	r1, r0
     100:	d202      	bcs.n	108 <CONFIG_FLASH_SIZE+0x8>
     102:	0109      	lsls	r1, r1, #4
     104:	011b      	lsls	r3, r3, #4
     106:	e7f8      	b.n	fa <.udivsi3_skip_div0_test+0xe>
     108:	00e4      	lsls	r4, r4, #3
     10a:	42a1      	cmp	r1, r4
     10c:	d204      	bcs.n	118 <CONFIG_FLASH_SIZE+0x18>
     10e:	4281      	cmp	r1, r0
     110:	d202      	bcs.n	118 <CONFIG_FLASH_SIZE+0x18>
     112:	0049      	lsls	r1, r1, #1
     114:	005b      	lsls	r3, r3, #1
     116:	e7f8      	b.n	10a <CONFIG_FLASH_SIZE+0xa>
     118:	4288      	cmp	r0, r1
     11a:	d301      	bcc.n	120 <CONFIG_FLASH_SIZE+0x20>
     11c:	1a40      	subs	r0, r0, r1
     11e:	431a      	orrs	r2, r3
     120:	084c      	lsrs	r4, r1, #1
		buf = (void *) ROUND_UP(buf, align);
     122:	42a0      	cmp	r0, r4
     124:	d302      	bcc.n	12c <CONFIG_FLASH_SIZE+0x2c>
     126:	1b00      	subs	r0, r0, r4
     128:	085c      	lsrs	r4, r3, #1
     12a:	4322      	orrs	r2, r4
     12c:	088c      	lsrs	r4, r1, #2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     12e:	42a0      	cmp	r0, r4
     130:	d302      	bcc.n	138 <CONFIG_FLASH_SIZE+0x38>
     132:	1b00      	subs	r0, r0, r4
     134:	089c      	lsrs	r4, r3, #2
     136:	4322      	orrs	r2, r4
     138:	08cc      	lsrs	r4, r1, #3
     13a:	42a0      	cmp	r0, r4
     13c:	d302      	bcc.n	144 <CONFIG_FLASH_SIZE+0x44>
		if (is_str_arg) {
     13e:	1b00      	subs	r0, r0, r4
     140:	08dc      	lsrs	r4, r3, #3
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     142:	4322      	orrs	r2, r4
     144:	2800      	cmp	r0, #0
			int v = va_arg(ap, int);
     146:	d003      	beq.n	150 <CONFIG_FLASH_SIZE+0x50>

			if (buf0 != NULL) {
				*(int *)buf = v;
     148:	091b      	lsrs	r3, r3, #4
     14a:	d001      	beq.n	150 <CONFIG_FLASH_SIZE+0x50>
			}
			buf += sizeof(int);
     14c:	0909      	lsrs	r1, r1, #4
     14e:	e7e3      	b.n	118 <CONFIG_FLASH_SIZE+0x18>
     150:	0010      	movs	r0, r2
     152:	bc10      	pop	{r4}
     154:	4770      	bx	lr
				arg_idx--;
     156:	b501      	push	{r0, lr}
     158:	2000      	movs	r0, #0
     15a:	f000 f85f 	bl	21c <__aeabi_idiv0>
				parsing = false;
     15e:	bd02      	pop	{r1, pc}

00000160 <__aeabi_uidivmod>:
				if (fmt[-1] == 'l') {
     160:	2900      	cmp	r1, #0
     162:	d0f8      	beq.n	156 <CONFIG_FLASH_SIZE+0x56>
     164:	b503      	push	{r0, r1, lr}
				parsing = false;
     166:	f7ff ffc1 	bl	ec <.udivsi3_skip_div0_test>
				if (fmt[-1] == 'l') {
     16a:	bc0e      	pop	{r1, r2, r3}
				align = VA_STACK_ALIGN(void *);
     16c:	4342      	muls	r2, r0
					if (fmt[-2] == 'l') {
     16e:	1a89      	subs	r1, r1, r2
				size = sizeof(void *);
     170:	4718      	bx	r3
					if (fmt[-2] == 'l') {
     172:	46c0      	nop			; (mov r8, r8)

00000174 <__divsi3>:
     174:	2900      	cmp	r1, #0
     176:	d041      	beq.n	1fc <.divsi3_skip_div0_test+0x84>

00000178 <.divsi3_skip_div0_test>:
						align = VA_STACK_ALIGN(long long);
     178:	b410      	push	{r4}
			switch (*fmt) {
     17a:	0004      	movs	r4, r0
     17c:	404c      	eors	r4, r1
					v.ld = va_arg(ap, long double);
     17e:	46a4      	mov	ip, r4
				buf = (void *) ROUND_UP(buf, align);
     180:	2301      	movs	r3, #1
					v.ld = va_arg(ap, long double);
     182:	2200      	movs	r2, #0
     184:	2900      	cmp	r1, #0
				buf = (void *) ROUND_UP(buf, align);
     186:	d500      	bpl.n	18a <.divsi3_skip_div0_test+0x12>
     188:	4249      	negs	r1, r1
					v.ld = va_arg(ap, long double);
     18a:	2800      	cmp	r0, #0
				if (buf0 != NULL) {
     18c:	d500      	bpl.n	190 <.divsi3_skip_div0_test+0x18>
     18e:	4240      	negs	r0, r0
					if (BUF_OFFSET + size > len) {
     190:	4288      	cmp	r0, r1
     192:	d32c      	bcc.n	1ee <.divsi3_skip_div0_test+0x76>
     194:	2401      	movs	r4, #1
     196:	0724      	lsls	r4, r4, #28
     198:	42a1      	cmp	r1, r4
     19a:	d204      	bcs.n	1a6 <.divsi3_skip_div0_test+0x2e>
     19c:	4281      	cmp	r1, r0
						*(long double *)buf = v.ld;
     19e:	d202      	bcs.n	1a6 <.divsi3_skip_div0_test+0x2e>
     1a0:	0109      	lsls	r1, r1, #4
				parsing = false;
     1a2:	011b      	lsls	r3, r3, #4
				buf += size;
     1a4:	e7f8      	b.n	198 <.divsi3_skip_div0_test+0x20>
     1a6:	00e4      	lsls	r4, r4, #3
				parsing = false;
     1a8:	42a1      	cmp	r1, r4
			switch (*fmt) {
     1aa:	d204      	bcs.n	1b6 <.divsi3_skip_div0_test+0x3e>
     1ac:	4281      	cmp	r1, r0
     1ae:	d202      	bcs.n	1b6 <.divsi3_skip_div0_test+0x3e>
     1b0:	0049      	lsls	r1, r1, #1
     1b2:	005b      	lsls	r3, r3, #1
			if (*++fmt == '\0') {
     1b4:	e7f8      	b.n	1a8 <.divsi3_skip_div0_test+0x30>
     1b6:	4288      	cmp	r0, r1
     1b8:	d301      	bcc.n	1be <.divsi3_skip_div0_test+0x46>
     1ba:	1a40      	subs	r0, r0, r1
     1bc:	431a      	orrs	r2, r3
			if (!parsing) {
     1be:	084c      	lsrs	r4, r1, #1
     1c0:	42a0      	cmp	r0, r4
     1c2:	d302      	bcc.n	1ca <.divsi3_skip_div0_test+0x52>
     1c4:	1b00      	subs	r0, r0, r4
				if (*fmt == '%') {
     1c6:	085c      	lsrs	r4, r3, #1
     1c8:	4322      	orrs	r2, r4
					arg_idx++;
     1ca:	088c      	lsrs	r4, r1, #2
     1cc:	42a0      	cmp	r0, r4
     1ce:	d302      	bcc.n	1d6 <.divsi3_skip_div0_test+0x5e>
					parsing = true;
     1d0:	1b00      	subs	r0, r0, r4
     1d2:	089c      	lsrs	r4, r3, #2
				align = VA_STACK_ALIGN(size_t);
     1d4:	4322      	orrs	r2, r4
     1d6:	08cc      	lsrs	r4, r1, #3
			switch (*fmt) {
     1d8:	42a0      	cmp	r0, r4
     1da:	d302      	bcc.n	1e2 <.divsi3_skip_div0_test+0x6a>
     1dc:	1b00      	subs	r0, r0, r4
     1de:	08dc      	lsrs	r4, r3, #3

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1e0:	4322      	orrs	r2, r4
     1e2:	2800      	cmp	r0, #0
     1e4:	d003      	beq.n	1ee <.divsi3_skip_div0_test+0x76>
			long long v = va_arg(ap, long long);
     1e6:	091b      	lsrs	r3, r3, #4

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1e8:	d001      	beq.n	1ee <.divsi3_skip_div0_test+0x76>
			long long v = va_arg(ap, long long);
     1ea:	0909      	lsrs	r1, r1, #4
     1ec:	e7e3      	b.n	1b6 <.divsi3_skip_div0_test+0x3e>
     1ee:	0010      	movs	r0, r2
					*(long long *)buf = v;
     1f0:	4664      	mov	r4, ip
     1f2:	2c00      	cmp	r4, #0
				}
			}
			buf += sizeof(long long);
     1f4:	d500      	bpl.n	1f8 <.divsi3_skip_div0_test+0x80>
     1f6:	4240      	negs	r0, r0
     1f8:	bc10      	pop	{r4}
     1fa:	4770      	bx	lr
     1fc:	b501      	push	{r0, lr}
		if (is_str_arg) {
     1fe:	2000      	movs	r0, #0
     200:	f000 f80c 	bl	21c <__aeabi_idiv0>
		} else if (size == sizeof(int)) {
     204:	bd02      	pop	{r1, pc}
			int v = va_arg(ap, int);
     206:	46c0      	nop			; (mov r8, r8)

00000208 <__aeabi_idivmod>:
			if (buf0 != NULL) {
     208:	2900      	cmp	r1, #0
		} else if (size == sizeof(long long)) {
     20a:	d0f7      	beq.n	1fc <.divsi3_skip_div0_test+0x84>
     20c:	b503      	push	{r0, r1, lr}
			long long v = va_arg(ap, long long);
     20e:	f7ff ffb3 	bl	178 <.divsi3_skip_div0_test>
     212:	bc0e      	pop	{r1, r2, r3}
     214:	4342      	muls	r2, r0
			if (buf0 != NULL) {
     216:	1a89      	subs	r1, r1, r2
			if (*++fmt == '\0') {
     218:	4718      	bx	r3
     21a:	46c0      	nop			; (mov r8, r8)

0000021c <__aeabi_idiv0>:
     21c:	4770      	bx	lr
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     21e:	46c0      	nop			; (mov r8, r8)

00000220 <__clzsi2>:
     220:	211c      	movs	r1, #28
     222:	2301      	movs	r3, #1
			s = va_arg(ap, char *);
     224:	041b      	lsls	r3, r3, #16
     226:	4298      	cmp	r0, r3
     228:	d301      	bcc.n	22e <__clzsi2+0xe>
			if (is_ro && !do_ro) {
     22a:	0c00      	lsrs	r0, r0, #16
     22c:	3910      	subs	r1, #16
     22e:	0a1b      	lsrs	r3, r3, #8
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     230:	4298      	cmp	r0, r3
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     232:	d301      	bcc.n	238 <__clzsi2+0x18>
     234:	0a00      	lsrs	r0, r0, #8
     236:	3908      	subs	r1, #8
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     238:	091b      	lsrs	r3, r3, #4
     23a:	4298      	cmp	r0, r3
     23c:	d301      	bcc.n	242 <__clzsi2+0x22>
     23e:	0900      	lsrs	r0, r0, #4
					__ASSERT(false, "String with too many arguments");
     240:	3904      	subs	r1, #4
     242:	a202      	add	r2, pc, #8	; (adr r2, 24c <__clzsi2+0x2c>)
     244:	5c10      	ldrb	r0, [r2, r0]
     246:	1840      	adds	r0, r0, r1
     248:	4770      	bx	lr
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	02020304 	.word	0x02020304
     250:	01010101 	.word	0x01010101
	...

0000025c <__aeabi_uldivmod>:
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	2b00      	cmp	r3, #0
     25e:	d111      	bne.n	284 <__aeabi_uldivmod+0x28>
     260:	2a00      	cmp	r2, #0
				if (buf0 != NULL) {
     262:	d10f      	bne.n	284 <__aeabi_uldivmod+0x28>
     264:	2900      	cmp	r1, #0
					str_ptr_pos[s_idx] = s_ptr_idx;
     266:	d100      	bne.n	26a <__aeabi_uldivmod+0xe>
     268:	2800      	cmp	r0, #0
     26a:	d002      	beq.n	272 <__aeabi_uldivmod+0x16>
					str_ptr_arg[s_idx] = arg_idx;
     26c:	2100      	movs	r1, #0
     26e:	43c9      	mvns	r1, r1
     270:	0008      	movs	r0, r1
     272:	b407      	push	{r0, r1, r2}
						s_rw_cnt++;
     274:	4802      	ldr	r0, [pc, #8]	; (280 <__aeabi_uldivmod+0x24>)
     276:	a102      	add	r1, pc, #8	; (adr r1, 280 <__aeabi_uldivmod+0x24>)
     278:	1840      	adds	r0, r0, r1
     27a:	9002      	str	r0, [sp, #8]
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     27c:	bd03      	pop	{r0, r1, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	ffffff9d 	.word	0xffffff9d
					__ASSERT(false, "str_ptr_pos[] too small");
     284:	b403      	push	{r0, r1}
     286:	4668      	mov	r0, sp
     288:	b501      	push	{r0, lr}
     28a:	9802      	ldr	r0, [sp, #8]
     28c:	f000 f890 	bl	3b0 <__udivmoddi4>
     290:	9b01      	ldr	r3, [sp, #4]
     292:	469e      	mov	lr, r3
     294:	b002      	add	sp, #8
     296:	bc0c      	pop	{r2, r3}
     298:	4770      	bx	lr
     29a:	46c0      	nop			; (mov r8, r8)

0000029c <__aeabi_llsr>:
     29c:	40d0      	lsrs	r0, r2
				if (buf0 != NULL) {
     29e:	000b      	movs	r3, r1
     2a0:	40d1      	lsrs	r1, r2
					str_ptr_pos[s_idx] = s_ptr_idx;
     2a2:	469c      	mov	ip, r3
     2a4:	3a20      	subs	r2, #32
     2a6:	40d3      	lsrs	r3, r2
     2a8:	4318      	orrs	r0, r3
     2aa:	4252      	negs	r2, r2
					str_ptr_arg[s_idx] = arg_idx;
     2ac:	4663      	mov	r3, ip
     2ae:	4093      	lsls	r3, r2
     2b0:	4318      	orrs	r0, r3
					if (is_ro) {
     2b2:	4770      	bx	lr

000002b4 <__aeabi_llsl>:
     2b4:	4091      	lsls	r1, r2
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2b6:	0003      	movs	r3, r0
     2b8:	4090      	lsls	r0, r2
     2ba:	469c      	mov	ip, r3
     2bc:	3a20      	subs	r2, #32
     2be:	4093      	lsls	r3, r2
     2c0:	4319      	orrs	r1, r3
						s_ro_cnt++;
     2c2:	4252      	negs	r2, r2
     2c4:	4663      	mov	r3, ip
     2c6:	40d3      	lsrs	r3, r2
				s_idx++;
     2c8:	4319      	orrs	r1, r3
     2ca:	4770      	bx	lr

000002cc <__clzdi2>:
     2cc:	b510      	push	{r4, lr}
			buf += sizeof(char *);
     2ce:	2900      	cmp	r1, #0
     2d0:	d103      	bne.n	2da <__clzdi2+0xe>
     2d2:	f7ff ffa5 	bl	220 <__clzsi2>
			is_str_arg = false;
     2d6:	3020      	adds	r0, #32
     2d8:	e002      	b.n	2e0 <__clzdi2+0x14>
				} else if (is_ro) {
     2da:	0008      	movs	r0, r1
     2dc:	f7ff ffa0 	bl	220 <__clzsi2>
					len += 1;
     2e0:	bd10      	pop	{r4, pc}
					len += strlen(s) + 1 + 1;
     2e2:	46c0      	nop			; (mov r8, r8)

000002e4 <strcmp>:
     2e4:	4602      	mov	r2, r0
					len += 2;
     2e6:	b570      	push	{r4, r5, r6, lr}
     2e8:	430a      	orrs	r2, r1
     2ea:	0792      	lsls	r2, r2, #30
				} else if (rws_pos_en) {
     2ec:	d12a      	bne.n	344 <strcmp+0x60>
     2ee:	4d1e      	ldr	r5, [pc, #120]	; (368 <strcmp+0x84>)
     2f0:	01ee      	lsls	r6, r5, #7
					len += strlen(s) + 1 + 1;
     2f2:	c804      	ldmia	r0!, {r2}
     2f4:	c908      	ldmia	r1!, {r3}
     2f6:	1b54      	subs	r4, r2, r5
     2f8:	4394      	bics	r4, r2
     2fa:	4034      	ands	r4, r6
     2fc:	d017      	beq.n	32e <strcmp+0x4a>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     2fe:	b2d0      	uxtb	r0, r2
     300:	b2d9      	uxtb	r1, r3
     302:	1a40      	subs	r0, r0, r1
     304:	0621      	lsls	r1, r4, #24
     306:	4301      	orrs	r1, r0
     308:	d110      	bne.n	32c <strcmp+0x48>
     30a:	b290      	uxth	r0, r2
     30c:	b299      	uxth	r1, r3
     30e:	1a40      	subs	r0, r0, r1
     310:	0421      	lsls	r1, r4, #16
     312:	4301      	orrs	r1, r0
     314:	d10a      	bne.n	32c <strcmp+0x48>
     316:	0210      	lsls	r0, r2, #8
     318:	0219      	lsls	r1, r3, #8
     31a:	0a00      	lsrs	r0, r0, #8
     31c:	0a09      	lsrs	r1, r1, #8
     31e:	1a40      	subs	r0, r0, r1
     320:	0221      	lsls	r1, r4, #8
     322:	4301      	orrs	r1, r0
     324:	d102      	bne.n	32c <strcmp+0x48>
     326:	0e10      	lsrs	r0, r2, #24
     328:	0e19      	lsrs	r1, r3, #24
     32a:	1a40      	subs	r0, r0, r1
     32c:	bd70      	pop	{r4, r5, r6, pc}
     32e:	429a      	cmp	r2, r3
     330:	d0df      	beq.n	2f2 <strcmp+0xe>
     332:	ba10      	rev	r0, r2
     334:	ba19      	rev	r1, r3
     336:	4288      	cmp	r0, r1
     338:	d901      	bls.n	33e <strcmp+0x5a>
     33a:	2001      	movs	r0, #1
     33c:	bd70      	pop	{r4, r5, r6, pc}
     33e:	2000      	movs	r0, #0
     340:	43c0      	mvns	r0, r0
     342:	bd70      	pop	{r4, r5, r6, pc}
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     344:	7802      	ldrb	r2, [r0, #0]
     346:	780b      	ldrb	r3, [r1, #0]
     348:	3001      	adds	r0, #1
     34a:	3101      	adds	r1, #1
     34c:	2a00      	cmp	r2, #0
     34e:	d009      	beq.n	364 <strcmp+0x80>
		__ASSERT(false, "too many format args");
     350:	429a      	cmp	r2, r3
     352:	d107      	bne.n	364 <strcmp+0x80>
     354:	7802      	ldrb	r2, [r0, #0]
     356:	780b      	ldrb	r3, [r1, #0]
     358:	3001      	adds	r0, #1
     35a:	3101      	adds	r1, #1
     35c:	2a00      	cmp	r2, #0
     35e:	d001      	beq.n	364 <strcmp+0x80>
     360:	429a      	cmp	r2, r3
     362:	d0ef      	beq.n	344 <strcmp+0x60>
     364:	1ad0      	subs	r0, r2, r3
     366:	bd70      	pop	{r4, r5, r6, pc}

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     368:	01010101 	.word	0x01010101

0000036c <__aeabi_lmul>:
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     36e:	0c04      	lsrs	r4, r0, #16
     370:	000d      	movs	r5, r1
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     372:	b291      	uxth	r1, r2
     374:	000f      	movs	r7, r1
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     376:	4361      	muls	r1, r4
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     378:	468c      	mov	ip, r1
	*(char **)buf0 = NULL;
     37a:	0006      	movs	r6, r0
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     37c:	9301      	str	r3, [sp, #4]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     37e:	b283      	uxth	r3, r0
     380:	0c10      	lsrs	r0, r2, #16
	if (rws_pos_en) {
     382:	435f      	muls	r7, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     384:	4344      	muls	r4, r0
	if (rws_pos_en) {
     386:	4358      	muls	r0, r3
     388:	0c3b      	lsrs	r3, r7, #16
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     38a:	4460      	add	r0, ip
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     38c:	181b      	adds	r3, r3, r0
     38e:	4299      	cmp	r1, r3
	if (s_ro_cnt) {
     390:	d902      	bls.n	398 <__aeabi_lmul+0x2c>
     392:	2180      	movs	r1, #128	; 0x80
			*buf++ = str_ptr_arg[i];
     394:	0249      	lsls	r1, r1, #9
     396:	1864      	adds	r4, r4, r1
	for (i = 0; i < s_idx; i++) {
     398:	9901      	ldr	r1, [sp, #4]
     39a:	4355      	muls	r5, r2
     39c:	4371      	muls	r1, r6
	return BUF_OFFSET;
     39e:	0c18      	lsrs	r0, r3, #16
     3a0:	1904      	adds	r4, r0, r4
     3a2:	041b      	lsls	r3, r3, #16
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3a4:	b2bf      	uxth	r7, r7
		pkg_hdr->desc.rw_str_cnt = 0;
     3a6:	1949      	adds	r1, r1, r5
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3a8:	19d8      	adds	r0, r3, r7
     3aa:	1909      	adds	r1, r1, r4
     3ac:	b003      	add	sp, #12
     3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003b0 <__udivmoddi4>:
     3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b2:	0006      	movs	r6, r0
			if (BUF_OFFSET + 1 > len) {
     3b4:	000f      	movs	r7, r1
     3b6:	0015      	movs	r5, r2
     3b8:	001c      	movs	r4, r3
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3ba:	b085      	sub	sp, #20
			if (BUF_OFFSET + 1 > len) {
     3bc:	428b      	cmp	r3, r1
     3be:	d863      	bhi.n	488 <CONFIG_MAIN_STACK_SIZE+0x88>
     3c0:	d101      	bne.n	3c6 <__udivmoddi4+0x16>
			*buf++ = pos;
     3c2:	4282      	cmp	r2, r0
     3c4:	d860      	bhi.n	488 <CONFIG_MAIN_STACK_SIZE+0x88>
     3c6:	0021      	movs	r1, r4
     3c8:	0028      	movs	r0, r5
     3ca:	f7ff ff7f 	bl	2cc <__clzdi2>
		for (i = 0; i < s_idx; i++) {
     3ce:	0039      	movs	r1, r7
     3d0:	9000      	str	r0, [sp, #0]
     3d2:	0030      	movs	r0, r6
     3d4:	f7ff ff7a 	bl	2cc <__clzdi2>
     3d8:	9b00      	ldr	r3, [sp, #0]
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3da:	0021      	movs	r1, r4
			if (BUF_OFFSET + 1 > len) {
     3dc:	1a1b      	subs	r3, r3, r0
     3de:	001a      	movs	r2, r3
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     3e0:	0028      	movs	r0, r5
     3e2:	9303      	str	r3, [sp, #12]
     3e4:	f7ff ff66 	bl	2b4 <__aeabi_llsl>
     3e8:	9000      	str	r0, [sp, #0]
     3ea:	9101      	str	r1, [sp, #4]
		if (rws_pos_en) {
     3ec:	42b9      	cmp	r1, r7
     3ee:	d845      	bhi.n	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     3f0:	d101      	bne.n	3f6 <__udivmoddi4+0x46>
			*buf++ = str_ptr_arg[i];
     3f2:	42b0      	cmp	r0, r6
     3f4:	d842      	bhi.n	47c <CONFIG_MAIN_STACK_SIZE+0x7c>
     3f6:	9b00      	ldr	r3, [sp, #0]
			size = 0;
     3f8:	9c01      	ldr	r4, [sp, #4]
			*buf++ = str_ptr_arg[i];
     3fa:	2001      	movs	r0, #1
     3fc:	2100      	movs	r1, #0
     3fe:	9a03      	ldr	r2, [sp, #12]
     400:	1af6      	subs	r6, r6, r3
		if (BUF_OFFSET + 1 + size > len) {
     402:	41a7      	sbcs	r7, r4
     404:	f7ff ff56 	bl	2b4 <__aeabi_llsl>
     408:	0004      	movs	r4, r0
     40a:	000d      	movs	r5, r1
     40c:	9b03      	ldr	r3, [sp, #12]
     40e:	2b00      	cmp	r3, #0
     410:	d02b      	beq.n	46a <CONFIG_MAIN_STACK_SIZE+0x6a>
     412:	9b01      	ldr	r3, [sp, #4]
		*buf++ = str_ptr_pos[i];
     414:	9a00      	ldr	r2, [sp, #0]
     416:	07db      	lsls	r3, r3, #31
     418:	0850      	lsrs	r0, r2, #1
     41a:	4318      	orrs	r0, r3
     41c:	9b01      	ldr	r3, [sp, #4]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     41e:	0859      	lsrs	r1, r3, #1
     420:	9b03      	ldr	r3, [sp, #12]
     422:	469c      	mov	ip, r3
     424:	42b9      	cmp	r1, r7
     426:	d82c      	bhi.n	482 <CONFIG_MAIN_STACK_SIZE+0x82>
     428:	d101      	bne.n	42e <CONFIG_MAIN_STACK_SIZE+0x2e>
		buf += size;
     42a:	42b0      	cmp	r0, r6
     42c:	d829      	bhi.n	482 <CONFIG_MAIN_STACK_SIZE+0x82>
     42e:	0032      	movs	r2, r6
	for (i = 0; i < s_idx; i++) {
     430:	003b      	movs	r3, r7
     432:	1a12      	subs	r2, r2, r0
     434:	418b      	sbcs	r3, r1
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     436:	2601      	movs	r6, #1
     438:	1892      	adds	r2, r2, r2
     43a:	415b      	adcs	r3, r3
     43c:	2700      	movs	r7, #0
     43e:	18b6      	adds	r6, r6, r2
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     440:	415f      	adcs	r7, r3
			size = strlen(s) + 1;
     442:	2301      	movs	r3, #1
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     444:	425b      	negs	r3, r3
			size = strlen(s) + 1;
     446:	449c      	add	ip, r3
     448:	4663      	mov	r3, ip
     44a:	2b00      	cmp	r3, #0
     44c:	d1ea      	bne.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
		return -EFAULT;
     44e:	0030      	movs	r0, r6
     450:	0039      	movs	r1, r7
     452:	9a03      	ldr	r2, [sp, #12]
     454:	f7ff ff22 	bl	29c <__aeabi_llsr>
     458:	9a03      	ldr	r2, [sp, #12]
     45a:	19a4      	adds	r4, r4, r6
     45c:	417d      	adcs	r5, r7
     45e:	0006      	movs	r6, r0
     460:	000f      	movs	r7, r1
     462:	f7ff ff27 	bl	2b4 <__aeabi_llsl>
     466:	1a24      	subs	r4, r4, r0
     468:	418d      	sbcs	r5, r1
     46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     46c:	2b00      	cmp	r3, #0
     46e:	d001      	beq.n	474 <CONFIG_MAIN_STACK_SIZE+0x74>
     470:	601e      	str	r6, [r3, #0]
     472:	605f      	str	r7, [r3, #4]
     474:	0020      	movs	r0, r4
     476:	0029      	movs	r1, r5
     478:	b005      	add	sp, #20
     47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     47c:	2400      	movs	r4, #0
     47e:	2500      	movs	r5, #0
     480:	e7c4      	b.n	40c <CONFIG_MAIN_STACK_SIZE+0xc>
     482:	19b6      	adds	r6, r6, r6
     484:	417f      	adcs	r7, r7
     486:	e7dc      	b.n	442 <CONFIG_MAIN_STACK_SIZE+0x42>
     488:	2400      	movs	r4, #0
     48a:	2500      	movs	r5, #0
     48c:	e7ed      	b.n	46a <CONFIG_MAIN_STACK_SIZE+0x6a>
	...

00000490 <z_zassert.constprop.0>:

#define z_zexpect(cond, default_msg, file, line, func, msg, ...) z_zexpect_(cond, file, line)

#else /* CONFIG_ZTEST_ASSERT_VERBOSE != 0 */

static inline bool z_zassert(bool cond, const char *default_msg, const char *file, int line,
     490:	b530      	push	{r4, r5, lr}
     492:	0004      	movs	r4, r0
     494:	b085      	sub	sp, #20
			     const char *func, const char *msg, ...)
{
	if (cond == false) {
     496:	2800      	cmp	r0, #0
     498:	d116      	bne.n	4c8 <z_zassert.constprop.0+0x38>
		va_list vargs;

		va_start(vargs, msg);
     49a:	ab0a      	add	r3, sp, #40	; 0x28
		PRINT("\n    Assertion failed at %s:%d: %s: %s\n", ztest_relative_filename(file),
     49c:	480c      	ldr	r0, [pc, #48]	; (4d0 <z_zassert.constprop.0+0x40>)
		va_start(vargs, msg);
     49e:	9303      	str	r3, [sp, #12]
		PRINT("\n    Assertion failed at %s:%d: %s: %s\n", ztest_relative_filename(file),
     4a0:	f004 ff0c 	bl	52bc <ztest_relative_filename>
     4a4:	4a0b      	ldr	r2, [pc, #44]	; (4d4 <z_zassert.constprop.0+0x44>)
     4a6:	4d0c      	ldr	r5, [pc, #48]	; (4d8 <z_zassert.constprop.0+0x48>)
     4a8:	0001      	movs	r1, r0
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <z_zassert.constprop.0+0x4c>)
     4ac:	0028      	movs	r0, r5
     4ae:	9200      	str	r2, [sp, #0]
     4b0:	221e      	movs	r2, #30
     4b2:	f004 fe3f 	bl	5134 <printk>
		      line, func, default_msg);
		vprintk(msg, vargs);
     4b6:	480a      	ldr	r0, [pc, #40]	; (4e0 <z_zassert.constprop.0+0x50>)
     4b8:	9903      	ldr	r1, [sp, #12]
     4ba:	f000 f859 	bl	570 <vprintk>
		printk("\n");
     4be:	4809      	ldr	r0, [pc, #36]	; (4e4 <z_zassert.constprop.0+0x54>)
     4c0:	f004 fe38 	bl	5134 <printk>
		va_end(vargs);
		ztest_test_fail();
     4c4:	f000 ffc2 	bl	144c <ztest_test_fail>
		PRINT("\n   Assertion succeeded at %s:%d (%s)\n", ztest_relative_filename(file),
		      line, func);
	}
#endif
	return true;
}
     4c8:	0020      	movs	r0, r4
     4ca:	b005      	add	sp, #20
     4cc:	bd30      	pop	{r4, r5, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00005af1 	.word	0x00005af1
     4d4:	00005b6d 	.word	0x00005b6d
     4d8:	00005b45 	.word	0x00005b45
     4dc:	00005b1c 	.word	0x00005b1c
     4e0:	00006a75 	.word	0x00006a75
     4e4:	00006a74 	.word	0x00006a74

000004e8 <_ZL49_cpp_test_fixture_created_and_initialized_wrapperPv>:
	delete static_cast<struct cpp_fixture *>(fixture);
}

ZTEST_SUITE(cpp, NULL, cpp_setup, NULL, NULL, cpp_teardown);

ZTEST_F(cpp, test_fixture_created_and_initialized)
     4e8:	b507      	push	{r0, r1, r2, lr}
{
	zassert_equal(5, fixture->x);
     4ea:	6800      	ldr	r0, [r0, #0]
     4ec:	4a06      	ldr	r2, [pc, #24]	; (508 <_ZL49_cpp_test_fixture_created_and_initialized_wrapperPv+0x20>)
     4ee:	3805      	subs	r0, #5
     4f0:	4243      	negs	r3, r0
     4f2:	4158      	adcs	r0, r3
     4f4:	4b05      	ldr	r3, [pc, #20]	; (50c <_ZL49_cpp_test_fixture_created_and_initialized_wrapperPv+0x24>)
     4f6:	4906      	ldr	r1, [pc, #24]	; (510 <_ZL49_cpp_test_fixture_created_and_initialized_wrapperPv+0x28>)
     4f8:	9301      	str	r3, [sp, #4]
     4fa:	4b06      	ldr	r3, [pc, #24]	; (514 <_ZL49_cpp_test_fixture_created_and_initialized_wrapperPv+0x2c>)
     4fc:	b2c0      	uxtb	r0, r0
     4fe:	9300      	str	r3, [sp, #0]
     500:	231e      	movs	r3, #30
     502:	f7ff ffc5 	bl	490 <z_zassert.constprop.0>
ZTEST_F(cpp, test_fixture_created_and_initialized)
     506:	bd07      	pop	{r0, r1, r2, pc}
     508:	00005af1 	.word	0x00005af1
     50c:	00006a75 	.word	0x00006a75
     510:	00005b6d 	.word	0x00005b6d
     514:	00005b1c 	.word	0x00005b1c

00000518 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
     518:	b510      	push	{r4, lr}
	for (func_ptr *func = __zephyr_init_array_start;
     51a:	4c04      	ldr	r4, [pc, #16]	; (52c <__do_init_array_aux+0x14>)
		func < __zephyr_init_array_end;
     51c:	4b04      	ldr	r3, [pc, #16]	; (530 <__do_init_array_aux+0x18>)
     51e:	429c      	cmp	r4, r3
     520:	d300      	bcc.n	524 <__do_init_array_aux+0xc>
		func++) {
		(*func)();
	}
}
     522:	bd10      	pop	{r4, pc}
		(*func)();
     524:	cc08      	ldmia	r4!, {r3}
     526:	4798      	blx	r3
		func++) {
     528:	e7f8      	b.n	51c <__do_init_array_aux+0x4>
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	0000582c 	.word	0x0000582c
     530:	0000582c 	.word	0x0000582c

00000534 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
     534:	b570      	push	{r4, r5, r6, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__ZEPHYR_CTOR_LIST__[0];
     536:	4b06      	ldr	r3, [pc, #24]	; (550 <__do_global_ctors_aux+0x1c>)
     538:	681d      	ldr	r5, [r3, #0]

	while (nCtors >= 1U) {
     53a:	00ac      	lsls	r4, r5, #2
     53c:	18e4      	adds	r4, r4, r3
     53e:	2d00      	cmp	r5, #0
     540:	d100      	bne.n	544 <__do_global_ctors_aux+0x10>
		__ZEPHYR_CTOR_LIST__[nCtors--]();
	}
}
     542:	bd70      	pop	{r4, r5, r6, pc}
		__ZEPHYR_CTOR_LIST__[nCtors--]();
     544:	6823      	ldr	r3, [r4, #0]
     546:	4798      	blx	r3
     548:	3d01      	subs	r5, #1
     54a:	3c04      	subs	r4, #4
     54c:	e7f7      	b.n	53e <__do_global_ctors_aux+0xa>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	00005820 	.word	0x00005820

00000554 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     554:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
     556:	4b02      	ldr	r3, [pc, #8]	; (560 <char_out+0xc>)
     558:	681b      	ldr	r3, [r3, #0]
     55a:	4798      	blx	r3
}
     55c:	bd10      	pop	{r4, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	20000698 	.word	0x20000698

00000564 <__printk_hook_install>:
	_char_out = fn;
     564:	4b01      	ldr	r3, [pc, #4]	; (56c <__printk_hook_install+0x8>)
     566:	6018      	str	r0, [r3, #0]
}
     568:	4770      	bx	lr
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	20000698 	.word	0x20000698

00000570 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     570:	b513      	push	{r0, r1, r4, lr}
     572:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     574:	2100      	movs	r1, #0
     576:	4c03      	ldr	r4, [pc, #12]	; (584 <vprintk+0x14>)
     578:	0002      	movs	r2, r0
     57a:	9100      	str	r1, [sp, #0]
     57c:	0020      	movs	r0, r4
     57e:	f000 f87f 	bl	680 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     582:	bd13      	pop	{r0, r1, r4, pc}
     584:	00000555 	.word	0x00000555

00000588 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     588:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     58a:	2500      	movs	r5, #0
{
     58c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     58e:	9003      	str	r0, [sp, #12]
     590:	9104      	str	r1, [sp, #16]
{
     592:	0004      	movs	r4, r0
     594:	9500      	str	r5, [sp, #0]
     596:	4806      	ldr	r0, [pc, #24]	; (5b0 <vsnprintk+0x28>)
     598:	a903      	add	r1, sp, #12
	struct str_context ctx = { str, size, 0 };
     59a:	9505      	str	r5, [sp, #20]
     59c:	f000 f870 	bl	680 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     5a0:	9805      	ldr	r0, [sp, #20]
     5a2:	9b04      	ldr	r3, [sp, #16]
     5a4:	4298      	cmp	r0, r3
     5a6:	da00      	bge.n	5aa <vsnprintk+0x22>
		str[ctx.count] = '\0';
     5a8:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
     5aa:	b007      	add	sp, #28
     5ac:	bd30      	pop	{r4, r5, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	0000510b 	.word	0x0000510b

000005b4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
     5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5b6:	0003      	movs	r3, r0
	const char *sp = *str;
     5b8:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
     5ba:	2404      	movs	r4, #4
	size_t val = 0;
     5bc:	2000      	movs	r0, #0
		val = 10U * val + *sp++ - '0';
     5be:	260a      	movs	r6, #10
	while (isdigit((int)(unsigned char)*sp) != 0) {
     5c0:	4d05      	ldr	r5, [pc, #20]	; (5d8 <extract_decimal+0x24>)
     5c2:	7811      	ldrb	r1, [r2, #0]
     5c4:	5c6f      	ldrb	r7, [r5, r1]
     5c6:	4227      	tst	r7, r4
     5c8:	d101      	bne.n	5ce <extract_decimal+0x1a>
	}
	*str = sp;
     5ca:	601a      	str	r2, [r3, #0]
	return val;
}
     5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
     5ce:	4370      	muls	r0, r6
     5d0:	3830      	subs	r0, #48	; 0x30
     5d2:	3201      	adds	r2, #1
     5d4:	1840      	adds	r0, r0, r1
     5d6:	e7f4      	b.n	5c2 <extract_decimal+0xe>
     5d8:	000059f1 	.word	0x000059f1

000005dc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
     5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5de:	b085      	sub	sp, #20
     5e0:	9001      	str	r0, [sp, #4]
     5e2:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier) != 0;
     5e4:	78d3      	ldrb	r3, [r2, #3]
{
     5e6:	0015      	movs	r5, r2
	bool upcase = isupper((int)conv->specifier) != 0;
     5e8:	4a24      	ldr	r2, [pc, #144]	; (67c <encode_uint+0xa0>)
{
     5ea:	000f      	movs	r7, r1
     5ec:	5cd1      	ldrb	r1, [r2, r3]
     5ee:	2203      	movs	r2, #3
     5f0:	4011      	ands	r1, r2
	switch (specifier) {
     5f2:	2408      	movs	r4, #8
     5f4:	9102      	str	r1, [sp, #8]
     5f6:	2b6f      	cmp	r3, #111	; 0x6f
     5f8:	d00a      	beq.n	610 <encode_uint+0x34>
     5fa:	d804      	bhi.n	606 <encode_uint+0x2a>
		return 16;
     5fc:	1924      	adds	r4, r4, r4
	switch (specifier) {
     5fe:	2b58      	cmp	r3, #88	; 0x58
     600:	d006      	beq.n	610 <encode_uint+0x34>
		return 10;
     602:	3c06      	subs	r4, #6
     604:	e004      	b.n	610 <encode_uint+0x34>
	switch (specifier) {
     606:	2208      	movs	r2, #8
		return 16;
     608:	2410      	movs	r4, #16
	switch (specifier) {
     60a:	4393      	bics	r3, r2
     60c:	2b70      	cmp	r3, #112	; 0x70
     60e:	d1f8      	bne.n	602 <encode_uint+0x26>
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
     610:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
     612:	0022      	movs	r2, r4
     614:	2300      	movs	r3, #0
     616:	0039      	movs	r1, r7
     618:	9801      	ldr	r0, [sp, #4]
     61a:	f7ff fe1f 	bl	25c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
     61e:	0013      	movs	r3, r2
     620:	468c      	mov	ip, r1
     622:	b2d2      	uxtb	r2, r2
     624:	2b09      	cmp	r3, #9
     626:	d81a      	bhi.n	65e <encode_uint+0x82>
     628:	3230      	adds	r2, #48	; 0x30
     62a:	b2d3      	uxtb	r3, r2
     62c:	3e01      	subs	r6, #1
     62e:	7033      	strb	r3, [r6, #0]
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
     630:	2300      	movs	r3, #0
     632:	42bb      	cmp	r3, r7
     634:	d102      	bne.n	63c <encode_uint+0x60>
     636:	9b01      	ldr	r3, [sp, #4]
     638:	429c      	cmp	r4, r3
     63a:	d802      	bhi.n	642 <encode_uint+0x66>
     63c:	9b03      	ldr	r3, [sp, #12]
     63e:	429e      	cmp	r6, r3
     640:	d80a      	bhi.n	658 <encode_uint+0x7c>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
     642:	782b      	ldrb	r3, [r5, #0]
     644:	069b      	lsls	r3, r3, #26
     646:	d504      	bpl.n	652 <encode_uint+0x76>
		if (radix == 8) {
     648:	2c08      	cmp	r4, #8
     64a:	d110      	bne.n	66e <encode_uint+0x92>
			conv->altform_0 = true;
     64c:	78ab      	ldrb	r3, [r5, #2]
     64e:	4323      	orrs	r3, r4
     650:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
     652:	0030      	movs	r0, r6
     654:	b005      	add	sp, #20
     656:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
     658:	4667      	mov	r7, ip
     65a:	9001      	str	r0, [sp, #4]
     65c:	e7d9      	b.n	612 <encode_uint+0x36>
		*--bp = (lsv <= 9) ? ('0' + lsv)
     65e:	0013      	movs	r3, r2
     660:	9902      	ldr	r1, [sp, #8]
     662:	3357      	adds	r3, #87	; 0x57
     664:	b2db      	uxtb	r3, r3
     666:	2901      	cmp	r1, #1
     668:	d1e0      	bne.n	62c <encode_uint+0x50>
     66a:	3237      	adds	r2, #55	; 0x37
     66c:	e7dd      	b.n	62a <encode_uint+0x4e>
		} else if (radix == 16) {
     66e:	2c10      	cmp	r4, #16
     670:	d1ef      	bne.n	652 <encode_uint+0x76>
			conv->altform_0c = true;
     672:	78ab      	ldrb	r3, [r5, #2]
     674:	431c      	orrs	r4, r3
     676:	70ac      	strb	r4, [r5, #2]
	return bp;
     678:	e7eb      	b.n	652 <encode_uint+0x76>
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	000059f1 	.word	0x000059f1

00000680 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     684:	2700      	movs	r7, #0
{
     686:	b09b      	sub	sp, #108	; 0x6c
     688:	9004      	str	r0, [sp, #16]
     68a:	9105      	str	r1, [sp, #20]
     68c:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     68e:	9b08      	ldr	r3, [sp, #32]
     690:	7818      	ldrb	r0, [r3, #0]
     692:	2800      	cmp	r0, #0
     694:	d101      	bne.n	69a <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     696:	0038      	movs	r0, r7
     698:	e328      	b.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
			OUTC(*fp++);
     69a:	9b08      	ldr	r3, [sp, #32]
     69c:	3301      	adds	r3, #1
     69e:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
     6a0:	2825      	cmp	r0, #37	; 0x25
     6a2:	d007      	beq.n	6b4 <z_cbvprintf_impl+0x34>
			OUTC('%');
     6a4:	9905      	ldr	r1, [sp, #20]
     6a6:	9b04      	ldr	r3, [sp, #16]
     6a8:	4798      	blx	r3
     6aa:	2800      	cmp	r0, #0
     6ac:	da00      	bge.n	6b0 <z_cbvprintf_impl+0x30>
     6ae:	e31d      	b.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     6b0:	3701      	adds	r7, #1
		if (bps == NULL) {
     6b2:	e1e2      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
		} state = {
     6b4:	ad14      	add	r5, sp, #80	; 0x50
     6b6:	2218      	movs	r2, #24
     6b8:	2100      	movs	r1, #0
     6ba:	0028      	movs	r0, r5
     6bc:	f004 fac2 	bl	4c44 <memset>
	if (*sp == '%') {
     6c0:	9b08      	ldr	r3, [sp, #32]
     6c2:	785b      	ldrb	r3, [r3, #1]
     6c4:	2b25      	cmp	r3, #37	; 0x25
     6c6:	d114      	bne.n	6f2 <__data_size+0x3d>
		conv->specifier = *sp++;
     6c8:	9a08      	ldr	r2, [sp, #32]
     6ca:	72eb      	strb	r3, [r5, #11]
     6cc:	3202      	adds	r2, #2
     6ce:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
     6d0:	ab14      	add	r3, sp, #80	; 0x50
     6d2:	7a5a      	ldrb	r2, [r3, #9]
     6d4:	07d1      	lsls	r1, r2, #31
     6d6:	d400      	bmi.n	6da <__data_size+0x25>
     6d8:	e17e      	b.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
			width = va_arg(ap, int);
     6da:	cc02      	ldmia	r4!, {r1}
     6dc:	9103      	str	r1, [sp, #12]
			if (width < 0) {
     6de:	2900      	cmp	r1, #0
     6e0:	db00      	blt.n	6e4 <__data_size+0x2f>
     6e2:	e17e      	b.n	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
				conv->flag_dash = true;
     6e4:	2104      	movs	r1, #4
     6e6:	7a18      	ldrb	r0, [r3, #8]
     6e8:	4301      	orrs	r1, r0
     6ea:	7219      	strb	r1, [r3, #8]
				width = -width;
     6ec:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
     6ee:	425b      	negs	r3, r3
     6f0:	e176      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
     6f2:	2200      	movs	r2, #0
		switch (*sp) {
     6f4:	2601      	movs	r6, #1
     6f6:	0015      	movs	r5, r2
     6f8:	0010      	movs	r0, r2
     6fa:	4694      	mov	ip, r2
     6fc:	9203      	str	r2, [sp, #12]
     6fe:	9b07      	ldr	r3, [sp, #28]
     700:	781b      	ldrb	r3, [r3, #0]
     702:	2b2b      	cmp	r3, #43	; 0x2b
     704:	d100      	bne.n	708 <__data_size+0x53>
     706:	e091      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     708:	d900      	bls.n	70c <__data_size+0x57>
     70a:	e088      	b.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
     70c:	2b20      	cmp	r3, #32
     70e:	d100      	bne.n	712 <__data_size+0x5d>
     710:	e091      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     712:	2b23      	cmp	r3, #35	; 0x23
     714:	d100      	bne.n	718 <__data_size+0x63>
     716:	e090      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     718:	2a00      	cmp	r2, #0
     71a:	d005      	beq.n	728 <__data_size+0x73>
     71c:	ae14      	add	r6, sp, #80	; 0x50
     71e:	7a32      	ldrb	r2, [r6, #8]
     720:	0011      	movs	r1, r2
     722:	2240      	movs	r2, #64	; 0x40
     724:	430a      	orrs	r2, r1
     726:	7232      	strb	r2, [r6, #8]
     728:	9a03      	ldr	r2, [sp, #12]
     72a:	2a00      	cmp	r2, #0
     72c:	d004      	beq.n	738 <__data_size+0x83>
     72e:	2220      	movs	r2, #32
     730:	a914      	add	r1, sp, #80	; 0x50
     732:	7a0e      	ldrb	r6, [r1, #8]
     734:	4332      	orrs	r2, r6
     736:	720a      	strb	r2, [r1, #8]
     738:	2d00      	cmp	r5, #0
     73a:	d004      	beq.n	746 <__data_size+0x91>
     73c:	2210      	movs	r2, #16
     73e:	a914      	add	r1, sp, #80	; 0x50
     740:	7a0d      	ldrb	r5, [r1, #8]
     742:	432a      	orrs	r2, r5
     744:	720a      	strb	r2, [r1, #8]
     746:	2800      	cmp	r0, #0
     748:	d004      	beq.n	754 <__data_size+0x9f>
     74a:	2208      	movs	r2, #8
     74c:	a914      	add	r1, sp, #80	; 0x50
     74e:	7a08      	ldrb	r0, [r1, #8]
     750:	4302      	orrs	r2, r0
     752:	720a      	strb	r2, [r1, #8]
     754:	4662      	mov	r2, ip
     756:	2a00      	cmp	r2, #0
     758:	d004      	beq.n	764 <__data_size+0xaf>
     75a:	2204      	movs	r2, #4
     75c:	a914      	add	r1, sp, #80	; 0x50
     75e:	7a08      	ldrb	r0, [r1, #8]
     760:	4302      	orrs	r2, r0
     762:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
     764:	2044      	movs	r0, #68	; 0x44
     766:	a914      	add	r1, sp, #80	; 0x50
     768:	7a0a      	ldrb	r2, [r1, #8]
     76a:	4010      	ands	r0, r2
     76c:	2844      	cmp	r0, #68	; 0x44
     76e:	d102      	bne.n	776 <__data_size+0xc1>
		conv->flag_zero = false;
     770:	2040      	movs	r0, #64	; 0x40
     772:	4382      	bics	r2, r0
     774:	720a      	strb	r2, [r1, #8]
	sp = extract_width(conv, sp);
     776:	9a07      	ldr	r2, [sp, #28]
	conv->width_present = true;
     778:	ad14      	add	r5, sp, #80	; 0x50
     77a:	920d      	str	r2, [sp, #52]	; 0x34
     77c:	2280      	movs	r2, #128	; 0x80
     77e:	7a29      	ldrb	r1, [r5, #8]
     780:	4252      	negs	r2, r2
     782:	430a      	orrs	r2, r1
     784:	722a      	strb	r2, [r5, #8]
	if (*sp == '*') {
     786:	2b2a      	cmp	r3, #42	; 0x2a
     788:	d15b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
		conv->width_star = true;
     78a:	7a6a      	ldrb	r2, [r5, #9]
     78c:	3b29      	subs	r3, #41	; 0x29
     78e:	4313      	orrs	r3, r2
     790:	726b      	strb	r3, [r5, #9]
		return ++sp;
     792:	9b07      	ldr	r3, [sp, #28]
     794:	3301      	adds	r3, #1
	conv->prec_present = (*sp == '.');
     796:	7819      	ldrb	r1, [r3, #0]
     798:	2602      	movs	r6, #2
     79a:	0008      	movs	r0, r1
     79c:	382e      	subs	r0, #46	; 0x2e
     79e:	4242      	negs	r2, r0
     7a0:	4150      	adcs	r0, r2
     7a2:	ad14      	add	r5, sp, #80	; 0x50
     7a4:	7a6a      	ldrb	r2, [r5, #9]
     7a6:	0040      	lsls	r0, r0, #1
     7a8:	43b2      	bics	r2, r6
     7aa:	4302      	orrs	r2, r0
     7ac:	726a      	strb	r2, [r5, #9]
	if (!conv->prec_present) {
     7ae:	292e      	cmp	r1, #46	; 0x2e
     7b0:	d109      	bne.n	7c6 <__data_size+0x111>
	++sp;
     7b2:	1c5a      	adds	r2, r3, #1
     7b4:	920d      	str	r2, [sp, #52]	; 0x34
	if (*sp == '*') {
     7b6:	785a      	ldrb	r2, [r3, #1]
     7b8:	2a2a      	cmp	r2, #42	; 0x2a
     7ba:	d152      	bne.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
		conv->prec_star = true;
     7bc:	7a69      	ldrb	r1, [r5, #9]
     7be:	3a26      	subs	r2, #38	; 0x26
     7c0:	430a      	orrs	r2, r1
     7c2:	726a      	strb	r2, [r5, #9]
		return ++sp;
     7c4:	199b      	adds	r3, r3, r6
	switch (*sp) {
     7c6:	7819      	ldrb	r1, [r3, #0]
     7c8:	aa14      	add	r2, sp, #80	; 0x50
     7ca:	296c      	cmp	r1, #108	; 0x6c
     7cc:	d072      	beq.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     7ce:	d856      	bhi.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     7d0:	2968      	cmp	r1, #104	; 0x68
     7d2:	d05d      	beq.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
     7d4:	296a      	cmp	r1, #106	; 0x6a
     7d6:	d079      	beq.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
     7d8:	294c      	cmp	r1, #76	; 0x4c
     7da:	d100      	bne.n	7de <__data_size+0x129>
     7dc:	e080      	b.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
	conv->specifier = *sp++;
     7de:	1c5a      	adds	r2, r3, #1
     7e0:	7819      	ldrb	r1, [r3, #0]
     7e2:	9207      	str	r2, [sp, #28]
     7e4:	aa14      	add	r2, sp, #80	; 0x50
		if (conv->length_mod == LENGTH_UPPER_L) {
     7e6:	7a53      	ldrb	r3, [r2, #9]
	conv->specifier = *sp++;
     7e8:	72d1      	strb	r1, [r2, #11]
	switch (conv->specifier) {
     7ea:	2978      	cmp	r1, #120	; 0x78
     7ec:	d900      	bls.n	7f0 <__data_size+0x13b>
     7ee:	e0ee      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
     7f0:	296d      	cmp	r1, #109	; 0x6d
     7f2:	d87c      	bhi.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
     7f4:	2969      	cmp	r1, #105	; 0x69
     7f6:	d900      	bls.n	7fa <__data_size+0x145>
     7f8:	e0e9      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
     7fa:	2957      	cmp	r1, #87	; 0x57
     7fc:	d900      	bls.n	800 <CONFIG_ISR_STACK_SIZE>
     7fe:	e091      	b.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
     800:	2941      	cmp	r1, #65	; 0x41
     802:	d003      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     804:	3945      	subs	r1, #69	; 0x45
     806:	2902      	cmp	r1, #2
     808:	d900      	bls.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     80a:	e0e0      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
		conv->specifier_cat = SPECIFIER_FP;
     80c:	2307      	movs	r3, #7
     80e:	a914      	add	r1, sp, #80	; 0x50
     810:	7a8a      	ldrb	r2, [r1, #10]
     812:	439a      	bics	r2, r3
     814:	3b03      	subs	r3, #3
     816:	4313      	orrs	r3, r2
     818:	728b      	strb	r3, [r1, #10]
			unsupported = true;
     81a:	2301      	movs	r3, #1
			break;
     81c:	e09f      	b.n	95e <CONFIG_ISR_STACK_SIZE+0x15e>
		switch (*sp) {
     81e:	2b2d      	cmp	r3, #45	; 0x2d
     820:	d00d      	beq.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
     822:	2b30      	cmp	r3, #48	; 0x30
     824:	d000      	beq.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
     826:	e777      	b.n	718 <__data_size+0x63>
     828:	0032      	movs	r2, r6
     82a:	e000      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
     82c:	0030      	movs	r0, r6
			++sp;
     82e:	9b07      	ldr	r3, [sp, #28]
     830:	3301      	adds	r3, #1
     832:	9307      	str	r3, [sp, #28]
	} while (loop);
     834:	e763      	b.n	6fe <__data_size+0x49>
		switch (*sp) {
     836:	0035      	movs	r5, r6
     838:	e7f9      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
     83a:	9603      	str	r6, [sp, #12]
     83c:	e7f7      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
     83e:	46b4      	mov	ip, r6
     840:	e7f5      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
	size_t width = extract_decimal(&sp);
     842:	a80d      	add	r0, sp, #52	; 0x34
     844:	f7ff feb6 	bl	5b4 <extract_decimal>
	if (sp != wp) {
     848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     84a:	9a07      	ldr	r2, [sp, #28]
     84c:	4293      	cmp	r3, r2
     84e:	d0a2      	beq.n	796 <__data_size+0xe1>
		conv->unsupported |= ((conv->width_value < 0)
     850:	2102      	movs	r1, #2
     852:	7a2a      	ldrb	r2, [r5, #8]
		conv->width_value = width;
     854:	60e8      	str	r0, [r5, #12]
		conv->unsupported |= ((conv->width_value < 0)
     856:	0fc0      	lsrs	r0, r0, #31
     858:	0040      	lsls	r0, r0, #1
     85a:	438a      	bics	r2, r1
     85c:	4302      	orrs	r2, r0
     85e:	722a      	strb	r2, [r5, #8]
     860:	e799      	b.n	796 <__data_size+0xe1>
	size_t prec = extract_decimal(&sp);
     862:	a80d      	add	r0, sp, #52	; 0x34
     864:	f7ff fea6 	bl	5b4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
     868:	7a2b      	ldrb	r3, [r5, #8]
	conv->prec_value = prec;
     86a:	6128      	str	r0, [r5, #16]
	conv->unsupported |= ((conv->prec_value < 0)
     86c:	079a      	lsls	r2, r3, #30
			      || (prec != (size_t)conv->prec_value));
     86e:	4310      	orrs	r0, r2
	conv->unsupported |= ((conv->prec_value < 0)
     870:	0fc0      	lsrs	r0, r0, #31
     872:	0040      	lsls	r0, r0, #1
     874:	43b3      	bics	r3, r6
     876:	4303      	orrs	r3, r0
     878:	722b      	strb	r3, [r5, #8]
	return sp;
     87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     87c:	e7a3      	b.n	7c6 <__data_size+0x111>
	switch (*sp) {
     87e:	2974      	cmp	r1, #116	; 0x74
     880:	d029      	beq.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     882:	297a      	cmp	r1, #122	; 0x7a
     884:	d1ab      	bne.n	7de <__data_size+0x129>
		conv->length_mod = LENGTH_Z;
     886:	2178      	movs	r1, #120	; 0x78
     888:	7a50      	ldrb	r0, [r2, #9]
     88a:	4388      	bics	r0, r1
     88c:	3948      	subs	r1, #72	; 0x48
     88e:	e00d      	b.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
		if (*++sp == 'h') {
     890:	7858      	ldrb	r0, [r3, #1]
     892:	2178      	movs	r1, #120	; 0x78
     894:	2868      	cmp	r0, #104	; 0x68
     896:	d106      	bne.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
			conv->length_mod = LENGTH_HH;
     898:	7a50      	ldrb	r0, [r2, #9]
     89a:	4388      	bics	r0, r1
     89c:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
     89e:	4301      	orrs	r1, r0
     8a0:	7251      	strb	r1, [r2, #9]
			++sp;
     8a2:	3302      	adds	r3, #2
     8a4:	e79b      	b.n	7de <__data_size+0x129>
			conv->length_mod = LENGTH_H;
     8a6:	7a50      	ldrb	r0, [r2, #9]
     8a8:	4388      	bics	r0, r1
     8aa:	2110      	movs	r1, #16
     8ac:	4301      	orrs	r1, r0
     8ae:	7251      	strb	r1, [r2, #9]
		if (*++sp == 'h') {
     8b0:	3301      	adds	r3, #1
     8b2:	e794      	b.n	7de <__data_size+0x129>
		if (*++sp == 'l') {
     8b4:	7858      	ldrb	r0, [r3, #1]
     8b6:	2178      	movs	r1, #120	; 0x78
     8b8:	286c      	cmp	r0, #108	; 0x6c
     8ba:	d103      	bne.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
			conv->length_mod = LENGTH_LL;
     8bc:	7a50      	ldrb	r0, [r2, #9]
     8be:	4388      	bics	r0, r1
     8c0:	3958      	subs	r1, #88	; 0x58
     8c2:	e7ec      	b.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
			conv->length_mod = LENGTH_L;
     8c4:	7a50      	ldrb	r0, [r2, #9]
     8c6:	4388      	bics	r0, r1
     8c8:	2118      	movs	r1, #24
     8ca:	e7ef      	b.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
		conv->length_mod = LENGTH_J;
     8cc:	2178      	movs	r1, #120	; 0x78
     8ce:	7a50      	ldrb	r0, [r2, #9]
     8d0:	4388      	bics	r0, r1
     8d2:	3950      	subs	r1, #80	; 0x50
     8d4:	e7ea      	b.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
		conv->length_mod = LENGTH_T;
     8d6:	2178      	movs	r1, #120	; 0x78
     8d8:	7a50      	ldrb	r0, [r2, #9]
     8da:	4388      	bics	r0, r1
     8dc:	3940      	subs	r1, #64	; 0x40
     8de:	e7e5      	b.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
		conv->unsupported = true;
     8e0:	8910      	ldrh	r0, [r2, #8]
     8e2:	49b4      	ldr	r1, [pc, #720]	; (bb4 <CONFIG_ISR_STACK_SIZE+0x3b4>)
     8e4:	4008      	ands	r0, r1
     8e6:	49b4      	ldr	r1, [pc, #720]	; (bb8 <CONFIG_ZTEST_CPU_HOLD_TIME_MS>)
     8e8:	4301      	orrs	r1, r0
     8ea:	8111      	strh	r1, [r2, #8]
		break;
     8ec:	e7e0      	b.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     8ee:	2001      	movs	r0, #1
     8f0:	0005      	movs	r5, r0
	switch (conv->specifier) {
     8f2:	396e      	subs	r1, #110	; 0x6e
     8f4:	b2c9      	uxtb	r1, r1
     8f6:	408d      	lsls	r5, r1
     8f8:	0029      	movs	r1, r5
     8fa:	4db0      	ldr	r5, [pc, #704]	; (bbc <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x4>)
     8fc:	4229      	tst	r1, r5
     8fe:	d13d      	bne.n	97c <CONFIG_ISR_STACK_SIZE+0x17c>
     900:	2524      	movs	r5, #36	; 0x24
     902:	4229      	tst	r1, r5
     904:	d15a      	bne.n	9bc <CONFIG_ISR_STACK_SIZE+0x1bc>
     906:	4201      	tst	r1, r0
     908:	d061      	beq.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
		conv->specifier_cat = SPECIFIER_PTR;
     90a:	2107      	movs	r1, #7
     90c:	7a90      	ldrb	r0, [r2, #10]
     90e:	4388      	bics	r0, r1
     910:	3904      	subs	r1, #4
     912:	4301      	orrs	r1, r0
     914:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
     916:	2278      	movs	r2, #120	; 0x78
     918:	4013      	ands	r3, r2
     91a:	3b40      	subs	r3, #64	; 0x40
     91c:	425a      	negs	r2, r3
     91e:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
     920:	b2db      	uxtb	r3, r3
     922:	e01c      	b.n	95e <CONFIG_ISR_STACK_SIZE+0x15e>
     924:	2001      	movs	r0, #1
	switch (conv->specifier) {
     926:	000d      	movs	r5, r1
     928:	0006      	movs	r6, r0
     92a:	3d58      	subs	r5, #88	; 0x58
     92c:	b2ed      	uxtb	r5, r5
     92e:	40ae      	lsls	r6, r5
     930:	0035      	movs	r5, r6
     932:	26e2      	movs	r6, #226	; 0xe2
     934:	0236      	lsls	r6, r6, #8
     936:	4235      	tst	r5, r6
     938:	d000      	beq.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
     93a:	e767      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     93c:	4ea0      	ldr	r6, [pc, #640]	; (bc0 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x8>)
     93e:	4235      	tst	r5, r6
     940:	d12a      	bne.n	998 <CONFIG_ISR_STACK_SIZE+0x198>
     942:	2184      	movs	r1, #132	; 0x84
     944:	0289      	lsls	r1, r1, #10
     946:	420d      	tst	r5, r1
     948:	d041      	beq.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
		conv->specifier_cat = SPECIFIER_SINT;
     94a:	2507      	movs	r5, #7
     94c:	7a91      	ldrb	r1, [r2, #10]
     94e:	43a9      	bics	r1, r5
     950:	4301      	orrs	r1, r0
     952:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
     954:	2178      	movs	r1, #120	; 0x78
     956:	400b      	ands	r3, r1
     958:	2b40      	cmp	r3, #64	; 0x40
     95a:	d00b      	beq.n	974 <CONFIG_ISR_STACK_SIZE+0x174>
	bool unsupported = false;
     95c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     95e:	aa14      	add	r2, sp, #80	; 0x50
     960:	7a11      	ldrb	r1, [r2, #8]
     962:	0788      	lsls	r0, r1, #30
     964:	0fc0      	lsrs	r0, r0, #31
     966:	4303      	orrs	r3, r0
     968:	2002      	movs	r0, #2
     96a:	005b      	lsls	r3, r3, #1
     96c:	4381      	bics	r1, r0
     96e:	4319      	orrs	r1, r3
     970:	7211      	strb	r1, [r2, #8]
	return sp;
     972:	e6ad      	b.n	6d0 <__data_size+0x1b>
			conv->invalid = true;
     974:	7a13      	ldrb	r3, [r2, #8]
     976:	4303      	orrs	r3, r0
		conv->invalid = true;
     978:	7213      	strb	r3, [r2, #8]
		break;
     97a:	e7ef      	b.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
		conv->specifier_cat = SPECIFIER_UINT;
     97c:	2107      	movs	r1, #7
     97e:	7a95      	ldrb	r5, [r2, #10]
     980:	438d      	bics	r5, r1
     982:	3905      	subs	r1, #5
     984:	4329      	orrs	r1, r5
     986:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
     988:	2178      	movs	r1, #120	; 0x78
     98a:	400b      	ands	r3, r1
     98c:	2b40      	cmp	r3, #64	; 0x40
     98e:	d1e5      	bne.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
			conv->invalid = true;
     990:	7a13      	ldrb	r3, [r2, #8]
     992:	4318      	orrs	r0, r3
     994:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
     996:	e7e1      	b.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
		conv->specifier_cat = SPECIFIER_UINT;
     998:	2507      	movs	r5, #7
     99a:	7a96      	ldrb	r6, [r2, #10]
     99c:	43ae      	bics	r6, r5
     99e:	3d05      	subs	r5, #5
     9a0:	4335      	orrs	r5, r6
     9a2:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
     9a4:	2578      	movs	r5, #120	; 0x78
     9a6:	402b      	ands	r3, r5
     9a8:	2b40      	cmp	r3, #64	; 0x40
     9aa:	d102      	bne.n	9b2 <CONFIG_ISR_STACK_SIZE+0x1b2>
			conv->invalid = true;
     9ac:	7a15      	ldrb	r5, [r2, #8]
     9ae:	4328      	orrs	r0, r5
     9b0:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
     9b2:	2963      	cmp	r1, #99	; 0x63
     9b4:	d1d2      	bne.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
		if (conv->length_mod != LENGTH_NONE) {
     9b6:	1e5a      	subs	r2, r3, #1
     9b8:	4193      	sbcs	r3, r2
     9ba:	e7b1      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
		conv->specifier_cat = SPECIFIER_PTR;
     9bc:	2107      	movs	r1, #7
     9be:	7a90      	ldrb	r0, [r2, #10]
     9c0:	4388      	bics	r0, r1
     9c2:	3904      	subs	r1, #4
     9c4:	4301      	orrs	r1, r0
     9c6:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
     9c8:	2278      	movs	r2, #120	; 0x78
     9ca:	4013      	ands	r3, r2
     9cc:	e7f3      	b.n	9b6 <CONFIG_ISR_STACK_SIZE+0x1b6>
		conv->invalid = true;
     9ce:	2301      	movs	r3, #1
     9d0:	aa14      	add	r2, sp, #80	; 0x50
     9d2:	7a11      	ldrb	r1, [r2, #8]
     9d4:	430b      	orrs	r3, r1
     9d6:	e7cf      	b.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
		} else if (conv->width_present) {
     9d8:	7a19      	ldrb	r1, [r3, #8]
     9da:	297f      	cmp	r1, #127	; 0x7f
     9dc:	d90f      	bls.n	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
			width = conv->width_value;
     9de:	68db      	ldr	r3, [r3, #12]
		int width = -1;
     9e0:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
     9e2:	ab14      	add	r3, sp, #80	; 0x50
     9e4:	0751      	lsls	r1, r2, #29
     9e6:	d50c      	bpl.n	a02 <CONFIG_ISR_STACK_SIZE+0x202>
			int arg = va_arg(ap, int);
     9e8:	cc04      	ldmia	r4!, {r2}
     9ea:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
     9ec:	2a00      	cmp	r2, #0
     9ee:	da0c      	bge.n	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
				conv->prec_present = false;
     9f0:	2102      	movs	r1, #2
     9f2:	7a5a      	ldrb	r2, [r3, #9]
     9f4:	438a      	bics	r2, r1
     9f6:	725a      	strb	r2, [r3, #9]
		int precision = -1;
     9f8:	2301      	movs	r3, #1
     9fa:	425b      	negs	r3, r3
     9fc:	e004      	b.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
		int width = -1;
     9fe:	2301      	movs	r3, #1
     a00:	e675      	b.n	6ee <__data_size+0x39>
		} else if (conv->prec_present) {
     a02:	0792      	lsls	r2, r2, #30
     a04:	d5f8      	bpl.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
			precision = conv->prec_value;
     a06:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
     a08:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
     a0a:	2500      	movs	r5, #0
     a0c:	a914      	add	r1, sp, #80	; 0x50
			= (enum specifier_cat_enum)conv->specifier_cat;
     a0e:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
     a10:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
     a12:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
     a14:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
     a16:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
     a18:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
     a1a:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
     a1c:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
     a1e:	2b01      	cmp	r3, #1
     a20:	d130      	bne.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
			switch (length_mod) {
     a22:	1ed0      	subs	r0, r2, #3
     a24:	2804      	cmp	r0, #4
     a26:	d804      	bhi.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
     a28:	f7ff fb4a 	bl	c0 <__gnu_thumb1_case_uqi>
     a2c:	0e45450e 	.word	0x0e45450e
     a30:	0e          	.byte	0x0e
     a31:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a32:	6823      	ldr	r3, [r4, #0]
     a34:	17d8      	asrs	r0, r3, #31
     a36:	9314      	str	r3, [sp, #80]	; 0x50
     a38:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
     a3a:	2a01      	cmp	r2, #1
     a3c:	d109      	bne.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
				value->sint = (signed char)value->sint;
     a3e:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
     a40:	9314      	str	r3, [sp, #80]	; 0x50
     a42:	17db      	asrs	r3, r3, #31
     a44:	604b      	str	r3, [r1, #4]
     a46:	e006      	b.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a48:	cc08      	ldmia	r4!, {r3}
     a4a:	9314      	str	r3, [sp, #80]	; 0x50
     a4c:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
     a4e:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
     a50:	e002      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
			} else if (length_mod == LENGTH_H) {
     a52:	2a02      	cmp	r2, #2
     a54:	d014      	beq.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
				value->sint = va_arg(ap, int);
     a56:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     a58:	a914      	add	r1, sp, #80	; 0x50
     a5a:	7a0b      	ldrb	r3, [r1, #8]
     a5c:	2003      	movs	r0, #3
     a5e:	001d      	movs	r5, r3
     a60:	4005      	ands	r5, r0
     a62:	4203      	tst	r3, r0
     a64:	d045      	beq.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
			OUTS(sp, fp);
     a66:	9b07      	ldr	r3, [sp, #28]
     a68:	9a08      	ldr	r2, [sp, #32]
     a6a:	9905      	ldr	r1, [sp, #20]
     a6c:	9804      	ldr	r0, [sp, #16]
     a6e:	f004 fb76 	bl	515e <outs>
     a72:	2800      	cmp	r0, #0
     a74:	da00      	bge.n	a78 <CONFIG_ISR_STACK_SIZE+0x278>
     a76:	e139      	b.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     a78:	183f      	adds	r7, r7, r0
			continue;
     a7a:	9b07      	ldr	r3, [sp, #28]
     a7c:	9308      	str	r3, [sp, #32]
     a7e:	e606      	b.n	68e <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
     a80:	b21b      	sxth	r3, r3
     a82:	e7dd      	b.n	a40 <CONFIG_ISR_STACK_SIZE+0x240>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a84:	2b02      	cmp	r3, #2
     a86:	d125      	bne.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
			switch (length_mod) {
     a88:	1ed0      	subs	r0, r2, #3
     a8a:	2804      	cmp	r0, #4
     a8c:	d804      	bhi.n	a98 <CONFIG_ISR_STACK_SIZE+0x298>
     a8e:	f7ff fb17 	bl	c0 <__gnu_thumb1_case_uqi>
     a92:	120d      	.short	0x120d
     a94:	1912      	.short	0x1912
     a96:	19          	.byte	0x19
     a97:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     a98:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
     a9a:	2a01      	cmp	r2, #1
     a9c:	d016      	beq.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
				value->uint = va_arg(ap, unsigned int);
     a9e:	9314      	str	r3, [sp, #80]	; 0x50
     aa0:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
     aa2:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
     aa4:	2a02      	cmp	r2, #2
     aa6:	d1d7      	bne.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
			value->ptr = va_arg(ap, void *);
     aa8:	9314      	str	r3, [sp, #80]	; 0x50
     aaa:	e7d5      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
					value->uint = (wchar_t)va_arg(ap,
     aac:	cc08      	ldmia	r4!, {r3}
     aae:	9314      	str	r3, [sp, #80]	; 0x50
     ab0:	2300      	movs	r3, #0
     ab2:	9315      	str	r3, [sp, #84]	; 0x54
     ab4:	e7d0      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
					(uint_value_type)va_arg(ap,
     ab6:	2307      	movs	r3, #7
     ab8:	3407      	adds	r4, #7
     aba:	439c      	bics	r4, r3
				value->uint =
     abc:	cc03      	ldmia	r4!, {r0, r1}
     abe:	9014      	str	r0, [sp, #80]	; 0x50
     ac0:	9115      	str	r1, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
     ac2:	e7c9      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
					(uint_value_type)va_arg(ap, size_t);
     ac4:	cc08      	ldmia	r4!, {r3}
     ac6:	9314      	str	r3, [sp, #80]	; 0x50
     ac8:	2300      	movs	r3, #0
     aca:	e7c0      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				value->uint = (unsigned char)value->uint;
     acc:	b2db      	uxtb	r3, r3
     ace:	9314      	str	r3, [sp, #80]	; 0x50
     ad0:	604d      	str	r5, [r1, #4]
     ad2:	e7c1      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
		} else if (specifier_cat == SPECIFIER_FP) {
     ad4:	2b04      	cmp	r3, #4
     ad6:	d108      	bne.n	aea <CONFIG_ISR_STACK_SIZE+0x2ea>
					(sint_value_type)va_arg(ap, long long);
     ad8:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     ada:	3303      	adds	r3, #3
     adc:	439c      	bics	r4, r3
     ade:	6820      	ldr	r0, [r4, #0]
     ae0:	6861      	ldr	r1, [r4, #4]
     ae2:	3408      	adds	r4, #8
     ae4:	9014      	str	r0, [sp, #80]	; 0x50
     ae6:	9115      	str	r1, [sp, #84]	; 0x54
     ae8:	e7b6      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
		} else if (specifier_cat == SPECIFIER_PTR) {
     aea:	2b03      	cmp	r3, #3
     aec:	d1b4      	bne.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
			value->ptr = va_arg(ap, void *);
     aee:	cc08      	ldmia	r4!, {r3}
     af0:	e7da      	b.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
		switch (conv->specifier) {
     af2:	7ac8      	ldrb	r0, [r1, #11]
     af4:	2878      	cmp	r0, #120	; 0x78
     af6:	d8c0      	bhi.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     af8:	2862      	cmp	r0, #98	; 0x62
     afa:	d82b      	bhi.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
     afc:	2825      	cmp	r0, #37	; 0x25
     afe:	d100      	bne.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
     b00:	e5d0      	b.n	6a4 <z_cbvprintf_impl+0x24>
     b02:	2858      	cmp	r0, #88	; 0x58
     b04:	d1b9      	bne.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b06:	9814      	ldr	r0, [sp, #80]	; 0x50
     b08:	9915      	ldr	r1, [sp, #84]	; 0x54
     b0a:	2326      	movs	r3, #38	; 0x26
     b0c:	aa0a      	add	r2, sp, #40	; 0x28
     b0e:	189b      	adds	r3, r3, r2
     b10:	9300      	str	r3, [sp, #0]
     b12:	aa16      	add	r2, sp, #88	; 0x58
     b14:	ab0e      	add	r3, sp, #56	; 0x38
     b16:	f7ff fd61 	bl	5dc <encode_uint>
			if (precision >= 0) {
     b1a:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
     b1c:	0006      	movs	r6, r0
			if (precision >= 0) {
     b1e:	2b00      	cmp	r3, #0
     b20:	db0d      	blt.n	b3e <CONFIG_ISR_STACK_SIZE+0x33e>
				size_t len = bpe - bps;
     b22:	2326      	movs	r3, #38	; 0x26
				conv->flag_zero = false;
     b24:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
     b26:	aa0a      	add	r2, sp, #40	; 0x28
     b28:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
     b2a:	aa14      	add	r2, sp, #80	; 0x50
     b2c:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
     b2e:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
     b30:	4381      	bics	r1, r0
     b32:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
     b34:	9906      	ldr	r1, [sp, #24]
     b36:	4299      	cmp	r1, r3
     b38:	d901      	bls.n	b3e <CONFIG_ISR_STACK_SIZE+0x33e>
					conv->pad0_value = precision - (int)len;
     b3a:	1acb      	subs	r3, r1, r3
     b3c:	9317      	str	r3, [sp, #92]	; 0x5c
		if (bps == NULL) {
     b3e:	2e00      	cmp	r6, #0
     b40:	d09b      	beq.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
		size_t nj_len = (bpe - bps);
     b42:	2226      	movs	r2, #38	; 0x26
     b44:	ab0a      	add	r3, sp, #40	; 0x28
     b46:	18d2      	adds	r2, r2, r3
     b48:	1b93      	subs	r3, r2, r6
		if (sign != 0) {
     b4a:	9206      	str	r2, [sp, #24]
     b4c:	2d00      	cmp	r5, #0
     b4e:	d042      	beq.n	bd6 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1e>
			nj_len += 1U;
     b50:	3301      	adds	r3, #1
     b52:	e040      	b.n	bd6 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1e>
		switch (conv->specifier) {
     b54:	3863      	subs	r0, #99	; 0x63
     b56:	2815      	cmp	r0, #21
     b58:	d88f      	bhi.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     b5a:	f7ff fabb 	bl	d4 <__gnu_thumb1_case_shi>
     b5e:	0033      	.short	0x0033
     b60:	ff8e0069 	.word	0xff8e0069
     b64:	ff8eff8e 	.word	0xff8eff8e
     b68:	0069ff8e 	.word	0x0069ff8e
     b6c:	ff8eff8e 	.word	0xff8eff8e
     b70:	ff8eff8e 	.word	0xff8eff8e
     b74:	007b00a2 	.word	0x007b00a2
     b78:	ff8e007d 	.word	0xff8e007d
     b7c:	0016ff8e 	.word	0x0016ff8e
     b80:	007bff8e 	.word	0x007bff8e
     b84:	ff8eff8e 	.word	0xff8eff8e
     b88:	007b      	.short	0x007b
			if (precision >= 0) {
     b8a:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
     b8c:	9e14      	ldr	r6, [sp, #80]	; 0x50
			if (precision >= 0) {
     b8e:	2b00      	cmp	r3, #0
     b90:	db0c      	blt.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
				len = strnlen(bps, precision);
     b92:	0019      	movs	r1, r3
     b94:	0030      	movs	r0, r6
     b96:	f004 f929 	bl	4dec <strnlen>
		if (bps == NULL) {
     b9a:	2e00      	cmp	r6, #0
     b9c:	d100      	bne.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     b9e:	e76c      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			bpe = bps + len;
     ba0:	1833      	adds	r3, r6, r0
     ba2:	9306      	str	r3, [sp, #24]
		size_t nj_len = (bpe - bps);
     ba4:	9b06      	ldr	r3, [sp, #24]
		char sign = 0;
     ba6:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
     ba8:	1b9b      	subs	r3, r3, r6
		if (sign != 0) {
     baa:	e014      	b.n	bd6 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1e>
				len = strlen(bps);
     bac:	0030      	movs	r0, r6
     bae:	f004 f8bf 	bl	4d30 <strlen>
     bb2:	e7f5      	b.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
     bb4:	ffff87fd 	.word	0xffff87fd
     bb8:	00004002 	.word	0x00004002
     bbc:	00000482 	.word	0x00000482
     bc0:	00000801 	.word	0x00000801
			bpe = buf + 1;
     bc4:	2311      	movs	r3, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     bc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
     bc8:	ae0e      	add	r6, sp, #56	; 0x38
     bca:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
     bcc:	aa0a      	add	r2, sp, #40	; 0x28
     bce:	189b      	adds	r3, r3, r2
     bd0:	9306      	str	r3, [sp, #24]
		char sign = 0;
     bd2:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
     bd4:	2301      	movs	r3, #1
		if (conv->altform_0c) {
     bd6:	aa14      	add	r2, sp, #80	; 0x50
     bd8:	7a92      	ldrb	r2, [r2, #10]
     bda:	2110      	movs	r1, #16
     bdc:	0010      	movs	r0, r2
     bde:	4008      	ands	r0, r1
     be0:	900b      	str	r0, [sp, #44]	; 0x2c
     be2:	420a      	tst	r2, r1
     be4:	d078      	beq.n	cd8 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x120>
			nj_len += 2U;
     be6:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
     be8:	9917      	ldr	r1, [sp, #92]	; 0x5c
     bea:	910a      	str	r1, [sp, #40]	; 0x28
     bec:	18cb      	adds	r3, r1, r3
		if (conv->pad_fp) {
     bee:	0652      	lsls	r2, r2, #25
     bf0:	d501      	bpl.n	bf6 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x3e>
			nj_len += conv->pad0_pre_exp;
     bf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
     bf4:	189b      	adds	r3, r3, r2
		if (width > 0) {
     bf6:	9a03      	ldr	r2, [sp, #12]
     bf8:	2a00      	cmp	r2, #0
     bfa:	dc00      	bgt.n	bfe <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x46>
     bfc:	e087      	b.n	d0e <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x156>
			width -= (int)nj_len;
     bfe:	1ad3      	subs	r3, r2, r3
     c00:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
     c02:	ab14      	add	r3, sp, #80	; 0x50
     c04:	7a1b      	ldrb	r3, [r3, #8]
     c06:	075a      	lsls	r2, r3, #29
     c08:	0fd1      	lsrs	r1, r2, #31
     c0a:	9108      	str	r1, [sp, #32]
     c0c:	2a00      	cmp	r2, #0
     c0e:	da00      	bge.n	c12 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x5a>
     c10:	e07d      	b.n	d0e <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x156>
				if (conv->flag_zero) {
     c12:	065b      	lsls	r3, r3, #25
     c14:	d400      	bmi.n	c18 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x60>
     c16:	e06b      	b.n	cf0 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x138>
					if (sign != 0) {
     c18:	2d00      	cmp	r5, #0
     c1a:	d007      	beq.n	c2c <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x74>
						OUTC(sign);
     c1c:	0028      	movs	r0, r5
     c1e:	9905      	ldr	r1, [sp, #20]
     c20:	9b04      	ldr	r3, [sp, #16]
     c22:	4798      	blx	r3
     c24:	2800      	cmp	r0, #0
     c26:	db61      	blt.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     c28:	9d08      	ldr	r5, [sp, #32]
     c2a:	3701      	adds	r7, #1
					pad = '0';
     c2c:	2330      	movs	r3, #48	; 0x30
     c2e:	e060      	b.n	cf2 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x13a>
				sign = '+';
     c30:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
     c32:	071a      	lsls	r2, r3, #28
     c34:	d402      	bmi.n	c3c <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x84>
			} else if (conv->flag_space) {
     c36:	06db      	lsls	r3, r3, #27
     c38:	0fdb      	lsrs	r3, r3, #31
     c3a:	015d      	lsls	r5, r3, #5
			sint = value->sint;
     c3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
     c3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
			if (sint < 0) {
     c40:	2b00      	cmp	r3, #0
     c42:	db00      	blt.n	c46 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x8e>
     c44:	e75f      	b.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
				value->uint = (uint_value_type)-sint;
     c46:	2100      	movs	r1, #0
     c48:	4250      	negs	r0, r2
     c4a:	4199      	sbcs	r1, r3
				sign = '-';
     c4c:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     c4e:	9014      	str	r0, [sp, #80]	; 0x50
     c50:	9115      	str	r1, [sp, #84]	; 0x54
     c52:	e758      	b.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
		switch (conv->specifier) {
     c54:	2500      	movs	r5, #0
     c56:	e756      	b.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
			if (value->ptr != NULL) {
     c58:	9814      	ldr	r0, [sp, #80]	; 0x50
     c5a:	ad14      	add	r5, sp, #80	; 0x50
     c5c:	2800      	cmp	r0, #0
     c5e:	d035      	beq.n	ccc <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x114>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c60:	2326      	movs	r3, #38	; 0x26
     c62:	aa0a      	add	r2, sp, #40	; 0x28
     c64:	189b      	adds	r3, r3, r2
     c66:	9300      	str	r3, [sp, #0]
     c68:	aa16      	add	r2, sp, #88	; 0x58
     c6a:	ab0e      	add	r3, sp, #56	; 0x38
     c6c:	2100      	movs	r1, #0
     c6e:	f7ff fcb5 	bl	5dc <encode_uint>
				conv->altform_0c = true;
     c72:	23ef      	movs	r3, #239	; 0xef
     c74:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c76:	0006      	movs	r6, r0
				conv->altform_0c = true;
     c78:	401a      	ands	r2, r3
     c7a:	4b48      	ldr	r3, [pc, #288]	; (d9c <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1e4>)
     c7c:	4313      	orrs	r3, r2
     c7e:	816b      	strh	r3, [r5, #10]
		char sign = 0;
     c80:	2500      	movs	r5, #0
			if (precision >= 0) {
     c82:	9b06      	ldr	r3, [sp, #24]
     c84:	42ab      	cmp	r3, r5
     c86:	db00      	blt.n	c8a <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0xd2>
     c88:	e74b      	b.n	b22 <CONFIG_ISR_STACK_SIZE+0x322>
		if (bps == NULL) {
     c8a:	42a8      	cmp	r0, r5
     c8c:	d100      	bne.n	c90 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0xd8>
     c8e:	e6f4      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
		size_t nj_len = (bpe - bps);
     c90:	2326      	movs	r3, #38	; 0x26
     c92:	aa0a      	add	r2, sp, #40	; 0x28
     c94:	189b      	adds	r3, r3, r2
     c96:	2226      	movs	r2, #38	; 0x26
     c98:	a90a      	add	r1, sp, #40	; 0x28
     c9a:	1852      	adds	r2, r2, r1
     c9c:	1a1b      	subs	r3, r3, r0
     c9e:	9206      	str	r2, [sp, #24]
     ca0:	e799      	b.n	bd6 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1e>
				store_count(conv, value->ptr, count);
     ca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
     ca4:	2a07      	cmp	r2, #7
     ca6:	d900      	bls.n	caa <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0xf2>
     ca8:	e6e7      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     caa:	0010      	movs	r0, r2
     cac:	f7ff fa08 	bl	c0 <__gnu_thumb1_case_uqi>
     cb0:	0c06040c 	.word	0x0c06040c
     cb4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     cb8:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
     cba:	e6de      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
		*(short *)dp = (short)count;
     cbc:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
     cbe:	e6dc      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
		*(intmax_t *)dp = (intmax_t)count;
     cc0:	17fa      	asrs	r2, r7, #31
     cc2:	601f      	str	r7, [r3, #0]
     cc4:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
     cc6:	e6d8      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     cc8:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
     cca:	e6d6      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			bpe = bps + 5;
     ccc:	4b34      	ldr	r3, [pc, #208]	; (da0 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1e8>)
		char sign = 0;
     cce:	0005      	movs	r5, r0
			bpe = bps + 5;
     cd0:	9306      	str	r3, [sp, #24]
     cd2:	4e34      	ldr	r6, [pc, #208]	; (da4 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1ec>)
		size_t nj_len = (bpe - bps);
     cd4:	2305      	movs	r3, #5
     cd6:	e77e      	b.n	bd6 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1e>
		} else if (conv->altform_0) {
     cd8:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     cda:	0fc9      	lsrs	r1, r1, #31
     cdc:	185b      	adds	r3, r3, r1
     cde:	e783      	b.n	be8 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x30>
					OUTC(pad);
     ce0:	9905      	ldr	r1, [sp, #20]
     ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
     ce4:	9b04      	ldr	r3, [sp, #16]
     ce6:	4798      	blx	r3
     ce8:	2800      	cmp	r0, #0
     cea:	da05      	bge.n	cf8 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x140>
#undef OUTS
#undef OUTC
}
     cec:	b01b      	add	sp, #108	; 0x6c
     cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
     cf0:	2320      	movs	r3, #32
					pad = '0';
     cf2:	9309      	str	r3, [sp, #36]	; 0x24
     cf4:	9b03      	ldr	r3, [sp, #12]
     cf6:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
     cf8:	9b08      	ldr	r3, [sp, #32]
     cfa:	001a      	movs	r2, r3
     cfc:	3a01      	subs	r2, #1
     cfe:	9208      	str	r2, [sp, #32]
     d00:	2b00      	cmp	r3, #0
     d02:	dced      	bgt.n	ce0 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x128>
     d04:	9a03      	ldr	r2, [sp, #12]
     d06:	19d7      	adds	r7, r2, r7
     d08:	1aff      	subs	r7, r7, r3
     d0a:	9b08      	ldr	r3, [sp, #32]
     d0c:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
     d0e:	2d00      	cmp	r5, #0
     d10:	d006      	beq.n	d20 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x168>
			OUTC(sign);
     d12:	0028      	movs	r0, r5
     d14:	9905      	ldr	r1, [sp, #20]
     d16:	9b04      	ldr	r3, [sp, #16]
     d18:	4798      	blx	r3
     d1a:	2800      	cmp	r0, #0
     d1c:	dbe6      	blt.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     d1e:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
     d20:	ab14      	add	r3, sp, #80	; 0x50
     d22:	7a9b      	ldrb	r3, [r3, #10]
     d24:	06da      	lsls	r2, r3, #27
     d26:	d401      	bmi.n	d2c <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x174>
     d28:	071b      	lsls	r3, r3, #28
     d2a:	d506      	bpl.n	d3a <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x182>
				OUTC('0');
     d2c:	2030      	movs	r0, #48	; 0x30
     d2e:	9905      	ldr	r1, [sp, #20]
     d30:	9b04      	ldr	r3, [sp, #16]
     d32:	4798      	blx	r3
     d34:	2800      	cmp	r0, #0
     d36:	dbd9      	blt.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     d38:	3701      	adds	r7, #1
			if (conv->altform_0c) {
     d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     d3c:	2b00      	cmp	r3, #0
     d3e:	d007      	beq.n	d50 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x198>
				OUTC(conv->specifier);
     d40:	ab14      	add	r3, sp, #80	; 0x50
     d42:	7ad8      	ldrb	r0, [r3, #11]
     d44:	9905      	ldr	r1, [sp, #20]
     d46:	9b04      	ldr	r3, [sp, #16]
     d48:	4798      	blx	r3
     d4a:	2800      	cmp	r0, #0
     d4c:	dbce      	blt.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     d4e:	3701      	adds	r7, #1
				while (width-- > 0) {
     d50:	003d      	movs	r5, r7
     d52:	e006      	b.n	d62 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1aa>
				OUTC('0');
     d54:	2030      	movs	r0, #48	; 0x30
     d56:	9905      	ldr	r1, [sp, #20]
     d58:	9b04      	ldr	r3, [sp, #16]
     d5a:	4798      	blx	r3
     d5c:	2800      	cmp	r0, #0
     d5e:	dbc5      	blt.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     d60:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d64:	19db      	adds	r3, r3, r7
     d66:	1b5b      	subs	r3, r3, r5
     d68:	2b00      	cmp	r3, #0
     d6a:	dcf3      	bgt.n	d54 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x19c>
			OUTS(bps, bpe);
     d6c:	0032      	movs	r2, r6
     d6e:	9b06      	ldr	r3, [sp, #24]
     d70:	9905      	ldr	r1, [sp, #20]
     d72:	9804      	ldr	r0, [sp, #16]
     d74:	f004 f9f3 	bl	515e <outs>
     d78:	2800      	cmp	r0, #0
     d7a:	dbb7      	blt.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     d7c:	1947      	adds	r7, r0, r5
     d7e:	003d      	movs	r5, r7
		while (width > 0) {
     d80:	9b03      	ldr	r3, [sp, #12]
     d82:	195b      	adds	r3, r3, r5
     d84:	1bdb      	subs	r3, r3, r7
     d86:	2b00      	cmp	r3, #0
     d88:	dc00      	bgt.n	d8c <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1d4>
     d8a:	e676      	b.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			OUTC(' ');
     d8c:	2020      	movs	r0, #32
     d8e:	9905      	ldr	r1, [sp, #20]
     d90:	9b04      	ldr	r3, [sp, #16]
     d92:	4798      	blx	r3
     d94:	2800      	cmp	r0, #0
     d96:	dba9      	blt.n	cec <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x134>
     d98:	3701      	adds	r7, #1
			--width;
     d9a:	e7f1      	b.n	d80 <CONFIG_ZTEST_CPU_HOLD_TIME_MS+0x1c8>
     d9c:	00007810 	.word	0x00007810
     da0:	00005b9d 	.word	0x00005b9d
     da4:	00005b98 	.word	0x00005b98

00000da8 <atmel_samc_init>:
static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	__asm__ volatile("mrs %0, PRIMASK;"
     da8:	f3ef 8110 	mrs	r1, PRIMASK
     dac:	b672      	cpsid	i
#include <soc.h>

static void flash_waitstates_init(void)
{
	/* One wait state at 48 MHz. */
	NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     dae:	231e      	movs	r3, #30
     db0:	480e      	ldr	r0, [pc, #56]	; (dec <atmel_samc_init+0x44>)
     db2:	6842      	ldr	r2, [r0, #4]
     db4:	439a      	bics	r2, r3
     db6:	3b1c      	subs	r3, #28
     db8:	4313      	orrs	r3, r2
     dba:	6043      	str	r3, [r0, #4]
}

static void osc48m_init(void)
{
	/* Turn off the prescaler */
	OSCCTRL->OSC48MDIV.bit.DIV = 0;
     dbc:	200f      	movs	r0, #15
     dbe:	4b0c      	ldr	r3, [pc, #48]	; (df0 <atmel_samc_init+0x48>)
     dc0:	7d5a      	ldrb	r2, [r3, #21]
     dc2:	4382      	bics	r2, r0
     dc4:	755a      	strb	r2, [r3, #21]
	while (OSCCTRL->OSC48MSYNCBUSY.bit.OSC48MDIV) {
     dc6:	699a      	ldr	r2, [r3, #24]
     dc8:	0752      	lsls	r2, r2, #29
     dca:	d4fc      	bmi.n	dc6 <atmel_samc_init+0x1e>
	}
	while (!OSCCTRL->STATUS.bit.OSC48MRDY) {
     dcc:	68da      	ldr	r2, [r3, #12]
     dce:	06d2      	lsls	r2, r2, #27
     dd0:	d5fc      	bpl.n	dcc <atmel_samc_init+0x24>
	}
}

static void mclk_init(void)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV_DIV1_Val;
     dd2:	2201      	movs	r2, #1
     dd4:	4b07      	ldr	r3, [pc, #28]	; (df4 <atmel_samc_init+0x4c>)
     dd6:	711a      	strb	r2, [r3, #4]
}

static void gclks_init(void)
{
	GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC48M)
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <atmel_samc_init+0x50>)
     dda:	4a08      	ldr	r2, [pc, #32]	; (dfc <atmel_samc_init+0x54>)
     ddc:	621a      	str	r2, [r3, #32]
 */

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
     dde:	2900      	cmp	r1, #0
     de0:	d102      	bne.n	de8 <atmel_samc_init+0x40>
		return;
	}
	__asm__ volatile(
     de2:	b662      	cpsie	i
     de4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     de8:	2000      	movs	r0, #0
     dea:	4770      	bx	lr
     dec:	41004000 	.word	0x41004000
     df0:	40001000 	.word	0x40001000
     df4:	40000800 	.word	0x40000800
     df8:	40001c00 	.word	0x40001c00
     dfc:	00010106 	.word	0x00010106

00000e00 <semihost_log>:

    return semihost_exec(SEMIHOST_SYSTEM, &args);
}

int semihost_log(const char* fmt, ...)
{
     e00:	b40f      	push	{r0, r1, r2, r3}
     e02:	b530      	push	{r4, r5, lr}
     e04:	b0c3      	sub	sp, #268	; 0x10c
     e06:	ac46      	add	r4, sp, #280	; 0x118
    char buf[256];
    printk("semihost_log 1\n");
     e08:	4817      	ldr	r0, [pc, #92]	; (e68 <semihost_log+0x68>)
{
     e0a:	cc20      	ldmia	r4!, {r5}
    printk("semihost_log 1\n");
     e0c:	f004 f992 	bl	5134 <printk>
    va_list args;
    va_start(args, fmt);
    int len = vsnprintk(buf, sizeof(buf), fmt, args);
     e10:	2180      	movs	r1, #128	; 0x80
     e12:	0023      	movs	r3, r4
     e14:	002a      	movs	r2, r5
     e16:	0049      	lsls	r1, r1, #1
     e18:	a802      	add	r0, sp, #8
    va_start(args, fmt);
     e1a:	9401      	str	r4, [sp, #4]
    int len = vsnprintk(buf, sizeof(buf), fmt, args);
     e1c:	f7ff fbb4 	bl	588 <vsnprintk>
     e20:	0005      	movs	r5, r0
    va_end(args);
    printk("semihost_log 2\n");
     e22:	4812      	ldr	r0, [pc, #72]	; (e6c <semihost_log+0x6c>)
     e24:	f004 f986 	bl	5134 <printk>

    const char* path = "./test_log.bin";
    printk("semihost_log 3\n");
     e28:	4811      	ldr	r0, [pc, #68]	; (e70 <semihost_log+0x70>)
     e2a:	f004 f983 	bl	5134 <printk>
    long fd = semihost_open(path, SEMIHOST_OPEN_A);
     e2e:	2108      	movs	r1, #8
     e30:	4810      	ldr	r0, [pc, #64]	; (e74 <semihost_log+0x74>)
     e32:	f004 f939 	bl	50a8 <semihost_open>
     e36:	0004      	movs	r4, r0
    printk("semihost_log 4\n");
     e38:	480f      	ldr	r0, [pc, #60]	; (e78 <semihost_log+0x78>)
     e3a:	f004 f97b 	bl	5134 <printk>
    long len_long = semihost_write(fd, buf, len);
     e3e:	002a      	movs	r2, r5
     e40:	a902      	add	r1, sp, #8
     e42:	0020      	movs	r0, r4
     e44:	f004 f947 	bl	50d6 <semihost_write>
     e48:	0005      	movs	r5, r0
    printk("semihost_log 5\n");
     e4a:	480c      	ldr	r0, [pc, #48]	; (e7c <semihost_log+0x7c>)
     e4c:	f004 f972 	bl	5134 <printk>
    semihost_close(fd);
     e50:	0020      	movs	r0, r4
     e52:	f004 f939 	bl	50c8 <semihost_close>
    printk("semihost_log 6\n");
     e56:	480a      	ldr	r0, [pc, #40]	; (e80 <semihost_log+0x80>)
     e58:	f004 f96c 	bl	5134 <printk>
    int write_len = (int) len_long;
    return write_len;
     e5c:	0028      	movs	r0, r5
     e5e:	b043      	add	sp, #268	; 0x10c
     e60:	bc30      	pop	{r4, r5}
     e62:	bc08      	pop	{r3}
     e64:	b004      	add	sp, #16
     e66:	4718      	bx	r3
     e68:	00005b9e 	.word	0x00005b9e
     e6c:	00005bae 	.word	0x00005bae
     e70:	00005bbe 	.word	0x00005bbe
     e74:	00005bce 	.word	0x00005bce
     e78:	00005bdd 	.word	0x00005bdd
     e7c:	00005bed 	.word	0x00005bed
     e80:	00005bfd 	.word	0x00005bfd

00000e84 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
     e84:	4901      	ldr	r1, [pc, #4]	; (e8c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
     e86:	2210      	movs	r2, #16
	str	r2, [r1]
     e88:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
     e8a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
     e8c:	e000ed10 	.word	0xe000ed10

00000e90 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
     e90:	f3bf 8f4f 	dsb	sy
     e94:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
     e96:	b662      	cpsie	i
	isb
     e98:	f3bf 8f6f 	isb	sy

	bx	lr
     e9c:	4770      	bx	lr
     e9e:	46c0      	nop			; (mov r8, r8)

00000ea0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
     ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
     ea2:	0005      	movs	r5, r0
     ea4:	1e0c      	subs	r4, r1, #0

	if (esf != NULL) {
     ea6:	d019      	beq.n	edc <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
     ea8:	688b      	ldr	r3, [r1, #8]
     eaa:	480f      	ldr	r0, [pc, #60]	; (ee8 <z_arm_fatal_error+0x48>)
     eac:	9300      	str	r3, [sp, #0]
     eae:	684b      	ldr	r3, [r1, #4]
     eb0:	680a      	ldr	r2, [r1, #0]
     eb2:	2145      	movs	r1, #69	; 0x45
     eb4:	f004 f9c9 	bl	524a <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
     eb8:	6963      	ldr	r3, [r4, #20]
     eba:	2145      	movs	r1, #69	; 0x45
     ebc:	9300      	str	r3, [sp, #0]
     ebe:	480b      	ldr	r0, [pc, #44]	; (eec <z_arm_fatal_error+0x4c>)
     ec0:	6923      	ldr	r3, [r4, #16]
     ec2:	68e2      	ldr	r2, [r4, #12]
     ec4:	f004 f9c1 	bl	524a <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
     ec8:	2145      	movs	r1, #69	; 0x45
     eca:	4809      	ldr	r0, [pc, #36]	; (ef0 <z_arm_fatal_error+0x50>)
     ecc:	69e2      	ldr	r2, [r4, #28]
     ece:	f004 f9bc 	bl	524a <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
     ed2:	2145      	movs	r1, #69	; 0x45
     ed4:	4807      	ldr	r0, [pc, #28]	; (ef4 <z_arm_fatal_error+0x54>)
     ed6:	69a2      	ldr	r2, [r4, #24]
     ed8:	f004 f9b7 	bl	524a <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
     edc:	0028      	movs	r0, r5
     ede:	0021      	movs	r1, r4
     ee0:	f001 fbba 	bl	2658 <z_fatal_error>
}
     ee4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00005c0d 	.word	0x00005c0d
     eec:	00005c41 	.word	0x00005c41
     ef0:	00005c75 	.word	0x00005c75
     ef4:	00005c89 	.word	0x00005c89

00000ef8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     ef8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     efa:	0600      	lsls	r0, r0, #24
     efc:	d405      	bmi.n	f0a <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     efe:	221f      	movs	r2, #31
     f00:	401a      	ands	r2, r3
     f02:	2301      	movs	r3, #1
     f04:	4093      	lsls	r3, r2
     f06:	4a01      	ldr	r2, [pc, #4]	; (f0c <arch_irq_enable+0x14>)
     f08:	6013      	str	r3, [r2, #0]
}
     f0a:	4770      	bx	lr
     f0c:	e000e100 	.word	0xe000e100

00000f10 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
     f10:	b570      	push	{r4, r5, r6, lr}
     f12:	0005      	movs	r5, r0
     f14:	000c      	movs	r4, r1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
     f16:	2903      	cmp	r1, #3
     f18:	d910      	bls.n	f3c <z_arm_irq_priority_set+0x2c>
     f1a:	4e19      	ldr	r6, [pc, #100]	; (f80 <z_arm_irq_priority_set+0x70>)
     f1c:	235c      	movs	r3, #92	; 0x5c
     f1e:	0032      	movs	r2, r6
     f20:	4918      	ldr	r1, [pc, #96]	; (f84 <z_arm_irq_priority_set+0x74>)
     f22:	4819      	ldr	r0, [pc, #100]	; (f88 <z_arm_irq_priority_set+0x78>)
     f24:	f004 f935 	bl	5192 <assert_print>
     f28:	0021      	movs	r1, r4
     f2a:	4818      	ldr	r0, [pc, #96]	; (f8c <z_arm_irq_priority_set+0x7c>)
     f2c:	2304      	movs	r3, #4
     f2e:	002a      	movs	r2, r5
     f30:	f004 f92f 	bl	5192 <assert_print>
     f34:	215c      	movs	r1, #92	; 0x5c
     f36:	0030      	movs	r0, r6
     f38:	f004 f927 	bl	518a <assert_post_action>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     f3c:	2203      	movs	r2, #3
     f3e:	21ff      	movs	r1, #255	; 0xff
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     f40:	b240      	sxtb	r0, r0
     f42:	4002      	ands	r2, r0
     f44:	00d2      	lsls	r2, r2, #3
     f46:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     f48:	01a3      	lsls	r3, r4, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     f4a:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     f4c:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
     f4e:	2800      	cmp	r0, #0
     f50:	db0a      	blt.n	f68 <z_arm_irq_priority_set+0x58>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     f52:	24c0      	movs	r4, #192	; 0xc0
     f54:	4a0e      	ldr	r2, [pc, #56]	; (f90 <z_arm_irq_priority_set+0x80>)
     f56:	0880      	lsrs	r0, r0, #2
     f58:	0080      	lsls	r0, r0, #2
     f5a:	1880      	adds	r0, r0, r2
     f5c:	00a4      	lsls	r4, r4, #2
     f5e:	5902      	ldr	r2, [r0, r4]
     f60:	400a      	ands	r2, r1
     f62:	4313      	orrs	r3, r2
     f64:	5103      	str	r3, [r0, r4]
}
     f66:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     f68:	220f      	movs	r2, #15
     f6a:	4010      	ands	r0, r2
     f6c:	3808      	subs	r0, #8
     f6e:	4a09      	ldr	r2, [pc, #36]	; (f94 <z_arm_irq_priority_set+0x84>)
     f70:	0880      	lsrs	r0, r0, #2
     f72:	0080      	lsls	r0, r0, #2
     f74:	1880      	adds	r0, r0, r2
     f76:	69c2      	ldr	r2, [r0, #28]
     f78:	4011      	ands	r1, r2
     f7a:	4319      	orrs	r1, r3
     f7c:	61c1      	str	r1, [r0, #28]
     f7e:	e7f2      	b.n	f66 <z_arm_irq_priority_set+0x56>
     f80:	00005cbc 	.word	0x00005cbc
     f84:	00005cf2 	.word	0x00005cf2
     f88:	00005d0d 	.word	0x00005d0d
     f8c:	00005d2a 	.word	0x00005d2a
     f90:	e000e100 	.word	0xe000e100
     f94:	e000ed00 	.word	0xe000ed00

00000f98 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     f98:	bf30      	wfi
    b z_SysNmiOnReset
     f9a:	e7fd      	b.n	f98 <z_SysNmiOnReset>

00000f9c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f9c:	22ff      	movs	r2, #255	; 0xff
     f9e:	4b08      	ldr	r3, [pc, #32]	; (fc0 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
     fa0:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     fa2:	4393      	bics	r3, r2
     fa4:	4a07      	ldr	r2, [pc, #28]	; (fc4 <z_arm_prep_c+0x28>)
     fa6:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     fa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fac:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
     fb0:	f001 fbee 	bl	2790 <z_bss_zero>
	z_data_copy();
     fb4:	f003 f8c8 	bl	4148 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
     fb8:	f000 f93c 	bl	1234 <z_arm_interrupt_init>
	z_cstart();
     fbc:	f001 fc2c 	bl	2818 <z_cstart>
     fc0:	00000000 	.word	0x00000000
     fc4:	e000ed00 	.word	0xe000ed00

00000fc8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
     fc8:	4a0a      	ldr	r2, [pc, #40]	; (ff4 <arch_swap+0x2c>)
     fca:	6893      	ldr	r3, [r2, #8]
     fcc:	0019      	movs	r1, r3
     fce:	3188      	adds	r1, #136	; 0x88
     fd0:	6008      	str	r0, [r1, #0]
	_current->arch.swap_return_value = _k_neg_eagain;
     fd2:	4909      	ldr	r1, [pc, #36]	; (ff8 <arch_swap+0x30>)
     fd4:	338c      	adds	r3, #140	; 0x8c
     fd6:	6809      	ldr	r1, [r1, #0]
     fd8:	6019      	str	r1, [r3, #0]

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     fda:	2380      	movs	r3, #128	; 0x80
     fdc:	4907      	ldr	r1, [pc, #28]	; (ffc <arch_swap+0x34>)
     fde:	055b      	lsls	r3, r3, #21
     fe0:	6848      	ldr	r0, [r1, #4]
     fe2:	4303      	orrs	r3, r0
     fe4:	604b      	str	r3, [r1, #4]
     fe6:	b662      	cpsie	i
     fe8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     fec:	6893      	ldr	r3, [r2, #8]
     fee:	338c      	adds	r3, #140	; 0x8c
     ff0:	6818      	ldr	r0, [r3, #0]
}
     ff2:	4770      	bx	lr
     ff4:	2000097c 	.word	0x2000097c
     ff8:	000059c0 	.word	0x000059c0
     ffc:	e000ed00 	.word	0xe000ed00

00001000 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1000:	4914      	ldr	r1, [pc, #80]	; (1054 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1002:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1004:	4814      	ldr	r0, [pc, #80]	; (1058 <_thread_irq_disabled+0x22>)
    add r0, r2
    1006:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1008:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
    100c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
    100e:	4643      	mov	r3, r8
    mov r4, r9
    1010:	464c      	mov	r4, r9
    mov r5, r10
    1012:	4655      	mov	r5, sl
    mov r6, r11
    1014:	465e      	mov	r6, fp
    mov r7, ip
    1016:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
    1018:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
    101a:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    101c:	4f0f      	ldr	r7, [pc, #60]	; (105c <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    101e:	4e10      	ldr	r6, [pc, #64]	; (1060 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1020:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
    1022:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1024:	603e      	str	r6, [r7, #0]
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) && (_thread_offset_to_basepri > 124)
    /* Doing it this way since the offset to thread->arch.basepri can in
     * some configurations be larger than the maximum of 124 for ldr/str
     * immediate offsets.
     */
    ldr r4, =_thread_offset_to_basepri
    1026:	4c0f      	ldr	r4, [pc, #60]	; (1064 <_thread_irq_disabled+0x2e>)
    adds r4, r2, r4
    1028:	1914      	adds	r4, r2, r4

    ldr r0, [r4]
    102a:	6820      	ldr	r0, [r4, #0]
    movs.n r3, #0
    102c:	2300      	movs	r3, #0
    str r3, [r4]
    102e:	6023      	str	r3, [r4, #0]
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
    1030:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
    1032:	d100      	bne.n	1036 <_thread_irq_disabled>
    cpsie i
    1034:	b662      	cpsie	i

00001036 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
    1036:	4c08      	ldr	r4, [pc, #32]	; (1058 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
    1038:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
    103a:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
    103c:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
    103e:	4698      	mov	r8, r3
    mov r9, r4
    1040:	46a1      	mov	r9, r4
    mov r10, r5
    1042:	46aa      	mov	sl, r5
    mov r11, r6
    1044:	46b3      	mov	fp, r6
    mov ip, r7
    1046:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    1048:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
    104a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    104c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1050:	4770      	bx	lr
    1052:	0000      	.short	0x0000
    ldr r1, =_kernel
    1054:	2000097c 	.word	0x2000097c
    ldr r0, =_thread_offset_to_callee_saved
    1058:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
    105c:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
    1060:	08000000 	.word	0x08000000
    ldr r4, =_thread_offset_to_basepri
    1064:	00000088 	.word	0x00000088

00001068 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
    1068:	2004      	movs	r0, #4
  mov r1, lr
    106a:	4671      	mov	r1, lr
  tst r1, r0
    106c:	4201      	tst	r1, r0
  beq _stack_frame_msp
    106e:	d002      	beq.n	1076 <_stack_frame_msp>
  mrs r0, PSP
    1070:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
    1074:	d101      	bne.n	107a <_stack_frame_endif>

00001076 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
    1076:	f3ef 8008 	mrs	r0, MSP

0000107a <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    107a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    107c:	3902      	subs	r1, #2
    ldrb r1, [r1]
    107e:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1080:	2902      	cmp	r1, #2
    beq _oops
    1082:	d0ff      	beq.n	1084 <_oops>

00001084 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1084:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1086:	f004 f8eb 	bl	5260 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    108a:	bd01      	pop	{r0, pc}

0000108c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    108c:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    108e:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
    1090:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
    1092:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1094:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
    1096:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
    1098:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
    109a:	4907      	ldr	r1, [pc, #28]	; (10b8 <arch_new_thread+0x2c>)
	iframe->a3 = (uint32_t)p2;
    109c:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
    109e:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
    10a0:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
    10a2:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    10a4:	2380      	movs	r3, #128	; 0x80
    10a6:	045b      	lsls	r3, r3, #17
    10a8:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    10aa:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
    10ac:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
    10ae:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    10b0:	3088      	adds	r0, #136	; 0x88
    10b2:	6003      	str	r3, [r0, #0]
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    10b4:	bd10      	pop	{r4, pc}
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	0000514b 	.word	0x0000514b

000010bc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <arch_switch_to_main_thread+0x1c>)
    10be:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    10c0:	1c10      	adds	r0, r2, #0
    10c2:	f381 8809 	msr	PSP, r1
    10c6:	2100      	movs	r1, #0
    10c8:	b662      	cpsie	i
    10ca:	f3bf 8f6f 	isb	sy
    10ce:	2200      	movs	r2, #0
    10d0:	2300      	movs	r3, #0
    10d2:	f004 f83a 	bl	514a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	2000097c 	.word	0x2000097c

000010dc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    10dc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    10de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
    10e2:	4905      	ldr	r1, [pc, #20]	; (10f8 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
    10e4:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
    10e6:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    10e8:	4904      	ldr	r1, [pc, #16]	; (10fc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    10ea:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    10ec:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    10ee:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
    10f0:	bc09      	pop	{r0, r3}
	mov lr, r3
    10f2:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    10f4:	4902      	ldr	r1, [pc, #8]	; (1100 <_isr_wrapper+0x24>)
	bx r1
    10f6:	4708      	bx	r1
	ldr r1, =16
    10f8:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
    10fc:	000056c4 	.word	0x000056c4
	ldr r1, =z_arm_int_exit
    1100:	00001105 	.word	0x00001105

00001104 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1104:	4b04      	ldr	r3, [pc, #16]	; (1118 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1106:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1108:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
    110a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    110c:	d002      	beq.n	1114 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    110e:	4903      	ldr	r1, [pc, #12]	; (111c <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
    1110:	4a03      	ldr	r2, [pc, #12]	; (1120 <_EXIT_EXC+0xc>)
	str r2, [r1]
    1112:	600a      	str	r2, [r1, #0]

00001114 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1114:	4770      	bx	lr
    1116:	0000      	.short	0x0000
	ldr r3, =_kernel
    1118:	2000097c 	.word	0x2000097c
	ldr r1, =_SCS_ICSR
    111c:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
    1120:	10000000 	.word	0x10000000

00001124 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1124:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1126:	4b30      	ldr	r3, [pc, #192]	; (11e8 <z_arm_fault+0xc4>)
{
    1128:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    112a:	685d      	ldr	r5, [r3, #4]
{
    112c:	b088      	sub	sp, #32
    112e:	05eb      	lsls	r3, r5, #23
    1130:	0ddb      	lsrs	r3, r3, #23
    1132:	b662      	cpsie	i
    1134:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1138:	0e10      	lsrs	r0, r2, #24
    113a:	28ff      	cmp	r0, #255	; 0xff
    113c:	d107      	bne.n	114e <z_arm_fault+0x2a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    113e:	38f3      	subs	r0, #243	; 0xf3
    1140:	4010      	ands	r0, r2
    1142:	2808      	cmp	r0, #8
    1144:	d111      	bne.n	116a <z_arm_fault+0x46>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1146:	2145      	movs	r1, #69	; 0x45
    1148:	4828      	ldr	r0, [pc, #160]	; (11ec <z_arm_fault+0xc8>)
    114a:	f004 f87e 	bl	524a <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    114e:	4c28      	ldr	r4, [pc, #160]	; (11f0 <z_arm_fault+0xcc>)
    1150:	4928      	ldr	r1, [pc, #160]	; (11f4 <z_arm_fault+0xd0>)
    1152:	0022      	movs	r2, r4
    1154:	4828      	ldr	r0, [pc, #160]	; (11f8 <z_arm_fault+0xd4>)
    1156:	4b29      	ldr	r3, [pc, #164]	; (11fc <z_arm_fault+0xd8>)
    1158:	f004 f81b 	bl	5192 <assert_print>
    115c:	4828      	ldr	r0, [pc, #160]	; (1200 <z_arm_fault+0xdc>)
    115e:	f004 f818 	bl	5192 <assert_print>
    1162:	0020      	movs	r0, r4
    1164:	4925      	ldr	r1, [pc, #148]	; (11fc <z_arm_fault+0xd8>)
    1166:	f004 f810 	bl	518a <assert_post_action>
			*nested_exc = true;
    116a:	2601      	movs	r6, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    116c:	0712      	lsls	r2, r2, #28
    116e:	d501      	bpl.n	1174 <z_arm_fault+0x50>
			ptr_esf =  (z_arch_esf_t *)psp;
    1170:	000c      	movs	r4, r1
	*nested_exc = false;
    1172:	2600      	movs	r6, #0
	__ASSERT(esf != NULL,
    1174:	2c00      	cmp	r4, #0
    1176:	d0ea      	beq.n	114e <z_arm_fault+0x2a>
	switch (fault) {
    1178:	2b03      	cmp	r3, #3
    117a:	d125      	bne.n	11c8 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** HARD FAULT *****");
    117c:	2145      	movs	r1, #69	; 0x45
    117e:	4821      	ldr	r0, [pc, #132]	; (1204 <z_arm_fault+0xe0>)
    1180:	f004 f863 	bl	524a <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1184:	69a3      	ldr	r3, [r4, #24]
    1186:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1188:	881a      	ldrh	r2, [r3, #0]
    118a:	4b1f      	ldr	r3, [pc, #124]	; (1208 <z_arm_fault+0xe4>)
    118c:	429a      	cmp	r2, r3
    118e:	d126      	bne.n	11de <z_arm_fault+0xba>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    1190:	2145      	movs	r1, #69	; 0x45
    1192:	481e      	ldr	r0, [pc, #120]	; (120c <z_arm_fault+0xe8>)
    1194:	6822      	ldr	r2, [r4, #0]
    1196:	f004 f858 	bl	524a <z_log_minimal_printk>
		reason = esf->basic.r0;
    119a:	6825      	ldr	r5, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    119c:	2220      	movs	r2, #32
    119e:	0021      	movs	r1, r4
    11a0:	4668      	mov	r0, sp
    11a2:	f003 fd07 	bl	4bb4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    11a6:	9b07      	ldr	r3, [sp, #28]
    11a8:	2e00      	cmp	r6, #0
    11aa:	d01a      	beq.n	11e2 <z_arm_fault+0xbe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    11ac:	05da      	lsls	r2, r3, #23
    11ae:	d102      	bne.n	11b6 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    11b0:	4a17      	ldr	r2, [pc, #92]	; (1210 <z_arm_fault+0xec>)
    11b2:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    11b4:	9307      	str	r3, [sp, #28]
	}

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
    11b6:	2d0f      	cmp	r5, #15
    11b8:	d900      	bls.n	11bc <z_arm_fault+0x98>
		reason = K_ERR_CPU_EXCEPTION;
    11ba:	2500      	movs	r5, #0
	}

	z_arm_fatal_error(reason, &esf_copy);
    11bc:	4669      	mov	r1, sp
    11be:	0028      	movs	r0, r5
    11c0:	f7ff fe6e 	bl	ea0 <z_arm_fatal_error>
}
    11c4:	b008      	add	sp, #32
    11c6:	bd70      	pop	{r4, r5, r6, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    11c8:	21f8      	movs	r1, #248	; 0xf8
    11ca:	0049      	lsls	r1, r1, #1
    11cc:	4a11      	ldr	r2, [pc, #68]	; (1214 <z_arm_fault+0xf0>)
    11ce:	420d      	tst	r5, r1
    11d0:	d000      	beq.n	11d4 <z_arm_fault+0xb0>
    11d2:	4a11      	ldr	r2, [pc, #68]	; (1218 <z_arm_fault+0xf4>)
    11d4:	2145      	movs	r1, #69	; 0x45
    11d6:	4811      	ldr	r0, [pc, #68]	; (121c <z_arm_fault+0xf8>)
    11d8:	3b10      	subs	r3, #16
    11da:	f004 f836 	bl	524a <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    11de:	2500      	movs	r5, #0
    11e0:	e7dc      	b.n	119c <z_arm_fault+0x78>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    11e2:	0a5b      	lsrs	r3, r3, #9
    11e4:	025b      	lsls	r3, r3, #9
    11e6:	e7e5      	b.n	11b4 <z_arm_fault+0x90>
    11e8:	e000ed00 	.word	0xe000ed00
    11ec:	00005d98 	.word	0x00005d98
    11f0:	00005dc8 	.word	0x00005dc8
    11f4:	00005e02 	.word	0x00005e02
    11f8:	00005d0d 	.word	0x00005d0d
    11fc:	0000043f 	.word	0x0000043f
    1200:	00005e15 	.word	0x00005e15
    1204:	00005e53 	.word	0x00005e53
    1208:	0000df02 	.word	0x0000df02
    120c:	00005e6f 	.word	0x00005e6f
    1210:	000001ff 	.word	0x000001ff
    1214:	00005d6a 	.word	0x00005d6a
    1218:	00005d7f 	.word	0x00005d7f
    121c:	00005e90 	.word	0x00005e90

00001220 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1220:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1224:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1228:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    122a:	4672      	mov	r2, lr
	bl z_arm_fault
    122c:	f7ff ff7a 	bl	1124 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1230:	bd01      	pop	{r0, pc}
    1232:	46c0      	nop			; (mov r8, r8)

00001234 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
    1234:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1236:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
    1238:	2200      	movs	r2, #0
    123a:	2603      	movs	r6, #3
    123c:	25ff      	movs	r5, #255	; 0xff
    123e:	00a4      	lsls	r4, r4, #2
    1240:	0010      	movs	r0, r2
    1242:	002f      	movs	r7, r5
    1244:	4030      	ands	r0, r6
    1246:	00c0      	lsls	r0, r0, #3
    1248:	4087      	lsls	r7, r0
    124a:	4905      	ldr	r1, [pc, #20]	; (1260 <z_arm_interrupt_init+0x2c>)
    124c:	0893      	lsrs	r3, r2, #2
    124e:	009b      	lsls	r3, r3, #2
    1250:	185b      	adds	r3, r3, r1
    1252:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1254:	3201      	adds	r2, #1
    1256:	43b9      	bics	r1, r7
    1258:	5119      	str	r1, [r3, r4]
    125a:	2a20      	cmp	r2, #32
    125c:	d1f0      	bne.n	1240 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1260:	e000e100 	.word	0xe000e100

00001264 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
    1264:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1266:	4807      	ldr	r0, [pc, #28]	; (1284 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1268:	4907      	ldr	r1, [pc, #28]	; (1288 <__start+0x24>)
    adds r0, r0, r1
    126a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    126c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1270:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1274:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1276:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1278:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    127c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1280:	f7ff fe8c 	bl	f9c <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    1284:	20000df8 	.word	0x20000df8
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1288:	00000800 	.word	0x00000800

0000128c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    128c:	b510      	push	{r4, lr}
	if (_current == thread) {
    128e:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <z_impl_k_thread_abort+0x2c>)
    1290:	689b      	ldr	r3, [r3, #8]
    1292:	4283      	cmp	r3, r0
    1294:	d10d      	bne.n	12b2 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1296:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    129a:	2b00      	cmp	r3, #0
    129c:	d009      	beq.n	12b2 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    129e:	2280      	movs	r2, #128	; 0x80
    12a0:	4b06      	ldr	r3, [pc, #24]	; (12bc <z_impl_k_thread_abort+0x30>)
    12a2:	0552      	lsls	r2, r2, #21
    12a4:	6859      	ldr	r1, [r3, #4]
    12a6:	430a      	orrs	r2, r1
    12a8:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    12aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    12ac:	4904      	ldr	r1, [pc, #16]	; (12c0 <z_impl_k_thread_abort+0x34>)
    12ae:	400a      	ands	r2, r1
    12b0:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    12b2:	f002 fdd1 	bl	3e58 <z_thread_abort>
}
    12b6:	bd10      	pop	{r4, pc}
    12b8:	2000097c 	.word	0x2000097c
    12bc:	e000ed00 	.word	0xe000ed00
    12c0:	ffff7fff 	.word	0xffff7fff

000012c4 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    12c4:	4a0b      	ldr	r2, [pc, #44]	; (12f4 <malloc_prepare+0x30>)
    12c6:	4b0c      	ldr	r3, [pc, #48]	; (12f8 <malloc_prepare+0x34>)
{
    12c8:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    12ca:	1a9b      	subs	r3, r3, r2
    12cc:	2280      	movs	r2, #128	; 0x80
    12ce:	0192      	lsls	r2, r2, #6
    12d0:	4293      	cmp	r3, r2
    12d2:	d20d      	bcs.n	12f0 <malloc_prepare+0x2c>
    12d4:	4c09      	ldr	r4, [pc, #36]	; (12fc <malloc_prepare+0x38>)
    12d6:	490a      	ldr	r1, [pc, #40]	; (1300 <malloc_prepare+0x3c>)
    12d8:	2380      	movs	r3, #128	; 0x80
    12da:	0022      	movs	r2, r4
    12dc:	4809      	ldr	r0, [pc, #36]	; (1304 <malloc_prepare+0x40>)
    12de:	f003 ff58 	bl	5192 <assert_print>
    12e2:	4809      	ldr	r0, [pc, #36]	; (1308 <malloc_prepare+0x44>)
    12e4:	f003 ff55 	bl	5192 <assert_print>
    12e8:	2180      	movs	r1, #128	; 0x80
    12ea:	0020      	movs	r0, r4
    12ec:	f003 ff4d 	bl	518a <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    12f0:	2000      	movs	r0, #0
    12f2:	bd10      	pop	{r4, pc}
    12f4:	20001af8 	.word	0x20001af8
    12f8:	20008000 	.word	0x20008000
    12fc:	00005ea8 	.word	0x00005ea8
    1300:	00005ed8 	.word	0x00005ed8
    1304:	00005d0d 	.word	0x00005d0d
    1308:	00005f1e 	.word	0x00005f1e

0000130c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    130c:	4b01      	ldr	r3, [pc, #4]	; (1314 <__stdout_hook_install+0x8>)
    130e:	6018      	str	r0, [r3, #0]
}
    1310:	4770      	bx	lr
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	2000069c 	.word	0x2000069c

00001318 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    1318:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    131a:	4c07      	ldr	r4, [pc, #28]	; (1338 <_sbrk+0x20>)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    131c:	4907      	ldr	r1, [pc, #28]	; (133c <_sbrk+0x24>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
    131e:	6823      	ldr	r3, [r4, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1320:	18c2      	adds	r2, r0, r3
    1322:	4807      	ldr	r0, [pc, #28]	; (1340 <_sbrk+0x28>)
    1324:	1a09      	subs	r1, r1, r0
    1326:	428a      	cmp	r2, r1
    1328:	d202      	bcs.n	1330 <_sbrk+0x18>
	ptr = ((char *)HEAP_BASE) + heap_sz;
    132a:	1818      	adds	r0, r3, r0
		heap_sz += count;
    132c:	6022      	str	r2, [r4, #0]
	} else {
		ret = (void *)-1;
	}

	return ret;
}
    132e:	bd10      	pop	{r4, pc}
		ret = (void *)-1;
    1330:	2001      	movs	r0, #1
    1332:	4240      	negs	r0, r0
	return ret;
    1334:	e7fb      	b.n	132e <_sbrk+0x16>
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	200008c8 	.word	0x200008c8
    133c:	20008000 	.word	0x20008000
    1340:	20001af8 	.word	0x20001af8

00001344 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    1344:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    1346:	2800      	cmp	r0, #0
    1348:	d10c      	bne.n	1364 <__retarget_lock_acquire_recursive+0x20>
    134a:	23d3      	movs	r3, #211	; 0xd3
    134c:	4c08      	ldr	r4, [pc, #32]	; (1370 <__retarget_lock_acquire_recursive+0x2c>)
    134e:	4909      	ldr	r1, [pc, #36]	; (1374 <__retarget_lock_acquire_recursive+0x30>)
    1350:	4809      	ldr	r0, [pc, #36]	; (1378 <__retarget_lock_acquire_recursive+0x34>)
    1352:	0022      	movs	r2, r4
    1354:	005b      	lsls	r3, r3, #1
    1356:	f003 ff1c 	bl	5192 <assert_print>
    135a:	21d3      	movs	r1, #211	; 0xd3
    135c:	0020      	movs	r0, r4
    135e:	0049      	lsls	r1, r1, #1
    1360:	f003 ff13 	bl	518a <assert_post_action>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1364:	2201      	movs	r2, #1
    1366:	4252      	negs	r2, r2
    1368:	17d3      	asrs	r3, r2, #31
    136a:	f001 fc21 	bl	2bb0 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    136e:	bd10      	pop	{r4, pc}
    1370:	00005ea8 	.word	0x00005ea8
    1374:	00005fa6 	.word	0x00005fa6
    1378:	00005d0d 	.word	0x00005d0d

0000137c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    137c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    137e:	2800      	cmp	r0, #0
    1380:	d10c      	bne.n	139c <__retarget_lock_release_recursive+0x20>
    1382:	23e1      	movs	r3, #225	; 0xe1
    1384:	4c07      	ldr	r4, [pc, #28]	; (13a4 <__retarget_lock_release_recursive+0x28>)
    1386:	4908      	ldr	r1, [pc, #32]	; (13a8 <__retarget_lock_release_recursive+0x2c>)
    1388:	4808      	ldr	r0, [pc, #32]	; (13ac <__retarget_lock_release_recursive+0x30>)
    138a:	0022      	movs	r2, r4
    138c:	005b      	lsls	r3, r3, #1
    138e:	f003 ff00 	bl	5192 <assert_print>
    1392:	21e1      	movs	r1, #225	; 0xe1
    1394:	0020      	movs	r0, r4
    1396:	0049      	lsls	r1, r1, #1
    1398:	f003 fef7 	bl	518a <assert_post_action>
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    139c:	f001 fce0 	bl	2d60 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    13a0:	bd10      	pop	{r4, pc}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	00005ea8 	.word	0x00005ea8
    13a8:	00005fa6 	.word	0x00005fa6
    13ac:	00005d0d 	.word	0x00005d0d

000013b0 <ztest_find_test_suite>:
}

#endif /* !KERNEL */

static struct ztest_suite_node *ztest_find_test_suite(const char *name)
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    13b2:	0005      	movs	r5, r0
	struct ztest_suite_node *node;

	for (node = _ztest_suite_node_list_start; node < _ztest_suite_node_list_end; ++node) {
    13b4:	4c07      	ldr	r4, [pc, #28]	; (13d4 <ztest_find_test_suite+0x24>)
    13b6:	4e08      	ldr	r6, [pc, #32]	; (13d8 <ztest_find_test_suite+0x28>)
    13b8:	42b4      	cmp	r4, r6
    13ba:	d302      	bcc.n	13c2 <ztest_find_test_suite+0x12>
		if (strcmp(name, node->name) == 0) {
			return node;
		}
	}

	return NULL;
    13bc:	2400      	movs	r4, #0
}
    13be:	0020      	movs	r0, r4
    13c0:	bd70      	pop	{r4, r5, r6, pc}
		if (strcmp(name, node->name) == 0) {
    13c2:	0028      	movs	r0, r5
    13c4:	6821      	ldr	r1, [r4, #0]
    13c6:	f7fe ff8d 	bl	2e4 <strcmp>
    13ca:	2800      	cmp	r0, #0
    13cc:	d0f7      	beq.n	13be <ztest_find_test_suite+0xe>
	for (node = _ztest_suite_node_list_start; node < _ztest_suite_node_list_end; ++node) {
    13ce:	341c      	adds	r4, #28
    13d0:	e7f2      	b.n	13b8 <ztest_find_test_suite+0x8>
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	000057f0 	.word	0x000057f0
    13d8:	0000580c 	.word	0x0000580c

000013dc <test_cb>:
{
    13dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	test_result = ZTEST_RESULT_PENDING;
    13de:	4b11      	ldr	r3, [pc, #68]	; (1424 <test_cb+0x48>)
{
    13e0:	0007      	movs	r7, r0
	test_result = ZTEST_RESULT_PENDING;
    13e2:	9301      	str	r3, [sp, #4]
    13e4:	2300      	movs	r3, #0
{
    13e6:	000d      	movs	r5, r1
    13e8:	0014      	movs	r4, r2
	test_result = ZTEST_RESULT_PENDING;
    13ea:	9a01      	ldr	r2, [sp, #4]
	for (struct ztest_test_rule *rule = _ztest_test_rule_list_start;
    13ec:	4e0e      	ldr	r6, [pc, #56]	; (1428 <test_cb+0x4c>)
	test_result = ZTEST_RESULT_PENDING;
    13ee:	7013      	strb	r3, [r2, #0]
	     rule < _ztest_test_rule_list_end; ++rule) {
    13f0:	4b0e      	ldr	r3, [pc, #56]	; (142c <test_cb+0x50>)
    13f2:	429e      	cmp	r6, r3
    13f4:	d30e      	bcc.n	1414 <test_cb+0x38>
	if (suite->before) {
    13f6:	68bb      	ldr	r3, [r7, #8]
    13f8:	2b00      	cmp	r3, #0
    13fa:	d001      	beq.n	1400 <test_cb+0x24>
		suite->before(/*data=*/c);
    13fc:	0020      	movs	r0, r4
    13fe:	4798      	blx	r3
	phase = TEST_PHASE_TEST;
    1400:	2102      	movs	r1, #2
    1402:	4b0b      	ldr	r3, [pc, #44]	; (1430 <test_cb+0x54>)
    1404:	68aa      	ldr	r2, [r5, #8]
	test->test(data);
    1406:	0020      	movs	r0, r4
	phase = TEST_PHASE_TEST;
    1408:	7019      	strb	r1, [r3, #0]
	test->test(data);
    140a:	4790      	blx	r2
	test_result = ZTEST_RESULT_PASS;
    140c:	2301      	movs	r3, #1
    140e:	9a01      	ldr	r2, [sp, #4]
    1410:	7013      	strb	r3, [r2, #0]
}
    1412:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (is_before && rule->before_each) {
    1414:	6833      	ldr	r3, [r6, #0]
    1416:	2b00      	cmp	r3, #0
    1418:	d002      	beq.n	1420 <test_cb+0x44>
			rule->before_each(test, data);
    141a:	0021      	movs	r1, r4
    141c:	0028      	movs	r0, r5
    141e:	4798      	blx	r3
	     rule < _ztest_test_rule_list_end; ++rule) {
    1420:	3608      	adds	r6, #8
    1422:	e7e5      	b.n	13f0 <test_cb+0x14>
    1424:	200009f1 	.word	0x200009f1
    1428:	00005820 	.word	0x00005820
    142c:	00005820 	.word	0x00005820
    1430:	200006b4 	.word	0x200006b4

00001434 <test_finalize>:
{
    1434:	b510      	push	{r4, lr}
	z_impl_k_thread_abort(thread);
    1436:	4804      	ldr	r0, [pc, #16]	; (1448 <test_finalize+0x14>)
    1438:	f7ff ff28 	bl	128c <z_impl_k_thread_abort>
	return z_impl_z_current_get();
    143c:	f002 fd06 	bl	3e4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    1440:	f7ff ff24 	bl	128c <z_impl_k_thread_abort>
}
    1444:	bd10      	pop	{r4, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	200006d8 	.word	0x200006d8

0000144c <ztest_test_fail>:
{
    144c:	b510      	push	{r4, lr}
	switch (phase) {
    144e:	4b0e      	ldr	r3, [pc, #56]	; (1488 <ztest_test_fail+0x3c>)
    1450:	781b      	ldrb	r3, [r3, #0]
    1452:	2b00      	cmp	r3, #0
    1454:	d00e      	beq.n	1474 <ztest_test_fail+0x28>
    1456:	1e5a      	subs	r2, r3, #1
    1458:	2a01      	cmp	r2, #1
    145a:	d90f      	bls.n	147c <ztest_test_fail+0x30>
    145c:	490b      	ldr	r1, [pc, #44]	; (148c <ztest_test_fail+0x40>)
    145e:	2b05      	cmp	r3, #5
    1460:	d802      	bhi.n	1468 <ztest_test_fail+0x1c>
    1462:	4a0b      	ldr	r2, [pc, #44]	; (1490 <ztest_test_fail+0x44>)
    1464:	009b      	lsls	r3, r3, #2
    1466:	5899      	ldr	r1, [r3, r2]
		PRINT(" ERROR: cannot fail in test phase '%s()', bailing\n",
    1468:	480a      	ldr	r0, [pc, #40]	; (1494 <ztest_test_fail+0x48>)
    146a:	f003 fe63 	bl	5134 <printk>
		test_status = ZTEST_STATUS_CRITICAL_ERROR;
    146e:	2202      	movs	r2, #2
    1470:	4b09      	ldr	r3, [pc, #36]	; (1498 <ztest_test_fail+0x4c>)
    1472:	e001      	b.n	1478 <ztest_test_fail+0x2c>
		test_result = ZTEST_RESULT_SUITE_FAIL;
    1474:	2205      	movs	r2, #5
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <ztest_test_fail+0x50>)
		test_status = ZTEST_STATUS_CRITICAL_ERROR;
    1478:	701a      	strb	r2, [r3, #0]
}
    147a:	e004      	b.n	1486 <ztest_test_fail+0x3a>
		test_result = ZTEST_RESULT_FAIL;
    147c:	2202      	movs	r2, #2
    147e:	4b07      	ldr	r3, [pc, #28]	; (149c <ztest_test_fail+0x50>)
    1480:	701a      	strb	r2, [r3, #0]
		test_finalize();
    1482:	f7ff ffd7 	bl	1434 <test_finalize>
}
    1486:	bd10      	pop	{r4, pc}
    1488:	200006b4 	.word	0x200006b4
    148c:	00005fe1 	.word	0x00005fe1
    1490:	0000583c 	.word	0x0000583c
    1494:	00005feb 	.word	0x00005feb
    1498:	200009f2 	.word	0x200009f2
    149c:	200009f1 	.word	0x200009f1

000014a0 <z_ztest_get_next_test>:

struct ztest_unit_test *z_ztest_get_next_test(const char *suite, struct ztest_unit_test *prev)
{
    14a0:	b570      	push	{r4, r5, r6, lr}
    14a2:	0005      	movs	r5, r0
	struct ztest_unit_test *test = (prev == NULL) ? _ztest_unit_test_list_start : prev + 1;
    14a4:	4c09      	ldr	r4, [pc, #36]	; (14cc <z_ztest_get_next_test+0x2c>)
    14a6:	2900      	cmp	r1, #0
    14a8:	d001      	beq.n	14ae <z_ztest_get_next_test+0xe>
    14aa:	3114      	adds	r1, #20
    14ac:	000c      	movs	r4, r1

	for (; test < _ztest_unit_test_list_end; ++test) {
    14ae:	4e08      	ldr	r6, [pc, #32]	; (14d0 <z_ztest_get_next_test+0x30>)
    14b0:	42b4      	cmp	r4, r6
    14b2:	d302      	bcc.n	14ba <z_ztest_get_next_test+0x1a>
		if (strcmp(suite, test->test_suite_name) == 0) {
			return test;
		}
	}
	return NULL;
    14b4:	2400      	movs	r4, #0
}
    14b6:	0020      	movs	r0, r4
    14b8:	bd70      	pop	{r4, r5, r6, pc}
		if (strcmp(suite, test->test_suite_name) == 0) {
    14ba:	0028      	movs	r0, r5
    14bc:	6821      	ldr	r1, [r4, #0]
    14be:	f7fe ff11 	bl	2e4 <strcmp>
    14c2:	2800      	cmp	r0, #0
    14c4:	d0f7      	beq.n	14b6 <z_ztest_get_next_test+0x16>
	for (; test < _ztest_unit_test_list_end; ++test) {
    14c6:	3414      	adds	r4, #20
    14c8:	e7f2      	b.n	14b0 <z_ztest_get_next_test+0x10>
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	0000580c 	.word	0x0000580c
    14d0:	00005820 	.word	0x00005820

000014d4 <z_ztest_run_test_suite_ptr>:
	}
}
#endif /* CONFIG_ZTEST_SHUFFLE */

static int z_ztest_run_test_suite_ptr(struct ztest_suite_node *suite)
{
    14d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14d6:	0006      	movs	r6, r0
    14d8:	b08f      	sub	sp, #60	; 0x3c

	if (test_status < 0) {
		return test_status;
	}

	if (suite == NULL) {
    14da:	2800      	cmp	r0, #0
    14dc:	d108      	bne.n	14f0 <z_ztest_run_test_suite_ptr+0x1c>
		test_status = ZTEST_STATUS_CRITICAL_ERROR;
    14de:	2202      	movs	r2, #2
    14e0:	4b9b      	ldr	r3, [pc, #620]	; (1750 <z_ztest_run_test_suite_ptr+0x27c>)
    14e2:	701a      	strb	r2, [r3, #0]
		return -1;
    14e4:	2301      	movs	r3, #1
    14e6:	425b      	negs	r3, r3
    14e8:	9308      	str	r3, [sp, #32]
	if (suite->teardown != NULL) {
		suite->teardown(data);
	}

	return fail;
}
    14ea:	9808      	ldr	r0, [sp, #32]
    14ec:	b00f      	add	sp, #60	; 0x3c
    14ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TC_SUITE_START(suite->name);
    14f0:	6831      	ldr	r1, [r6, #0]
    14f2:	4898      	ldr	r0, [pc, #608]	; (1754 <z_ztest_run_test_suite_ptr+0x280>)
    14f4:	f7ff fc84 	bl	e00 <semihost_log>
    14f8:	4897      	ldr	r0, [pc, #604]	; (1758 <z_ztest_run_test_suite_ptr+0x284>)
    14fa:	f7ff fc81 	bl	e00 <semihost_log>
	current_test_failed_assumption = false;
    14fe:	2300      	movs	r3, #0
    1500:	4a96      	ldr	r2, [pc, #600]	; (175c <z_ztest_run_test_suite_ptr+0x288>)
    1502:	7013      	strb	r3, [r2, #0]
	test_result = ZTEST_RESULT_PENDING;
    1504:	4a96      	ldr	r2, [pc, #600]	; (1760 <z_ztest_run_test_suite_ptr+0x28c>)
    1506:	7013      	strb	r3, [r2, #0]
	phase = TEST_PHASE_SETUP;
    1508:	4a96      	ldr	r2, [pc, #600]	; (1764 <z_ztest_run_test_suite_ptr+0x290>)
    150a:	7013      	strb	r3, [r2, #0]
	if (test_result != ZTEST_RESULT_SUITE_FAIL && suite->setup != NULL) {
    150c:	6873      	ldr	r3, [r6, #4]
	void *data = NULL;
    150e:	9309      	str	r3, [sp, #36]	; 0x24
	if (test_result != ZTEST_RESULT_SUITE_FAIL && suite->setup != NULL) {
    1510:	2b00      	cmp	r3, #0
    1512:	d001      	beq.n	1518 <z_ztest_run_test_suite_ptr+0x44>
		data = suite->setup();
    1514:	4798      	blx	r3
    1516:	9009      	str	r0, [sp, #36]	; 0x24
		fail = 0;
    1518:	2300      	movs	r3, #0
	struct ztest_unit_test *test = NULL;
    151a:	001f      	movs	r7, r3
		fail = 0;
    151c:	9308      	str	r3, [sp, #32]
		while (((test = z_ztest_get_next_test(suite->name, test)) != NULL)) {
    151e:	6834      	ldr	r4, [r6, #0]
    1520:	0039      	movs	r1, r7
    1522:	0020      	movs	r0, r4
    1524:	f7ff ffbc 	bl	14a0 <z_ztest_get_next_test>
    1528:	1e07      	subs	r7, r0, #0
    152a:	d10f      	bne.n	154c <z_ztest_run_test_suite_ptr+0x78>
		if (test_status == ZTEST_STATUS_OK && fail != 0) {
    152c:	4b88      	ldr	r3, [pc, #544]	; (1750 <z_ztest_run_test_suite_ptr+0x27c>)
    152e:	781a      	ldrb	r2, [r3, #0]
    1530:	2a00      	cmp	r2, #0
    1532:	d000      	beq.n	1536 <z_ztest_run_test_suite_ptr+0x62>
    1534:	e0f1      	b.n	171a <z_ztest_run_test_suite_ptr+0x246>
    1536:	9a08      	ldr	r2, [sp, #32]
    1538:	2a00      	cmp	r2, #0
    153a:	d100      	bne.n	153e <z_ztest_run_test_suite_ptr+0x6a>
    153c:	e0f1      	b.n	1722 <z_ztest_run_test_suite_ptr+0x24e>
			test_status = ZTEST_STATUS_HAS_FAILURE;
    153e:	2201      	movs	r2, #1
    1540:	701a      	strb	r2, [r3, #0]
	TC_SUITE_END(suite->name, (fail > 0 ? TC_FAIL : TC_PASS));
    1542:	6831      	ldr	r1, [r6, #0]
    1544:	4888      	ldr	r0, [pc, #544]	; (1768 <z_ztest_run_test_suite_ptr+0x294>)
    1546:	f7ff fc5b 	bl	e00 <semihost_log>
    154a:	e0f0      	b.n	172e <z_ztest_run_test_suite_ptr+0x25a>
			if (ztest_api.should_test_run(suite->name, test->name)) {
    154c:	4b87      	ldr	r3, [pc, #540]	; (176c <z_ztest_run_test_suite_ptr+0x298>)
    154e:	0020      	movs	r0, r4
    1550:	689b      	ldr	r3, [r3, #8]
    1552:	6879      	ldr	r1, [r7, #4]
    1554:	4798      	blx	r3
    1556:	2800      	cmp	r0, #0
    1558:	d100      	bne.n	155c <z_ztest_run_test_suite_ptr+0x88>
    155a:	e0d9      	b.n	1710 <z_ztest_run_test_suite_ptr+0x23c>
				test->stats->run_count++;
    155c:	693a      	ldr	r2, [r7, #16]
	TC_START(test->name);
    155e:	4884      	ldr	r0, [pc, #528]	; (1770 <z_ztest_run_test_suite_ptr+0x29c>)
				test->stats->run_count++;
    1560:	6813      	ldr	r3, [r2, #0]
    1562:	3301      	adds	r3, #1
    1564:	6013      	str	r3, [r2, #0]
	TC_START(test->name);
    1566:	6879      	ldr	r1, [r7, #4]
    1568:	f7ff fc4a 	bl	e00 <semihost_log>
	phase = TEST_PHASE_BEFORE;
    156c:	2301      	movs	r3, #1
    156e:	4c7d      	ldr	r4, [pc, #500]	; (1764 <z_ztest_run_test_suite_ptr+0x290>)
    1570:	7023      	strb	r3, [r4, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    1572:	f000 fff7 	bl	2564 <sys_clock_cycle_get_32>
				test->thread_options | K_INHERIT_PERMS, K_FOREVER);
    1576:	2208      	movs	r2, #8
static uint32_t tc_start_time;
static uint32_t tc_spend_time;

static inline void get_start_time_cyc(void)
{
	tc_start_time = k_cycle_get_32();
    1578:	4b7e      	ldr	r3, [pc, #504]	; (1774 <z_ztest_run_test_suite_ptr+0x2a0>)
    157a:	6018      	str	r0, [r3, #0]
    157c:	68fb      	ldr	r3, [r7, #12]
    157e:	431a      	orrs	r2, r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1580:	9204      	str	r2, [sp, #16]
    1582:	2201      	movs	r2, #1
    1584:	4252      	negs	r2, r2
    1586:	497c      	ldr	r1, [pc, #496]	; (1778 <z_ztest_run_test_suite_ptr+0x2a4>)
    1588:	9203      	str	r2, [sp, #12]
    158a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    158c:	910c      	str	r1, [sp, #48]	; 0x30
    158e:	9202      	str	r2, [sp, #8]
    1590:	2001      	movs	r0, #1
    1592:	4240      	negs	r0, r0
    1594:	17c1      	asrs	r1, r0, #31
    1596:	2280      	movs	r2, #128	; 0x80
    1598:	4d78      	ldr	r5, [pc, #480]	; (177c <z_ztest_run_test_suite_ptr+0x2a8>)
    159a:	9006      	str	r0, [sp, #24]
    159c:	9107      	str	r1, [sp, #28]
    159e:	4b78      	ldr	r3, [pc, #480]	; (1780 <z_ztest_run_test_suite_ptr+0x2ac>)
    15a0:	0028      	movs	r0, r5
    15a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    15a4:	9701      	str	r7, [sp, #4]
    15a6:	9600      	str	r6, [sp, #0]
    15a8:	00d2      	lsls	r2, r2, #3
    15aa:	f001 fa01 	bl	29b0 <z_impl_k_thread_create>
		if (test->name != NULL) {
    15ae:	6879      	ldr	r1, [r7, #4]
    15b0:	2900      	cmp	r1, #0
    15b2:	d002      	beq.n	15ba <z_ztest_run_test_suite_ptr+0xe6>
	return z_impl_k_thread_name_set(thread, str);
    15b4:	0028      	movs	r0, r5
    15b6:	f001 f987 	bl	28c8 <z_impl_k_thread_name_set>
		if (test_result != ZTEST_RESULT_SUITE_SKIP &&
    15ba:	4b69      	ldr	r3, [pc, #420]	; (1760 <z_ztest_run_test_suite_ptr+0x28c>)
    15bc:	781b      	ldrb	r3, [r3, #0]
    15be:	3b04      	subs	r3, #4
    15c0:	2b01      	cmp	r3, #1
    15c2:	d909      	bls.n	15d8 <z_ztest_run_test_suite_ptr+0x104>
	z_impl_k_thread_start(thread);
    15c4:	4d6d      	ldr	r5, [pc, #436]	; (177c <z_ztest_run_test_suite_ptr+0x2a8>)
    15c6:	0028      	movs	r0, r5
    15c8:	f003 ffc9 	bl	555e <z_impl_k_thread_start>
	return z_impl_k_thread_join(thread, timeout);
    15cc:	2201      	movs	r2, #1
    15ce:	4252      	negs	r2, r2
    15d0:	17d3      	asrs	r3, r2, #31
    15d2:	0028      	movs	r0, r5
    15d4:	f002 fd12 	bl	3ffc <z_impl_k_thread_join>
	phase = TEST_PHASE_AFTER;
    15d8:	2303      	movs	r3, #3
    15da:	7023      	strb	r3, [r4, #0]
	if (suite->after != NULL) {
    15dc:	68f3      	ldr	r3, [r6, #12]
    15de:	2b00      	cmp	r3, #0
    15e0:	d001      	beq.n	15e6 <z_ztest_run_test_suite_ptr+0x112>
		suite->after(data);
    15e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    15e4:	4798      	blx	r3
	void *data = NULL;
    15e6:	4c67      	ldr	r4, [pc, #412]	; (1784 <z_ztest_run_test_suite_ptr+0x2b0>)
    15e8:	e006      	b.n	15f8 <z_ztest_run_test_suite_ptr+0x124>
		} else if (!is_before && rule->after_each) {
    15ea:	6863      	ldr	r3, [r4, #4]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d002      	beq.n	15f6 <z_ztest_run_test_suite_ptr+0x122>
			rule->after_each(test, data);
    15f0:	0038      	movs	r0, r7
    15f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    15f4:	4798      	blx	r3
	     rule < _ztest_test_rule_list_end; ++rule) {
    15f6:	3408      	adds	r4, #8
    15f8:	4b63      	ldr	r3, [pc, #396]	; (1788 <z_ztest_run_test_suite_ptr+0x2b4>)
    15fa:	429c      	cmp	r4, r3
    15fc:	d3f5      	bcc.n	15ea <z_ztest_run_test_suite_ptr+0x116>
    15fe:	f000 ffb1 	bl	2564 <sys_clock_cycle_get_32>
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, true, false);
    1602:	2200      	movs	r2, #0
		t += off;
    1604:	2100      	movs	r1, #0
}

static inline void get_test_duration_ms(void)
{
	uint32_t spend_cycle = k_cycle_get_32() - tc_start_time;
    1606:	4b5b      	ldr	r3, [pc, #364]	; (1774 <z_ztest_run_test_suite_ptr+0x2a0>)
	return z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, true, false);
    1608:	920b      	str	r2, [sp, #44]	; 0x2c
    160a:	681b      	ldr	r3, [r3, #0]
    160c:	1ac3      	subs	r3, r0, r3
		t += off;
    160e:	485f      	ldr	r0, [pc, #380]	; (178c <z_ztest_run_test_suite_ptr+0x2b8>)
	return z_tmcvt(t, Z_HZ_cyc, Z_HZ_ms, Z_CCYC, true, true, false);
    1610:	930a      	str	r3, [sp, #40]	; 0x28
		t += off;
    1612:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1614:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    1616:	1900      	adds	r0, r0, r4
    1618:	4169      	adcs	r1, r5
		if (result32 && (t < BIT64(32))) {
    161a:	4291      	cmp	r1, r2
    161c:	d14d      	bne.n	16ba <z_ztest_run_test_suite_ptr+0x1e6>
			return ((uint32_t)t) / (from_hz / to_hz);
    161e:	4a5b      	ldr	r2, [pc, #364]	; (178c <z_ztest_run_test_suite_ptr+0x2b8>)
    1620:	495b      	ldr	r1, [pc, #364]	; (1790 <z_ztest_run_test_suite_ptr+0x2bc>)
    1622:	1898      	adds	r0, r3, r2
    1624:	f7fe fd60 	bl	e8 <__udivsi3>

	tc_spend_time = k_cyc_to_ms_ceil32(spend_cycle);
    1628:	4b5a      	ldr	r3, [pc, #360]	; (1794 <z_ztest_run_test_suite_ptr+0x2c0>)
    162a:	6018      	str	r0, [r3, #0]
	if (tc_spend_time > test->stats->duration_worst_ms) {
    162c:	693b      	ldr	r3, [r7, #16]
    162e:	691a      	ldr	r2, [r3, #16]
    1630:	4282      	cmp	r2, r0
    1632:	d200      	bcs.n	1636 <z_ztest_run_test_suite_ptr+0x162>
		test->stats->duration_worst_ms = tc_spend_time;
    1634:	6118      	str	r0, [r3, #16]
	phase = TEST_PHASE_FRAMEWORK;
    1636:	2205      	movs	r2, #5
    1638:	4b4a      	ldr	r3, [pc, #296]	; (1764 <z_ztest_run_test_suite_ptr+0x290>)
    163a:	4957      	ldr	r1, [pc, #348]	; (1798 <z_ztest_run_test_suite_ptr+0x2c4>)
    163c:	701a      	strb	r2, [r3, #0]
	if (test_result == ZTEST_RESULT_FAIL || test_result == ZTEST_RESULT_SUITE_FAIL ||
    163e:	4b48      	ldr	r3, [pc, #288]	; (1760 <z_ztest_run_test_suite_ptr+0x28c>)
    1640:	781b      	ldrb	r3, [r3, #0]
    1642:	2b02      	cmp	r3, #2
    1644:	d004      	beq.n	1650 <z_ztest_run_test_suite_ptr+0x17c>
    1646:	4293      	cmp	r3, r2
    1648:	d002      	beq.n	1650 <z_ztest_run_test_suite_ptr+0x17c>
    164a:	780a      	ldrb	r2, [r1, #0]
    164c:	2a00      	cmp	r2, #0
    164e:	d039      	beq.n	16c4 <z_ztest_run_test_suite_ptr+0x1f0>
		failed_expectation = false;
    1650:	2300      	movs	r3, #0
		ret = TC_FAIL;
    1652:	2501      	movs	r5, #1
		failed_expectation = false;
    1654:	700b      	strb	r3, [r1, #0]
	z_impl_k_thread_abort(thread);
    1656:	4849      	ldr	r0, [pc, #292]	; (177c <z_ztest_run_test_suite_ptr+0x2a8>)
    1658:	f7ff fe18 	bl	128c <z_impl_k_thread_abort>
		if (strcmp(expectation->test_name, test->name) == 0 &&
    165c:	687b      	ldr	r3, [r7, #4]
	for (struct ztest_expected_result_entry *expectation =
    165e:	4c4f      	ldr	r4, [pc, #316]	; (179c <z_ztest_run_test_suite_ptr+0x2c8>)
		if (strcmp(expectation->test_name, test->name) == 0 &&
    1660:	930c      	str	r3, [sp, #48]	; 0x30
	     expectation < _ztest_expected_result_entry_list_end; ++expectation) {
    1662:	4b4f      	ldr	r3, [pc, #316]	; (17a0 <z_ztest_run_test_suite_ptr+0x2cc>)
    1664:	930d      	str	r3, [sp, #52]	; 0x34
    1666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1668:	429c      	cmp	r4, r3
    166a:	d332      	bcc.n	16d2 <z_ztest_run_test_suite_ptr+0x1fe>
	Z_TC_END_RESULT(ret, test->name);
    166c:	21fa      	movs	r1, #250	; 0xfa
    166e:	4b49      	ldr	r3, [pc, #292]	; (1794 <z_ztest_run_test_suite_ptr+0x2c0>)
    1670:	0089      	lsls	r1, r1, #2
    1672:	681c      	ldr	r4, [r3, #0]
    1674:	0020      	movs	r0, r4
    1676:	f7fe fd37 	bl	e8 <__udivsi3>
    167a:	21fa      	movs	r1, #250	; 0xfa
    167c:	900d      	str	r0, [sp, #52]	; 0x34
    167e:	0089      	lsls	r1, r1, #2
    1680:	0020      	movs	r0, r4
    1682:	f7fe fd6d 	bl	160 <__aeabi_uidivmod>
    1686:	9100      	str	r1, [sp, #0]
    1688:	4946      	ldr	r1, [pc, #280]	; (17a4 <z_ztest_run_test_suite_ptr+0x2d0>)
    168a:	00a8      	lsls	r0, r5, #2
    168c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    168e:	5841      	ldr	r1, [r0, r1]
    1690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1692:	4845      	ldr	r0, [pc, #276]	; (17a8 <z_ztest_run_test_suite_ptr+0x2d4>)
    1694:	f7ff fbb4 	bl	e00 <semihost_log>
    1698:	482f      	ldr	r0, [pc, #188]	; (1758 <z_ztest_run_test_suite_ptr+0x284>)
    169a:	f7ff fbb1 	bl	e00 <semihost_log>
	if (ret == TC_SKIP && current_test_failed_assumption) {
    169e:	693b      	ldr	r3, [r7, #16]
    16a0:	2d02      	cmp	r5, #2
    16a2:	d130      	bne.n	1706 <z_ztest_run_test_suite_ptr+0x232>
    16a4:	4a2d      	ldr	r2, [pc, #180]	; (175c <z_ztest_run_test_suite_ptr+0x288>)
    16a6:	7812      	ldrb	r2, [r2, #0]
    16a8:	2a00      	cmp	r2, #0
    16aa:	d002      	beq.n	16b2 <z_ztest_run_test_suite_ptr+0x1de>
		test_status = 1;
    16ac:	2101      	movs	r1, #1
    16ae:	4a28      	ldr	r2, [pc, #160]	; (1750 <z_ztest_run_test_suite_ptr+0x27c>)
    16b0:	7011      	strb	r1, [r2, #0]
					test->stats->skip_count++;
    16b2:	685a      	ldr	r2, [r3, #4]
    16b4:	3201      	adds	r2, #1
    16b6:	605a      	str	r2, [r3, #4]
				if (tc_result == TC_FAIL) {
    16b8:	e02a      	b.n	1710 <z_ztest_run_test_suite_ptr+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
    16ba:	2300      	movs	r3, #0
    16bc:	4a34      	ldr	r2, [pc, #208]	; (1790 <z_ztest_run_test_suite_ptr+0x2bc>)
    16be:	f7fe fdcd 	bl	25c <__aeabi_uldivmod>
    16c2:	e7b1      	b.n	1628 <z_ztest_run_test_suite_ptr+0x154>
	} else if (test_result == ZTEST_RESULT_SKIP || test_result == ZTEST_RESULT_SUITE_SKIP) {
    16c4:	2101      	movs	r1, #1
    16c6:	3b03      	subs	r3, #3
    16c8:	b2db      	uxtb	r3, r3
    16ca:	4299      	cmp	r1, r3
    16cc:	4152      	adcs	r2, r2
    16ce:	0055      	lsls	r5, r2, #1
    16d0:	e7c1      	b.n	1656 <z_ztest_run_test_suite_ptr+0x182>
		if (strcmp(expectation->test_name, test->name) == 0 &&
    16d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    16d4:	6860      	ldr	r0, [r4, #4]
    16d6:	f7fe fe05 	bl	2e4 <strcmp>
    16da:	2800      	cmp	r0, #0
    16dc:	d10c      	bne.n	16f8 <z_ztest_run_test_suite_ptr+0x224>
		    strcmp(expectation->test_suite_name, test->test_suite_name) == 0) {
    16de:	6839      	ldr	r1, [r7, #0]
    16e0:	6820      	ldr	r0, [r4, #0]
    16e2:	f7fe fdff 	bl	2e4 <strcmp>
		if (strcmp(expectation->test_name, test->name) == 0 &&
    16e6:	2800      	cmp	r0, #0
    16e8:	d106      	bne.n	16f8 <z_ztest_run_test_suite_ptr+0x224>
			expected_result = expectation->expected_result;
    16ea:	7a23      	ldrb	r3, [r4, #8]
	if (expected_result == ZTEST_EXPECTED_RESULT_FAIL) {
    16ec:	2b00      	cmp	r3, #0
    16ee:	d005      	beq.n	16fc <z_ztest_run_test_suite_ptr+0x228>
	if (expected_result == ZTEST_EXPECTED_RESULT_SKIP) {
    16f0:	2b01      	cmp	r3, #1
    16f2:	d1bb      	bne.n	166c <z_ztest_run_test_suite_ptr+0x198>
		return (ret == TC_SKIP) ? TC_PASS : TC_FAIL;
    16f4:	1eab      	subs	r3, r5, #2
    16f6:	e002      	b.n	16fe <z_ztest_run_test_suite_ptr+0x22a>
	     expectation < _ztest_expected_result_entry_list_end; ++expectation) {
    16f8:	340c      	adds	r4, #12
    16fa:	e7b4      	b.n	1666 <z_ztest_run_test_suite_ptr+0x192>
		return (ret == TC_FAIL) ? TC_PASS : TC_FAIL;
    16fc:	1e6b      	subs	r3, r5, #1
		return (ret == TC_SKIP) ? TC_PASS : TC_FAIL;
    16fe:	1e5a      	subs	r2, r3, #1
    1700:	4193      	sbcs	r3, r2
    1702:	b2dd      	uxtb	r5, r3
	switch (result) {
    1704:	e7b2      	b.n	166c <z_ztest_run_test_suite_ptr+0x198>
				if (tc_result == TC_PASS) {
    1706:	2d00      	cmp	r5, #0
    1708:	d11b      	bne.n	1742 <z_ztest_run_test_suite_ptr+0x26e>
					test->stats->pass_count++;
    170a:	68da      	ldr	r2, [r3, #12]
    170c:	3201      	adds	r2, #1
    170e:	60da      	str	r2, [r3, #12]
			if ((fail && FAIL_FAST) || test_status == ZTEST_STATUS_CRITICAL_ERROR) {
    1710:	4b0f      	ldr	r3, [pc, #60]	; (1750 <z_ztest_run_test_suite_ptr+0x27c>)
    1712:	781b      	ldrb	r3, [r3, #0]
    1714:	2b02      	cmp	r3, #2
    1716:	d000      	beq.n	171a <z_ztest_run_test_suite_ptr+0x246>
    1718:	e701      	b.n	151e <z_ztest_run_test_suite_ptr+0x4a>
	TC_SUITE_END(suite->name, (fail > 0 ? TC_FAIL : TC_PASS));
    171a:	9b08      	ldr	r3, [sp, #32]
    171c:	2b00      	cmp	r3, #0
    171e:	d000      	beq.n	1722 <z_ztest_run_test_suite_ptr+0x24e>
    1720:	e70f      	b.n	1542 <z_ztest_run_test_suite_ptr+0x6e>
    1722:	4822      	ldr	r0, [pc, #136]	; (17ac <z_ztest_run_test_suite_ptr+0x2d8>)
    1724:	6831      	ldr	r1, [r6, #0]
    1726:	f7ff fb6b 	bl	e00 <semihost_log>
    172a:	2300      	movs	r3, #0
    172c:	9308      	str	r3, [sp, #32]
	phase = TEST_PHASE_TEARDOWN;
    172e:	2204      	movs	r2, #4
    1730:	4b0c      	ldr	r3, [pc, #48]	; (1764 <z_ztest_run_test_suite_ptr+0x290>)
    1732:	701a      	strb	r2, [r3, #0]
	if (suite->teardown != NULL) {
    1734:	6933      	ldr	r3, [r6, #16]
    1736:	2b00      	cmp	r3, #0
    1738:	d100      	bne.n	173c <z_ztest_run_test_suite_ptr+0x268>
    173a:	e6d6      	b.n	14ea <z_ztest_run_test_suite_ptr+0x16>
		suite->teardown(data);
    173c:	9809      	ldr	r0, [sp, #36]	; 0x24
    173e:	4798      	blx	r3
    1740:	e6d3      	b.n	14ea <z_ztest_run_test_suite_ptr+0x16>
					test->stats->fail_count++;
    1742:	689a      	ldr	r2, [r3, #8]
    1744:	3201      	adds	r2, #1
    1746:	609a      	str	r2, [r3, #8]
					fail++;
    1748:	9b08      	ldr	r3, [sp, #32]
    174a:	3301      	adds	r3, #1
    174c:	9308      	str	r3, [sp, #32]
    174e:	e7df      	b.n	1710 <z_ztest_run_test_suite_ptr+0x23c>
    1750:	200009f2 	.word	0x200009f2
    1754:	0000601e 	.word	0x0000601e
    1758:	00006034 	.word	0x00006034
    175c:	200009f0 	.word	0x200009f0
    1760:	200009f1 	.word	0x200009f1
    1764:	200006b4 	.word	0x200006b4
    1768:	000060ba 	.word	0x000060ba
    176c:	00005860 	.word	0x00005860
    1770:	00006079 	.word	0x00006079
    1774:	200008d0 	.word	0x200008d0
    1778:	200009f8 	.word	0x200009f8
    177c:	200006d8 	.word	0x200006d8
    1780:	000013dd 	.word	0x000013dd
    1784:	00005820 	.word	0x00005820
    1788:	00005820 	.word	0x00005820
    178c:	0000bb7f 	.word	0x0000bb7f
    1790:	0000bb80 	.word	0x0000bb80
    1794:	200008cc 	.word	0x200008cc
    1798:	200009f3 	.word	0x200009f3
    179c:	000057f0 	.word	0x000057f0
    17a0:	000057f0 	.word	0x000057f0
    17a4:	00005854 	.word	0x00005854
    17a8:	00006085 	.word	0x00006085
    17ac:	000060a2 	.word	0x000060a2

000017b0 <z_impl_ztest_run_test_suites>:

	return count;
}

int z_impl_ztest_run_test_suites(const void *state)
{
    17b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int count = 0;

	if (test_status == ZTEST_STATUS_CRITICAL_ERROR) {
    17b2:	4b1e      	ldr	r3, [pc, #120]	; (182c <z_impl_ztest_run_test_suites+0x7c>)
		return count;
    17b4:	2700      	movs	r7, #0
	if (test_status == ZTEST_STATUS_CRITICAL_ERROR) {
    17b6:	9300      	str	r3, [sp, #0]
    17b8:	781b      	ldrb	r3, [r3, #0]
		    (test_status == ZTEST_STATUS_HAS_FAILURE && FAIL_FAST)) {
			break;
		}
	}
#else
	for (struct ztest_suite_node *ptr = _ztest_suite_node_list_start;
    17ba:	4c1d      	ldr	r4, [pc, #116]	; (1830 <z_impl_ztest_run_test_suites+0x80>)
{
    17bc:	9001      	str	r0, [sp, #4]
	if (test_status == ZTEST_STATUS_CRITICAL_ERROR) {
    17be:	2b02      	cmp	r3, #2
    17c0:	d122      	bne.n	1808 <z_impl_ztest_run_test_suites+0x58>
		}
	}
#endif

	return count;
}
    17c2:	0038      	movs	r0, r7
    17c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		test->stats->run_count = 0;
    17c6:	690b      	ldr	r3, [r1, #16]
    17c8:	601e      	str	r6, [r3, #0]
		test->stats->skip_count = 0;
    17ca:	690b      	ldr	r3, [r1, #16]
    17cc:	605e      	str	r6, [r3, #4]
		test->stats->fail_count = 0;
    17ce:	690b      	ldr	r3, [r1, #16]
    17d0:	609e      	str	r6, [r3, #8]
		test->stats->pass_count = 0;
    17d2:	690b      	ldr	r3, [r1, #16]
    17d4:	60de      	str	r6, [r3, #12]
		test->stats->duration_worst_ms = 0;
    17d6:	690b      	ldr	r3, [r1, #16]
    17d8:	611e      	str	r6, [r3, #16]
	while (((test = z_ztest_get_next_test(suite->name, test)) != NULL)) {
    17da:	6820      	ldr	r0, [r4, #0]
    17dc:	f7ff fe60 	bl	14a0 <z_ztest_get_next_test>
    17e0:	1e01      	subs	r1, r0, #0
    17e2:	d1f0      	bne.n	17c6 <z_impl_ztest_run_test_suites+0x16>
			int fail = z_ztest_run_test_suite_ptr(ptr);
    17e4:	0020      	movs	r0, r4
    17e6:	f7ff fe75 	bl	14d4 <z_ztest_run_test_suite_ptr>
			stats->run_count++;
    17ea:	682b      	ldr	r3, [r5, #0]
    17ec:	3301      	adds	r3, #1
    17ee:	602b      	str	r3, [r5, #0]
			stats->fail_count += (fail != 0) ? 1 : 0;
    17f0:	1e43      	subs	r3, r0, #1
    17f2:	4198      	sbcs	r0, r3
    17f4:	68ab      	ldr	r3, [r5, #8]
    17f6:	1818      	adds	r0, r3, r0
    17f8:	60a8      	str	r0, [r5, #8]
			count++;
    17fa:	2001      	movs	r0, #1
		if (test_status == ZTEST_STATUS_CRITICAL_ERROR ||
    17fc:	9b00      	ldr	r3, [sp, #0]
		count += __ztest_run_test_suite(ptr, state);
    17fe:	183f      	adds	r7, r7, r0
		if (test_status == ZTEST_STATUS_CRITICAL_ERROR ||
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	2b02      	cmp	r3, #2
    1804:	d0dd      	beq.n	17c2 <z_impl_ztest_run_test_suites+0x12>
	     ptr < _ztest_suite_node_list_end; ++ptr) {
    1806:	341c      	adds	r4, #28
    1808:	4b0a      	ldr	r3, [pc, #40]	; (1834 <z_impl_ztest_run_test_suites+0x84>)
    180a:	429c      	cmp	r4, r3
    180c:	d2d9      	bcs.n	17c2 <z_impl_ztest_run_test_suites+0x12>
		if (ztest_api.should_suite_run(state, ptr)) {
    180e:	4b0a      	ldr	r3, [pc, #40]	; (1838 <z_impl_ztest_run_test_suites+0x88>)
    1810:	0021      	movs	r1, r4
    1812:	685b      	ldr	r3, [r3, #4]
    1814:	9801      	ldr	r0, [sp, #4]
	struct ztest_suite_stats *stats = ptr->stats;
    1816:	69a5      	ldr	r5, [r4, #24]
		if (ztest_api.should_suite_run(state, ptr)) {
    1818:	4798      	blx	r3
    181a:	2800      	cmp	r0, #0
    181c:	d002      	beq.n	1824 <z_impl_ztest_run_test_suites+0x74>
	struct ztest_unit_test *test = NULL;
    181e:	2100      	movs	r1, #0
		test->stats->run_count = 0;
    1820:	000e      	movs	r6, r1
    1822:	e7da      	b.n	17da <z_impl_ztest_run_test_suites+0x2a>
			stats->skip_count++;
    1824:	686b      	ldr	r3, [r5, #4]
    1826:	3301      	adds	r3, #1
    1828:	606b      	str	r3, [r5, #4]
    182a:	e7e7      	b.n	17fc <z_impl_ztest_run_test_suites+0x4c>
    182c:	200009f2 	.word	0x200009f2
    1830:	000057f0 	.word	0x000057f0
    1834:	0000580c 	.word	0x0000580c
    1838:	00005860 	.word	0x00005860

0000183c <ztest_verify_all_test_suites_ran>:

void ztest_verify_all_test_suites_ran(void)
{
    183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool all_tests_run = true;
    183e:	2601      	movs	r6, #1
	struct ztest_suite_node *suite;
	struct ztest_unit_test *test;

	if (IS_ENABLED(CONFIG_ZTEST_VERIFY_RUN_ALL)) {
		for (suite = _ztest_suite_node_list_start; suite < _ztest_suite_node_list_end;
    1840:	4c1e      	ldr	r4, [pc, #120]	; (18bc <ztest_verify_all_test_suites_ran+0x80>)
    1842:	4b1f      	ldr	r3, [pc, #124]	; (18c0 <ztest_verify_all_test_suites_ran+0x84>)
    1844:	429c      	cmp	r4, r3
    1846:	d30d      	bcc.n	1864 <ztest_verify_all_test_suites_ran+0x28>
				PRINT("ERROR: Test suite '%s' did not run.\n", suite->name);
				all_tests_run = false;
			}
		}

		for (test = _ztest_unit_test_list_start; test < _ztest_unit_test_list_end; ++test) {
    1848:	4c1e      	ldr	r4, [pc, #120]	; (18c4 <ztest_verify_all_test_suites_ran+0x88>)
    184a:	4d1f      	ldr	r5, [pc, #124]	; (18c8 <ztest_verify_all_test_suites_ran+0x8c>)
    184c:	42ac      	cmp	r4, r5
    184e:	d314      	bcc.n	187a <ztest_verify_all_test_suites_ran+0x3e>
				      test->name, test->test_suite_name);
				all_tests_run = false;
			}
		}

		if (!all_tests_run) {
    1850:	2e00      	cmp	r6, #0
    1852:	d102      	bne.n	185a <ztest_verify_all_test_suites_ran+0x1e>
			test_status = ZTEST_STATUS_HAS_FAILURE;
    1854:	2201      	movs	r2, #1
    1856:	4b1d      	ldr	r3, [pc, #116]	; (18cc <ztest_verify_all_test_suites_ran+0x90>)
    1858:	701a      	strb	r2, [r3, #0]

	for (test = _ztest_unit_test_list_start; test < _ztest_unit_test_list_end; ++test) {
		if (test->stats->fail_count + test->stats->pass_count + test->stats->skip_count !=
		    test->stats->run_count) {
			PRINT("Bad stats for %s.%s\n", test->test_suite_name, test->name);
			test_status = 1;
    185a:	2601      	movs	r6, #1
		for (test = _ztest_unit_test_list_start; test < _ztest_unit_test_list_end; ++test) {
    185c:	4c19      	ldr	r4, [pc, #100]	; (18c4 <ztest_verify_all_test_suites_ran+0x88>)
	for (test = _ztest_unit_test_list_start; test < _ztest_unit_test_list_end; ++test) {
    185e:	42ac      	cmp	r4, r5
    1860:	d319      	bcc.n	1896 <ztest_verify_all_test_suites_ran+0x5a>
		}
	}
}
    1862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (suite->stats->run_count < 1) {
    1864:	69a3      	ldr	r3, [r4, #24]
    1866:	681d      	ldr	r5, [r3, #0]
    1868:	2d00      	cmp	r5, #0
    186a:	d104      	bne.n	1876 <ztest_verify_all_test_suites_ran+0x3a>
				PRINT("ERROR: Test suite '%s' did not run.\n", suite->name);
    186c:	4818      	ldr	r0, [pc, #96]	; (18d0 <ztest_verify_all_test_suites_ran+0x94>)
    186e:	6821      	ldr	r1, [r4, #0]
    1870:	f003 fc60 	bl	5134 <printk>
				all_tests_run = false;
    1874:	002e      	movs	r6, r5
		     ++suite) {
    1876:	341c      	adds	r4, #28
    1878:	e7e3      	b.n	1842 <ztest_verify_all_test_suites_ran+0x6>
			suite = ztest_find_test_suite(test->test_suite_name);
    187a:	6827      	ldr	r7, [r4, #0]
    187c:	0038      	movs	r0, r7
    187e:	f7ff fd97 	bl	13b0 <ztest_find_test_suite>
    1882:	1e05      	subs	r5, r0, #0
			if (suite == NULL) {
    1884:	d105      	bne.n	1892 <ztest_verify_all_test_suites_ran+0x56>
				PRINT("ERROR: Test '%s' assigned to test suite '%s' which doesn't "
    1886:	003a      	movs	r2, r7
    1888:	4812      	ldr	r0, [pc, #72]	; (18d4 <ztest_verify_all_test_suites_ran+0x98>)
    188a:	6861      	ldr	r1, [r4, #4]
    188c:	f003 fc52 	bl	5134 <printk>
				all_tests_run = false;
    1890:	002e      	movs	r6, r5
		for (test = _ztest_unit_test_list_start; test < _ztest_unit_test_list_end; ++test) {
    1892:	3414      	adds	r4, #20
    1894:	e7d9      	b.n	184a <ztest_verify_all_test_suites_ran+0xe>
		if (test->stats->fail_count + test->stats->pass_count + test->stats->skip_count !=
    1896:	6922      	ldr	r2, [r4, #16]
    1898:	68d1      	ldr	r1, [r2, #12]
    189a:	6893      	ldr	r3, [r2, #8]
    189c:	185b      	adds	r3, r3, r1
    189e:	6851      	ldr	r1, [r2, #4]
    18a0:	6812      	ldr	r2, [r2, #0]
    18a2:	185b      	adds	r3, r3, r1
    18a4:	4293      	cmp	r3, r2
    18a6:	d006      	beq.n	18b6 <ztest_verify_all_test_suites_ran+0x7a>
			PRINT("Bad stats for %s.%s\n", test->test_suite_name, test->name);
    18a8:	480b      	ldr	r0, [pc, #44]	; (18d8 <ztest_verify_all_test_suites_ran+0x9c>)
    18aa:	6862      	ldr	r2, [r4, #4]
    18ac:	6821      	ldr	r1, [r4, #0]
    18ae:	f003 fc41 	bl	5134 <printk>
			test_status = 1;
    18b2:	4b06      	ldr	r3, [pc, #24]	; (18cc <ztest_verify_all_test_suites_ran+0x90>)
    18b4:	701e      	strb	r6, [r3, #0]
	for (test = _ztest_unit_test_list_start; test < _ztest_unit_test_list_end; ++test) {
    18b6:	3414      	adds	r4, #20
    18b8:	e7d1      	b.n	185e <ztest_verify_all_test_suites_ran+0x22>
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	000057f0 	.word	0x000057f0
    18c0:	0000580c 	.word	0x0000580c
    18c4:	0000580c 	.word	0x0000580c
    18c8:	00005820 	.word	0x00005820
    18cc:	200009f2 	.word	0x200009f2
    18d0:	000060d0 	.word	0x000060d0
    18d4:	000060f5 	.word	0x000060f5
    18d8:	00006137 	.word	0x00006137

000018dc <ztest_run_all>:

void ztest_run_all(const void *state) { ztest_api.run_all(state); }
    18dc:	b510      	push	{r4, lr}
    18de:	4b02      	ldr	r3, [pc, #8]	; (18e8 <ztest_run_all+0xc>)
    18e0:	681b      	ldr	r3, [r3, #0]
    18e2:	4798      	blx	r3
    18e4:	bd10      	pop	{r4, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	00005860 	.word	0x00005860

000018ec <main>:

	return test_status;
}
#else
int main(void)
{
    18ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ee:	b093      	sub	sp, #76	; 0x4c
	k_mem_domain_add_partition(&k_mem_domain_default, &z_malloc_partition);
#endif
#endif /* CONFIG_USERSPACE */

	z_init_mock();
	test_main();
    18f0:	f003 fcce 	bl	5290 <test_main>
	TC_SUMMARY_PRINT("\n------ TESTSUITE SUMMARY START ------\n\n");
    18f4:	485f      	ldr	r0, [pc, #380]	; (1a74 <main+0x188>)
    18f6:	f7ff fa83 	bl	e00 <semihost_log>
	for (struct ztest_suite_node *ptr = _ztest_suite_node_list_start;
    18fa:	4b5f      	ldr	r3, [pc, #380]	; (1a78 <main+0x18c>)
	     ptr < _ztest_suite_node_list_end; ++ptr) {
    18fc:	9309      	str	r3, [sp, #36]	; 0x24
    18fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1900:	4b5e      	ldr	r3, [pc, #376]	; (1a7c <main+0x190>)
    1902:	429a      	cmp	r2, r3
    1904:	d312      	bcc.n	192c <main+0x40>
	TC_SUMMARY_PRINT("------ TESTSUITE SUMMARY END ------\n\n");
    1906:	485e      	ldr	r0, [pc, #376]	; (1a80 <main+0x194>)
    1908:	f7ff fa7a 	bl	e00 <semihost_log>
	if (test_status) {
    190c:	4b5d      	ldr	r3, [pc, #372]	; (1a84 <main+0x198>)
    190e:	485e      	ldr	r0, [pc, #376]	; (1a88 <main+0x19c>)
    1910:	781b      	ldrb	r3, [r3, #0]
    1912:	4c5e      	ldr	r4, [pc, #376]	; (1a8c <main+0x1a0>)
    1914:	2b00      	cmp	r3, #0
    1916:	d100      	bne.n	191a <main+0x2e>
    1918:	e0a8      	b.n	1a6c <main+0x180>
		TC_END_REPORT(TC_FAIL);
    191a:	f7ff fa71 	bl	e00 <semihost_log>
    191e:	495c      	ldr	r1, [pc, #368]	; (1a90 <main+0x1a4>)
		TC_END_REPORT(TC_PASS);
    1920:	0020      	movs	r0, r4
    1922:	f7ff fa6d 	bl	e00 <semihost_log>
			PRINT("Failed after %u attempts\n", state.boots);
			state.boots = 0;
		}
	}
	return 0;
}
    1926:	2000      	movs	r0, #0
    1928:	b013      	add	sp, #76	; 0x4c
    192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	unsigned int suite_duration_worst_ms = 0;
    192c:	2500      	movs	r5, #0
	struct ztest_unit_test *test = NULL;
    192e:	002c      	movs	r4, r5
    1930:	9b09      	ldr	r3, [sp, #36]	; 0x24
	int distinct_pass = 0, distinct_fail = 0, distinct_skip = 0, distinct_total = 0;
    1932:	950a      	str	r5, [sp, #40]	; 0x28
    1934:	681b      	ldr	r3, [r3, #0]
    1936:	950b      	str	r5, [sp, #44]	; 0x2c
    1938:	930f      	str	r3, [sp, #60]	; 0x3c
    193a:	950c      	str	r5, [sp, #48]	; 0x30
    193c:	950d      	str	r5, [sp, #52]	; 0x34
	while (((test = z_ztest_get_next_test(suite->name, test)) != NULL)) {
    193e:	0021      	movs	r1, r4
    1940:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1942:	f7ff fdad 	bl	14a0 <z_ztest_get_next_test>
    1946:	1e04      	subs	r4, r0, #0
    1948:	d156      	bne.n	19f8 <main+0x10c>
	if (distinct_skip == distinct_total) {
    194a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    194c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    194e:	2302      	movs	r3, #2
		passrate_major = passrate_minor = 0;
    1950:	0006      	movs	r6, r0
    1952:	900e      	str	r0, [sp, #56]	; 0x38
	if (distinct_skip == distinct_total) {
    1954:	428a      	cmp	r2, r1
    1956:	d01f      	beq.n	1998 <main+0xac>
		expanded_pass = distinct_pass * 100000;
    1958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    195a:	484e      	ldr	r0, [pc, #312]	; (1a94 <main+0x1a8>)
		effective_total = distinct_total - distinct_skip;
    195c:	1a51      	subs	r1, r2, r1
		expanded_pass = distinct_pass * 100000;
    195e:	4358      	muls	r0, r3
		expanded_passrate = expanded_pass / effective_total;
    1960:	f7fe fc08 	bl	174 <__divsi3>
		passrate_major = expanded_passrate / 1000;
    1964:	21fa      	movs	r1, #250	; 0xfa
    1966:	0089      	lsls	r1, r1, #2
		expanded_passrate = expanded_pass / effective_total;
    1968:	0006      	movs	r6, r0
		passrate_major = expanded_passrate / 1000;
    196a:	f7fe fc03 	bl	174 <__divsi3>
		passrate_minor = (expanded_passrate - passrate_major * 1000) / 10;
    196e:	4f4a      	ldr	r7, [pc, #296]	; (1a98 <main+0x1ac>)
		passrate_major = expanded_passrate / 1000;
    1970:	900e      	str	r0, [sp, #56]	; 0x38
		passrate_minor = (expanded_passrate - passrate_major * 1000) / 10;
    1972:	4347      	muls	r7, r0
    1974:	19bf      	adds	r7, r7, r6
    1976:	210a      	movs	r1, #10
    1978:	0038      	movs	r0, r7
    197a:	f7fe fbfb 	bl	174 <__divsi3>
		suite_result = (distinct_fail > 0) ? TC_FAIL : TC_PASS;
    197e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1982:	17db      	asrs	r3, r3, #31
    1984:	1a9b      	subs	r3, r3, r2
		passrate_tail = expanded_passrate - passrate_major * 1000 - passrate_minor * 10;
    1986:	220a      	movs	r2, #10
    1988:	4252      	negs	r2, r2
    198a:	4342      	muls	r2, r0
    198c:	19d2      	adds	r2, r2, r7
		passrate_minor = (expanded_passrate - passrate_major * 1000) / 10;
    198e:	0006      	movs	r6, r0
		suite_result = (distinct_fail > 0) ? TC_FAIL : TC_PASS;
    1990:	0fdb      	lsrs	r3, r3, #31
		if (passrate_tail >= 5) { /* rounding */
    1992:	2a04      	cmp	r2, #4
    1994:	dd00      	ble.n	1998 <main+0xac>
			passrate_minor++;
    1996:	3601      	adds	r6, #1
	TC_SUMMARY_PRINT("SUITE %s - %3d.%02d%% [%s]: pass = %d, fail = %d, "
    1998:	21fa      	movs	r1, #250	; 0xfa
    199a:	4a40      	ldr	r2, [pc, #256]	; (1a9c <main+0x1b0>)
    199c:	009b      	lsls	r3, r3, #2
    199e:	0028      	movs	r0, r5
    19a0:	0089      	lsls	r1, r1, #2
    19a2:	9210      	str	r2, [sp, #64]	; 0x40
    19a4:	9311      	str	r3, [sp, #68]	; 0x44
    19a6:	f7fe fbdb 	bl	160 <__aeabi_uidivmod>
    19aa:	9106      	str	r1, [sp, #24]
    19ac:	21fa      	movs	r1, #250	; 0xfa
    19ae:	0028      	movs	r0, r5
    19b0:	0089      	lsls	r1, r1, #2
    19b2:	f7fe fb99 	bl	e8 <__udivsi3>
    19b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19b8:	4f39      	ldr	r7, [pc, #228]	; (1aa0 <main+0x1b4>)
    19ba:	9304      	str	r3, [sp, #16]
    19bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19be:	9910      	ldr	r1, [sp, #64]	; 0x40
    19c0:	9303      	str	r3, [sp, #12]
    19c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    19c4:	9005      	str	r0, [sp, #20]
    19c6:	9302      	str	r3, [sp, #8]
    19c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    19ca:	9811      	ldr	r0, [sp, #68]	; 0x44
    19cc:	9301      	str	r3, [sp, #4]
    19ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19d0:	5841      	ldr	r1, [r0, r1]
    19d2:	9300      	str	r3, [sp, #0]
    19d4:	0038      	movs	r0, r7
    19d6:	0033      	movs	r3, r6
    19d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19da:	f7ff fa11 	bl	e00 <semihost_log>
	while (((test = z_ztest_get_next_test(suite->name, test)) != NULL)) {
    19de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19e0:	0021      	movs	r1, r4
    19e2:	6818      	ldr	r0, [r3, #0]
    19e4:	f7ff fd5c 	bl	14a0 <z_ztest_get_next_test>
    19e8:	1e04      	subs	r4, r0, #0
    19ea:	d11e      	bne.n	1a2a <main+0x13e>
	TC_SUMMARY_PRINT("\n");
    19ec:	482d      	ldr	r0, [pc, #180]	; (1aa4 <main+0x1b8>)
    19ee:	f7ff fa07 	bl	e00 <semihost_log>
	     ptr < _ztest_suite_node_list_end; ++ptr) {
    19f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19f4:	331c      	adds	r3, #28
    19f6:	e781      	b.n	18fc <main+0x10>
		distinct_total++;
    19f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19fa:	3301      	adds	r3, #1
    19fc:	930a      	str	r3, [sp, #40]	; 0x28
		suite_duration_worst_ms += test->stats->duration_worst_ms;
    19fe:	6923      	ldr	r3, [r4, #16]
    1a00:	691a      	ldr	r2, [r3, #16]
		if (test->stats->skip_count == test->stats->run_count) {
    1a02:	6859      	ldr	r1, [r3, #4]
		suite_duration_worst_ms += test->stats->duration_worst_ms;
    1a04:	18ad      	adds	r5, r5, r2
		if (test->stats->skip_count == test->stats->run_count) {
    1a06:	681a      	ldr	r2, [r3, #0]
    1a08:	4291      	cmp	r1, r2
    1a0a:	d103      	bne.n	1a14 <main+0x128>
			distinct_skip++;
    1a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a0e:	3301      	adds	r3, #1
    1a10:	930b      	str	r3, [sp, #44]	; 0x2c
    1a12:	e794      	b.n	193e <main+0x52>
		} else if (test->stats->pass_count == test->stats->run_count) {
    1a14:	68db      	ldr	r3, [r3, #12]
    1a16:	429a      	cmp	r2, r3
    1a18:	d103      	bne.n	1a22 <main+0x136>
			distinct_pass++;
    1a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a1c:	3301      	adds	r3, #1
    1a1e:	930d      	str	r3, [sp, #52]	; 0x34
    1a20:	e78d      	b.n	193e <main+0x52>
			distinct_fail++;
    1a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1a24:	3301      	adds	r3, #1
    1a26:	930c      	str	r3, [sp, #48]	; 0x30
    1a28:	e789      	b.n	193e <main+0x52>
		if (test->stats->skip_count == test->stats->run_count) {
    1a2a:	6923      	ldr	r3, [r4, #16]
    1a2c:	2502      	movs	r5, #2
    1a2e:	681a      	ldr	r2, [r3, #0]
    1a30:	6859      	ldr	r1, [r3, #4]
    1a32:	4291      	cmp	r1, r2
    1a34:	d003      	beq.n	1a3e <main+0x152>
		} else if (test->stats->pass_count == test->stats->run_count) {
    1a36:	68dd      	ldr	r5, [r3, #12]
    1a38:	1aad      	subs	r5, r5, r2
    1a3a:	1e6a      	subs	r2, r5, #1
    1a3c:	4195      	sbcs	r5, r2
		TC_SUMMARY_PRINT(" - %s - [%s.%s] duration = %u.%03u seconds\n",
    1a3e:	21fa      	movs	r1, #250	; 0xfa
    1a40:	691f      	ldr	r7, [r3, #16]
    1a42:	0089      	lsls	r1, r1, #2
    1a44:	0038      	movs	r0, r7
    1a46:	f7fe fb8b 	bl	160 <__aeabi_uidivmod>
    1a4a:	9101      	str	r1, [sp, #4]
    1a4c:	21fa      	movs	r1, #250	; 0xfa
    1a4e:	0038      	movs	r0, r7
    1a50:	0089      	lsls	r1, r1, #2
    1a52:	f7fe fb49 	bl	e8 <__udivsi3>
    1a56:	4e14      	ldr	r6, [pc, #80]	; (1aa8 <main+0x1bc>)
    1a58:	9910      	ldr	r1, [sp, #64]	; 0x40
    1a5a:	9000      	str	r0, [sp, #0]
    1a5c:	00ad      	lsls	r5, r5, #2
    1a5e:	0030      	movs	r0, r6
    1a60:	6863      	ldr	r3, [r4, #4]
    1a62:	6822      	ldr	r2, [r4, #0]
    1a64:	5949      	ldr	r1, [r1, r5]
    1a66:	f7ff f9cb 	bl	e00 <semihost_log>
		flush_frequency++;
    1a6a:	e7b8      	b.n	19de <main+0xf2>
		TC_END_REPORT(TC_PASS);
    1a6c:	f7ff f9c8 	bl	e00 <semihost_log>
    1a70:	490e      	ldr	r1, [pc, #56]	; (1aac <main+0x1c0>)
    1a72:	e755      	b.n	1920 <main+0x34>
    1a74:	0000614c 	.word	0x0000614c
    1a78:	000057f0 	.word	0x000057f0
    1a7c:	0000580c 	.word	0x0000580c
    1a80:	00006205 	.word	0x00006205
    1a84:	200009f2 	.word	0x200009f2
    1a88:	00006034 	.word	0x00006034
    1a8c:	00006232 	.word	0x00006232
    1a90:	0000622b 	.word	0x0000622b
    1a94:	000186a0 	.word	0x000186a0
    1a98:	fffffc18 	.word	0xfffffc18
    1a9c:	00005854 	.word	0x00005854
    1aa0:	00006175 	.word	0x00006175
    1aa4:	00006a74 	.word	0x00006a74
    1aa8:	000061d9 	.word	0x000061d9
    1aac:	00006248 	.word	0x00006248

00001ab0 <wait_synchronization>:
};

static void wait_synchronization(void)
{
#ifdef REG_EIC_SYNCBUSY
	while (EIC->SYNCBUSY.reg) {
    1ab0:	4a02      	ldr	r2, [pc, #8]	; (1abc <wait_synchronization+0xc>)
    1ab2:	6853      	ldr	r3, [r2, #4]
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d1fc      	bne.n	1ab2 <wait_synchronization+0x2>
	}
#else
	while (EIC->STATUS.bit.SYNCBUSY) {
	}
#endif
}
    1ab8:	4770      	bx	lr
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	40002800 	.word	0x40002800

00001ac0 <sam0_eic_isr>:
	EIC->CTRL.bit.ENABLE = on;
#endif
}

static void sam0_eic_isr(const struct device *dev)
{
    1ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if __CORTEX_M >= 3
	line_index = __CLZ(__RBIT(bits));
	bits >>= line_index;
#else
	if (bits & 0xFF) {
		line_index = 0;
    1ac2:	2500      	movs	r5, #0
	uint16_t bits = EIC->INTFLAG.reg;
    1ac4:	4a0f      	ldr	r2, [pc, #60]	; (1b04 <sam0_eic_isr+0x44>)
	struct sam0_eic_data *const dev_data = dev->data;
    1ac6:	6906      	ldr	r6, [r0, #16]
	uint16_t bits = EIC->INTFLAG.reg;
    1ac8:	6953      	ldr	r3, [r2, #20]
    1aca:	b29c      	uxth	r4, r3
	if (bits & 0xFF) {
    1acc:	b2db      	uxtb	r3, r3
	EIC->INTFLAG.reg = bits;
    1ace:	6154      	str	r4, [r2, #20]
	if (bits & 0xFF) {
    1ad0:	42ab      	cmp	r3, r5
    1ad2:	d101      	bne.n	1ad8 <sam0_eic_isr+0x18>
	} else {
		line_index = 8;
		bits >>= 8;
    1ad4:	0a24      	lsrs	r4, r4, #8
		line_index = 8;
    1ad6:	3508      	adds	r5, #8
	/*
	 * Map the EIC lines to the port pin masks based on which port is
	 * selected in the line data.
	 */
	for (; bits; bits >>= 1, line_index++) {
		if (!(bits & 1)) {
    1ad8:	2701      	movs	r7, #1
	for (; bits; bits >>= 1, line_index++) {
    1ada:	2c00      	cmp	r4, #0
    1adc:	d100      	bne.n	1ae0 <sam0_eic_isr+0x20>
		struct sam0_eic_port_data *port_data =
			&dev_data->ports[line_assignment->port];

		port_data->cb(BIT(line_assignment->pin), port_data->data);
	}
}
    1ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(bits & 1)) {
    1ae0:	423c      	tst	r4, r7
    1ae2:	d00c      	beq.n	1afe <sam0_eic_isr+0x3e>
		port_data->cb(BIT(line_assignment->pin), port_data->data);
    1ae4:	0038      	movs	r0, r7
			&dev_data->ports[line_assignment->port];
    1ae6:	1973      	adds	r3, r6, r5
    1ae8:	7e1a      	ldrb	r2, [r3, #24]
    1aea:	0653      	lsls	r3, r2, #25
    1aec:	0f9b      	lsrs	r3, r3, #30
    1aee:	00db      	lsls	r3, r3, #3
		port_data->cb(BIT(line_assignment->pin), port_data->data);
    1af0:	06d2      	lsls	r2, r2, #27
    1af2:	18f3      	adds	r3, r6, r3
    1af4:	0ed2      	lsrs	r2, r2, #27
    1af6:	4090      	lsls	r0, r2
    1af8:	6859      	ldr	r1, [r3, #4]
    1afa:	681a      	ldr	r2, [r3, #0]
    1afc:	4790      	blx	r2
	for (; bits; bits >>= 1, line_index++) {
    1afe:	0864      	lsrs	r4, r4, #1
    1b00:	3501      	adds	r5, #1
    1b02:	e7ea      	b.n	1ada <sam0_eic_isr+0x1a>
    1b04:	40002800 	.word	0x40002800

00001b08 <sam0_eic_init>:
{
	ARG_UNUSED(dev);

#ifdef MCLK
	/* Enable the EIC clock in APBAMASK */
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1b08:	2380      	movs	r3, #128	; 0x80
{
    1b0a:	b510      	push	{r4, lr}
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1b0c:	4a0c      	ldr	r2, [pc, #48]	; (1b40 <sam0_eic_init+0x38>)
    1b0e:	00db      	lsls	r3, r3, #3
    1b10:	6951      	ldr	r1, [r2, #20]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_EIC | GCLK_CLKCTRL_GEN_GCLK0 |
			    GCLK_CLKCTRL_CLKEN;
#endif

#if DT_INST_IRQ_HAS_CELL(0, irq)
	SAM0_EIC_IRQ_CONNECT(0);
    1b12:	2003      	movs	r0, #3
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1b14:	430b      	orrs	r3, r1
    1b16:	6153      	str	r3, [r2, #20]
	GCLK->PCHCTRL[EIC_GCLK_ID].reg = GCLK_PCHCTRL_GEN_GCLK0 |
    1b18:	2240      	movs	r2, #64	; 0x40
    1b1a:	4b0a      	ldr	r3, [pc, #40]	; (1b44 <sam0_eic_init+0x3c>)
    1b1c:	601a      	str	r2, [r3, #0]
	SAM0_EIC_IRQ_CONNECT(0);
    1b1e:	2200      	movs	r2, #0
    1b20:	0011      	movs	r1, r2
    1b22:	f7ff f9f5 	bl	f10 <z_arm_irq_priority_set>
    1b26:	2003      	movs	r0, #3
    1b28:	f7ff f9e6 	bl	ef8 <arch_irq_enable>
	EIC->CTRLA.bit.ENABLE = on;
    1b2c:	2302      	movs	r3, #2
    1b2e:	4a06      	ldr	r2, [pc, #24]	; (1b48 <sam0_eic_init+0x40>)
    1b30:	7811      	ldrb	r1, [r2, #0]
    1b32:	430b      	orrs	r3, r1
    1b34:	7013      	strb	r3, [r2, #0]
#if DT_INST_IRQ_HAS_IDX(0, 15)
	SAM0_EIC_IRQ_CONNECT(15);
#endif

	set_eic_enable(1);
	wait_synchronization();
    1b36:	f7ff ffbb 	bl	1ab0 <wait_synchronization>

	return 0;
}
    1b3a:	2000      	movs	r0, #0
    1b3c:	bd10      	pop	{r4, pc}
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	40000800 	.word	0x40000800
    1b44:	40001c88 	.word	0x40001c88
    1b48:	40002800 	.word	0x40002800

00001b4c <sam0_eic_check_ownership>:
{
    1b4c:	b510      	push	{r4, lr}
	if (!line_assignment->enabled) {
    1b4e:	4b09      	ldr	r3, [pc, #36]	; (1b74 <sam0_eic_check_ownership+0x28>)
{
    1b50:	0004      	movs	r4, r0
	if (!line_assignment->enabled) {
    1b52:	189b      	adds	r3, r3, r2
    1b54:	7e1b      	ldrb	r3, [r3, #24]
		return false;
    1b56:	2000      	movs	r0, #0
	if (!line_assignment->enabled) {
    1b58:	2b7f      	cmp	r3, #127	; 0x7f
    1b5a:	d909      	bls.n	1b70 <sam0_eic_check_ownership+0x24>
	if (line_assignment->port != port ||
    1b5c:	065a      	lsls	r2, r3, #25
    1b5e:	0f92      	lsrs	r2, r2, #30
    1b60:	4294      	cmp	r4, r2
    1b62:	d105      	bne.n	1b70 <sam0_eic_check_ownership+0x24>
	    line_assignment->pin != pin) {
    1b64:	06d8      	lsls	r0, r3, #27
    1b66:	0ec0      	lsrs	r0, r0, #27
	if (line_assignment->port != port ||
    1b68:	1a40      	subs	r0, r0, r1
    1b6a:	4243      	negs	r3, r0
    1b6c:	4158      	adcs	r0, r3
    1b6e:	b2c0      	uxtb	r0, r0
}
    1b70:	bd10      	pop	{r4, pc}
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	200008d4 	.word	0x200008d4

00001b78 <sam0_eic_acquire>:
{
    1b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7a:	b085      	sub	sp, #20
    1b7c:	9303      	str	r3, [sp, #12]
#endif
};

static inline int sam0_eic_map_to_line(int port, int pin)
{
	uint8_t ch = sam0_eic_channels[port][pin];
    1b7e:	4b3d      	ldr	r3, [pc, #244]	; (1c74 <sam0_eic_acquire+0xfc>)
    1b80:	9201      	str	r2, [sp, #4]
    1b82:	0142      	lsls	r2, r0, #5
    1b84:	189b      	adds	r3, r3, r2
    1b86:	5c5d      	ldrb	r5, [r3, r1]

	if (ch == 0xFF) {
    1b88:	2dff      	cmp	r5, #255	; 0xff
    1b8a:	d100      	bne.n	1b8e <sam0_eic_acquire+0x16>
    1b8c:	e06f      	b.n	1c6e <sam0_eic_acquire+0xf6>
	__asm__ volatile("mrs %0, PRIMASK;"
    1b8e:	f3ef 8310 	mrs	r3, PRIMASK
    1b92:	b672      	cpsid	i
	EIC->CTRLA.bit.ENABLE = on;
    1b94:	2202      	movs	r2, #2
    1b96:	4c38      	ldr	r4, [pc, #224]	; (1c78 <sam0_eic_acquire+0x100>)
    1b98:	9302      	str	r3, [sp, #8]
    1b9a:	7823      	ldrb	r3, [r4, #0]
    1b9c:	4393      	bics	r3, r2
    1b9e:	7023      	strb	r3, [r4, #0]
	if (line_assignment->enabled) {
    1ba0:	4b36      	ldr	r3, [pc, #216]	; (1c7c <sam0_eic_acquire+0x104>)
    1ba2:	195b      	adds	r3, r3, r5
    1ba4:	7e1b      	ldrb	r3, [r3, #24]
    1ba6:	2b7f      	cmp	r3, #127	; 0x7f
    1ba8:	d916      	bls.n	1bd8 <sam0_eic_acquire+0x60>
		if (line_assignment->port != port ||
    1baa:	065a      	lsls	r2, r3, #25
    1bac:	0f92      	lsrs	r2, r2, #30
    1bae:	4282      	cmp	r2, r0
    1bb0:	d103      	bne.n	1bba <sam0_eic_acquire+0x42>
		    line_assignment->pin != pin) {
    1bb2:	06db      	lsls	r3, r3, #27
    1bb4:	0edb      	lsrs	r3, r3, #27
		if (line_assignment->port != port ||
    1bb6:	428b      	cmp	r3, r1
    1bb8:	d00e      	beq.n	1bd8 <sam0_eic_acquire+0x60>
	EIC->CTRLA.bit.ENABLE = on;
    1bba:	2302      	movs	r3, #2
    1bbc:	7822      	ldrb	r2, [r4, #0]
    1bbe:	4313      	orrs	r3, r2
    1bc0:	7023      	strb	r3, [r4, #0]
	wait_synchronization();
    1bc2:	f7ff ff75 	bl	1ab0 <wait_synchronization>
	if (key != 0U) {
    1bc6:	9b02      	ldr	r3, [sp, #8]
    1bc8:	2b00      	cmp	r3, #0
    1bca:	d102      	bne.n	1bd2 <sam0_eic_acquire+0x5a>
	__asm__ volatile(
    1bcc:	b662      	cpsie	i
    1bce:	f3bf 8f6f 	isb	sy
	return -EBUSY;
    1bd2:	2010      	movs	r0, #16
		return -ENOTSUP;
    1bd4:	4240      	negs	r0, r0
    1bd6:	e040      	b.n	1c5a <sam0_eic_acquire+0xe2>
	port_data->cb = cb;
    1bd8:	4b28      	ldr	r3, [pc, #160]	; (1c7c <sam0_eic_acquire+0x104>)
    1bda:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    1bdc:	00c7      	lsls	r7, r0, #3
    1bde:	50fe      	str	r6, [r7, r3]
	port_data->data = data;
    1be0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    1be2:	19df      	adds	r7, r3, r7
    1be4:	607e      	str	r6, [r7, #4]
	line_assignment->pin = pin;
    1be6:	261f      	movs	r6, #31
    1be8:	2703      	movs	r7, #3
    1bea:	400e      	ands	r6, r1
    1bec:	2180      	movs	r1, #128	; 0x80
    1bee:	4038      	ands	r0, r7
    1bf0:	4249      	negs	r1, r1
    1bf2:	4331      	orrs	r1, r6
	config_shift = (line_index % 8) * 4;
    1bf4:	2207      	movs	r2, #7
	line_assignment->pin = pin;
    1bf6:	0140      	lsls	r0, r0, #5
    1bf8:	4308      	orrs	r0, r1
    1bfa:	195b      	adds	r3, r3, r5
    1bfc:	7618      	strb	r0, [r3, #24]
	config &= ~(0xF << config_shift);
    1bfe:	200f      	movs	r0, #15
	config_shift = (line_index % 8) * 4;
    1c00:	402a      	ands	r2, r5
    1c02:	0092      	lsls	r2, r2, #2
	config &= ~(0xF << config_shift);
    1c04:	4090      	lsls	r0, r2
    1c06:	4b1c      	ldr	r3, [pc, #112]	; (1c78 <sam0_eic_acquire+0x100>)
	config_index = line_index / 8;
    1c08:	10e9      	asrs	r1, r5, #3
    1c0a:	0089      	lsls	r1, r1, #2
    1c0c:	18c9      	adds	r1, r1, r3
	config = EIC->CONFIG[config_index].reg;
    1c0e:	69cb      	ldr	r3, [r1, #28]
	config &= ~(0xF << config_shift);
    1c10:	4383      	bics	r3, r0
	switch (trigger) {
    1c12:	9801      	ldr	r0, [sp, #4]
    1c14:	2804      	cmp	r0, #4
    1c16:	d80c      	bhi.n	1c32 <sam0_eic_acquire+0xba>
    1c18:	f7fe fa52 	bl	c0 <__gnu_thumb1_case_uqi>
    1c1c:	21090703 	.word	0x21090703
    1c20:	23          	.byte	0x23
    1c21:	00          	.byte	0x00
		config |= EIC_CONFIG_SENSE0_RISE << config_shift;
    1c22:	2001      	movs	r0, #1
		config |= EIC_CONFIG_SENSE0_LOW << config_shift;
    1c24:	4090      	lsls	r0, r2
    1c26:	4303      	orrs	r3, r0
		break;
    1c28:	e003      	b.n	1c32 <sam0_eic_acquire+0xba>
		config |= EIC_CONFIG_SENSE0_FALL << config_shift;
    1c2a:	2002      	movs	r0, #2
    1c2c:	e7fa      	b.n	1c24 <sam0_eic_acquire+0xac>
		config |= EIC_CONFIG_SENSE0_BOTH << config_shift;
    1c2e:	4097      	lsls	r7, r2
    1c30:	433b      	orrs	r3, r7
	if (filter) {
    1c32:	9803      	ldr	r0, [sp, #12]
    1c34:	2800      	cmp	r0, #0
    1c36:	d002      	beq.n	1c3e <sam0_eic_acquire+0xc6>
		config |= EIC_CONFIG_FILTEN0 << config_shift;
    1c38:	2008      	movs	r0, #8
    1c3a:	4090      	lsls	r0, r2
    1c3c:	4303      	orrs	r3, r0
	EIC->CONFIG[config_index].reg = config;
    1c3e:	61cb      	str	r3, [r1, #28]
	EIC->CTRLA.bit.ENABLE = on;
    1c40:	2302      	movs	r3, #2
    1c42:	7822      	ldrb	r2, [r4, #0]
    1c44:	4313      	orrs	r3, r2
    1c46:	7023      	strb	r3, [r4, #0]
	wait_synchronization();
    1c48:	f7ff ff32 	bl	1ab0 <wait_synchronization>
	mask = BIT(line_index);
    1c4c:	2301      	movs	r3, #1
    1c4e:	40ab      	lsls	r3, r5
	EIC->INTFLAG.reg = mask;
    1c50:	6163      	str	r3, [r4, #20]
	if (key != 0U) {
    1c52:	9b02      	ldr	r3, [sp, #8]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d006      	beq.n	1c66 <sam0_eic_acquire+0xee>
	return 0;
    1c58:	2000      	movs	r0, #0
}
    1c5a:	b005      	add	sp, #20
    1c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config |= EIC_CONFIG_SENSE0_HIGH << config_shift;
    1c5e:	2004      	movs	r0, #4
    1c60:	e7e0      	b.n	1c24 <sam0_eic_acquire+0xac>
		config |= EIC_CONFIG_SENSE0_LOW << config_shift;
    1c62:	2005      	movs	r0, #5
    1c64:	e7de      	b.n	1c24 <sam0_eic_acquire+0xac>
	__asm__ volatile(
    1c66:	b662      	cpsie	i
    1c68:	f3bf 8f6f 	isb	sy
    1c6c:	e7f4      	b.n	1c58 <sam0_eic_acquire+0xe0>
    1c6e:	2086      	movs	r0, #134	; 0x86
    1c70:	e7b0      	b.n	1bd4 <sam0_eic_acquire+0x5c>
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	0000629a 	.word	0x0000629a
    1c78:	40002800 	.word	0x40002800
    1c7c:	200008d4 	.word	0x200008d4

00001c80 <sam0_eic_release>:
{
    1c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t ch = sam0_eic_channels[port][pin];
    1c82:	4b1f      	ldr	r3, [pc, #124]	; (1d00 <sam0_eic_release+0x80>)
    1c84:	0142      	lsls	r2, r0, #5
    1c86:	189b      	adds	r3, r3, r2
    1c88:	5c5c      	ldrb	r4, [r3, r1]
    1c8a:	000e      	movs	r6, r1
    1c8c:	9001      	str	r0, [sp, #4]
	if (ch == 0xFF) {
    1c8e:	2cff      	cmp	r4, #255	; 0xff
    1c90:	d033      	beq.n	1cfa <sam0_eic_release+0x7a>
	__asm__ volatile("mrs %0, PRIMASK;"
    1c92:	f3ef 8710 	mrs	r7, PRIMASK
    1c96:	b672      	cpsid	i
	EIC->CTRLA.bit.ENABLE = on;
    1c98:	2202      	movs	r2, #2
    1c9a:	4d1a      	ldr	r5, [pc, #104]	; (1d04 <sam0_eic_release+0x84>)
    1c9c:	782b      	ldrb	r3, [r5, #0]
    1c9e:	4393      	bics	r3, r2
    1ca0:	702b      	strb	r3, [r5, #0]
	wait_synchronization();
    1ca2:	f7ff ff05 	bl	1ab0 <wait_synchronization>
	if (!sam0_eic_check_ownership(port, pin, line_index)) {
    1ca6:	0022      	movs	r2, r4
    1ca8:	0031      	movs	r1, r6
    1caa:	9801      	ldr	r0, [sp, #4]
    1cac:	f7ff ff4e 	bl	1b4c <sam0_eic_check_ownership>
    1cb0:	2800      	cmp	r0, #0
    1cb2:	d014      	beq.n	1cde <sam0_eic_release+0x5e>
	dev_data->lines[line_index].enabled = 0;
    1cb4:	207f      	movs	r0, #127	; 0x7f
	mask = BIT(line_index);
    1cb6:	2201      	movs	r2, #1
	dev_data->lines[line_index].enabled = 0;
    1cb8:	4b13      	ldr	r3, [pc, #76]	; (1d08 <sam0_eic_release+0x88>)
	mask = BIT(line_index);
    1cba:	40a2      	lsls	r2, r4
	dev_data->lines[line_index].enabled = 0;
    1cbc:	191b      	adds	r3, r3, r4
    1cbe:	7e19      	ldrb	r1, [r3, #24]
    1cc0:	4001      	ands	r1, r0
	config_shift = (line_index % 8) * 4;
    1cc2:	3878      	subs	r0, #120	; 0x78
	dev_data->lines[line_index].enabled = 0;
    1cc4:	7619      	strb	r1, [r3, #24]
	config_index = line_index / 8;
    1cc6:	10e3      	asrs	r3, r4, #3
	config_shift = (line_index % 8) * 4;
    1cc8:	4004      	ands	r4, r0
    1cca:	00a4      	lsls	r4, r4, #2
	EIC->CONFIG[config_index].reg &= ~(0xF << config_shift);
    1ccc:	3008      	adds	r0, #8
    1cce:	40a0      	lsls	r0, r4
    1cd0:	009b      	lsls	r3, r3, #2
    1cd2:	195b      	adds	r3, r3, r5
    1cd4:	69d9      	ldr	r1, [r3, #28]
    1cd6:	4381      	bics	r1, r0
    1cd8:	61d9      	str	r1, [r3, #28]
	EIC->INTENCLR.reg = mask;
    1cda:	60ea      	str	r2, [r5, #12]
	EIC->INTFLAG.reg = mask;
    1cdc:	616a      	str	r2, [r5, #20]
	EIC->CTRLA.bit.ENABLE = on;
    1cde:	2302      	movs	r3, #2
    1ce0:	782a      	ldrb	r2, [r5, #0]
    1ce2:	4313      	orrs	r3, r2
    1ce4:	702b      	strb	r3, [r5, #0]
	wait_synchronization();
    1ce6:	f7ff fee3 	bl	1ab0 <wait_synchronization>
	if (key != 0U) {
    1cea:	2f00      	cmp	r7, #0
    1cec:	d001      	beq.n	1cf2 <sam0_eic_release+0x72>
	return 0;
    1cee:	2000      	movs	r0, #0
}
    1cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    1cf2:	b662      	cpsie	i
    1cf4:	f3bf 8f6f 	isb	sy
    1cf8:	e7f9      	b.n	1cee <sam0_eic_release+0x6e>
		return -ENOTSUP;
    1cfa:	2086      	movs	r0, #134	; 0x86
    1cfc:	4240      	negs	r0, r0
    1cfe:	e7f7      	b.n	1cf0 <sam0_eic_release+0x70>
    1d00:	0000629a 	.word	0x0000629a
    1d04:	40002800 	.word	0x40002800
    1d08:	200008d4 	.word	0x200008d4

00001d0c <sam0_eic_enable_interrupt>:
	uint8_t ch = sam0_eic_channels[port][pin];
    1d0c:	4b0b      	ldr	r3, [pc, #44]	; (1d3c <sam0_eic_enable_interrupt+0x30>)
    1d0e:	0142      	lsls	r2, r0, #5
    1d10:	189b      	adds	r3, r3, r2
{
    1d12:	b510      	push	{r4, lr}
    1d14:	5c5c      	ldrb	r4, [r3, r1]
	if (ch == 0xFF) {
    1d16:	2cff      	cmp	r4, #255	; 0xff
    1d18:	d00b      	beq.n	1d32 <sam0_eic_enable_interrupt+0x26>
	if (!sam0_eic_check_ownership(port, pin, line_index)) {
    1d1a:	0022      	movs	r2, r4
    1d1c:	f7ff ff16 	bl	1b4c <sam0_eic_check_ownership>
    1d20:	2800      	cmp	r0, #0
    1d22:	d009      	beq.n	1d38 <sam0_eic_enable_interrupt+0x2c>
	mask = BIT(line_index);
    1d24:	2301      	movs	r3, #1
    1d26:	40a3      	lsls	r3, r4
	return 0;
    1d28:	2000      	movs	r0, #0
	EIC->INTFLAG.reg = mask;
    1d2a:	4a05      	ldr	r2, [pc, #20]	; (1d40 <sam0_eic_enable_interrupt+0x34>)
    1d2c:	6153      	str	r3, [r2, #20]
	EIC->INTENSET.reg = mask;
    1d2e:	6113      	str	r3, [r2, #16]
}
    1d30:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    1d32:	2086      	movs	r0, #134	; 0x86
		return -EBUSY;
    1d34:	4240      	negs	r0, r0
    1d36:	e7fb      	b.n	1d30 <sam0_eic_enable_interrupt+0x24>
    1d38:	2010      	movs	r0, #16
    1d3a:	e7fb      	b.n	1d34 <sam0_eic_enable_interrupt+0x28>
    1d3c:	0000629a 	.word	0x0000629a
    1d40:	40002800 	.word	0x40002800

00001d44 <sam0_eic_disable_interrupt>:
	uint8_t ch = sam0_eic_channels[port][pin];
    1d44:	4b0b      	ldr	r3, [pc, #44]	; (1d74 <sam0_eic_disable_interrupt+0x30>)
    1d46:	0142      	lsls	r2, r0, #5
    1d48:	189b      	adds	r3, r3, r2
{
    1d4a:	b510      	push	{r4, lr}
    1d4c:	5c5c      	ldrb	r4, [r3, r1]
	if (ch == 0xFF) {
    1d4e:	2cff      	cmp	r4, #255	; 0xff
    1d50:	d00b      	beq.n	1d6a <sam0_eic_disable_interrupt+0x26>
	if (!sam0_eic_check_ownership(port, pin, line_index)) {
    1d52:	0022      	movs	r2, r4
    1d54:	f7ff fefa 	bl	1b4c <sam0_eic_check_ownership>
    1d58:	2800      	cmp	r0, #0
    1d5a:	d009      	beq.n	1d70 <sam0_eic_disable_interrupt+0x2c>
	mask = BIT(line_index);
    1d5c:	2301      	movs	r3, #1
    1d5e:	40a3      	lsls	r3, r4
	return 0;
    1d60:	2000      	movs	r0, #0
	EIC->INTENCLR.reg = mask;
    1d62:	4a05      	ldr	r2, [pc, #20]	; (1d78 <sam0_eic_disable_interrupt+0x34>)
    1d64:	60d3      	str	r3, [r2, #12]
	EIC->INTFLAG.reg = mask;
    1d66:	6153      	str	r3, [r2, #20]
}
    1d68:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    1d6a:	2086      	movs	r0, #134	; 0x86
		return -EBUSY;
    1d6c:	4240      	negs	r0, r0
    1d6e:	e7fb      	b.n	1d68 <sam0_eic_disable_interrupt+0x24>
    1d70:	2010      	movs	r0, #16
    1d72:	e7fb      	b.n	1d6c <sam0_eic_disable_interrupt+0x28>
    1d74:	0000629a 	.word	0x0000629a
    1d78:	40002800 	.word	0x40002800

00001d7c <sam0_eic_interrupt_pending>:
{
    1d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t set = EIC->INTFLAG.reg;
    1d7e:	4b0f      	ldr	r3, [pc, #60]	; (1dbc <sam0_eic_interrupt_pending+0x40>)
{
    1d80:	9001      	str	r0, [sp, #4]
	uint32_t set = EIC->INTFLAG.reg;
    1d82:	695d      	ldr	r5, [r3, #20]
	for (int line_index = 0; line_index < EIC_EXTINT_NUM; line_index++) {
    1d84:	2300      	movs	r3, #0
	uint32_t mask = 0;
    1d86:	0018      	movs	r0, r3
		if (!line_assignment->enabled) {
    1d88:	4e0d      	ldr	r6, [pc, #52]	; (1dc0 <sam0_eic_interrupt_pending+0x44>)
		if (line_assignment->port != port) {
    1d8a:	4f0e      	ldr	r7, [pc, #56]	; (1dc4 <sam0_eic_interrupt_pending+0x48>)
		if (!line_assignment->enabled) {
    1d8c:	5cf2      	ldrb	r2, [r6, r3]
    1d8e:	2a7f      	cmp	r2, #127	; 0x7f
    1d90:	d910      	bls.n	1db4 <sam0_eic_interrupt_pending+0x38>
		if (line_assignment->port != port) {
    1d92:	18fa      	adds	r2, r7, r3
    1d94:	7e12      	ldrb	r2, [r2, #24]
    1d96:	9901      	ldr	r1, [sp, #4]
    1d98:	0654      	lsls	r4, r2, #25
    1d9a:	0fa4      	lsrs	r4, r4, #30
    1d9c:	428c      	cmp	r4, r1
    1d9e:	d109      	bne.n	1db4 <sam0_eic_interrupt_pending+0x38>
		if (!(set & BIT(line_index))) {
    1da0:	002c      	movs	r4, r5
    1da2:	2101      	movs	r1, #1
    1da4:	40dc      	lsrs	r4, r3
    1da6:	420c      	tst	r4, r1
    1da8:	d004      	beq.n	1db4 <sam0_eic_interrupt_pending+0x38>
		mask |= BIT(line_assignment->pin);
    1daa:	000c      	movs	r4, r1
    1dac:	06d2      	lsls	r2, r2, #27
    1dae:	0ed2      	lsrs	r2, r2, #27
    1db0:	4094      	lsls	r4, r2
    1db2:	4320      	orrs	r0, r4
	for (int line_index = 0; line_index < EIC_EXTINT_NUM; line_index++) {
    1db4:	3301      	adds	r3, #1
    1db6:	2b10      	cmp	r3, #16
    1db8:	d1e8      	bne.n	1d8c <sam0_eic_interrupt_pending+0x10>
}
    1dba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1dbc:	40002800 	.word	0x40002800
    1dc0:	200008ec 	.word	0x200008ec
    1dc4:	200008d4 	.word	0x200008d4

00001dc8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    1dc8:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1dca:	4808      	ldr	r0, [pc, #32]	; (1dec <uart_console_init+0x24>)
    1dcc:	f003 fbac 	bl	5528 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1dd0:	2800      	cmp	r0, #0
    1dd2:	d008      	beq.n	1de6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    1dd4:	4c06      	ldr	r4, [pc, #24]	; (1df0 <uart_console_init+0x28>)
    1dd6:	0020      	movs	r0, r4
    1dd8:	f7ff fa98 	bl	130c <__stdout_hook_install>
	__printk_hook_install(console_out);
    1ddc:	0020      	movs	r0, r4
    1dde:	f7fe fbc1 	bl	564 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1de2:	2000      	movs	r0, #0
}
    1de4:	bd10      	pop	{r4, pc}
		return -ENODEV;
    1de6:	2013      	movs	r0, #19
    1de8:	4240      	negs	r0, r0
    1dea:	e7fb      	b.n	1de4 <uart_console_init+0x1c>
    1dec:	0000567c 	.word	0x0000567c
    1df0:	00001df5 	.word	0x00001df5

00001df4 <console_out>:
{
    1df4:	b570      	push	{r4, r5, r6, lr}
    1df6:	0004      	movs	r4, r0
    1df8:	4d07      	ldr	r5, [pc, #28]	; (1e18 <console_out+0x24>)
	if ('\n' == c) {
    1dfa:	280a      	cmp	r0, #10
    1dfc:	d104      	bne.n	1e08 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1dfe:	68ab      	ldr	r3, [r5, #8]
    1e00:	210d      	movs	r1, #13
    1e02:	0028      	movs	r0, r5
    1e04:	685b      	ldr	r3, [r3, #4]
    1e06:	4798      	blx	r3
    1e08:	68ab      	ldr	r3, [r5, #8]
    1e0a:	0028      	movs	r0, r5
    1e0c:	685b      	ldr	r3, [r3, #4]
    1e0e:	b2e1      	uxtb	r1, r4
    1e10:	4798      	blx	r3
}
    1e12:	0020      	movs	r0, r4
    1e14:	bd70      	pop	{r4, r5, r6, pc}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	0000567c 	.word	0x0000567c

00001e1c <gpio_sam0_manage_callback>:
}


static int gpio_sam0_manage_callback(const struct device *dev,
				     struct gpio_callback *callback, bool set)
{
    1e1c:	b510      	push	{r4, lr}
	struct gpio_sam0_data *const data = dev->data;
    1e1e:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    1e20:	2900      	cmp	r1, #0
    1e22:	d10d      	bne.n	1e40 <gpio_sam0_manage_callback+0x24>
    1e24:	4c23      	ldr	r4, [pc, #140]	; (1eb4 <gpio_sam0_manage_callback+0x98>)
    1e26:	4924      	ldr	r1, [pc, #144]	; (1eb8 <gpio_sam0_manage_callback+0x9c>)
    1e28:	232a      	movs	r3, #42	; 0x2a
    1e2a:	0022      	movs	r2, r4
    1e2c:	4823      	ldr	r0, [pc, #140]	; (1ebc <gpio_sam0_manage_callback+0xa0>)
    1e2e:	f003 f9b0 	bl	5192 <assert_print>
    1e32:	4823      	ldr	r0, [pc, #140]	; (1ec0 <gpio_sam0_manage_callback+0xa4>)
    1e34:	f003 f9ad 	bl	5192 <assert_print>
    1e38:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
    1e3a:	0020      	movs	r0, r4
    1e3c:	f003 f9a5 	bl	518a <assert_post_action>
    1e40:	6848      	ldr	r0, [r1, #4]
    1e42:	2800      	cmp	r0, #0
    1e44:	d10b      	bne.n	1e5e <gpio_sam0_manage_callback+0x42>
    1e46:	4c1b      	ldr	r4, [pc, #108]	; (1eb4 <gpio_sam0_manage_callback+0x98>)
    1e48:	491e      	ldr	r1, [pc, #120]	; (1ec4 <gpio_sam0_manage_callback+0xa8>)
    1e4a:	232b      	movs	r3, #43	; 0x2b
    1e4c:	0022      	movs	r2, r4
    1e4e:	481b      	ldr	r0, [pc, #108]	; (1ebc <gpio_sam0_manage_callback+0xa0>)
    1e50:	f003 f99f 	bl	5192 <assert_print>
    1e54:	481c      	ldr	r0, [pc, #112]	; (1ec8 <gpio_sam0_manage_callback+0xac>)
    1e56:	f003 f99c 	bl	5192 <assert_print>
    1e5a:	212b      	movs	r1, #43	; 0x2b
    1e5c:	e7ed      	b.n	1e3a <gpio_sam0_manage_callback+0x1e>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1e5e:	68d8      	ldr	r0, [r3, #12]

	if (!sys_slist_is_empty(callbacks)) {
    1e60:	2800      	cmp	r0, #0
    1e62:	d021      	beq.n	1ea8 <gpio_sam0_manage_callback+0x8c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    1e64:	4288      	cmp	r0, r1
    1e66:	d11b      	bne.n	1ea0 <gpio_sam0_manage_callback+0x84>
	return node->next;
    1e68:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    1e6a:	691c      	ldr	r4, [r3, #16]
	list->head = node;
    1e6c:	60d8      	str	r0, [r3, #12]
Z_GENLIST_REMOVE(slist, snode)
    1e6e:	42a1      	cmp	r1, r4
    1e70:	d100      	bne.n	1e74 <gpio_sam0_manage_callback+0x58>
	list->tail = node;
    1e72:	6118      	str	r0, [r3, #16]
	parent->next = child;
    1e74:	2000      	movs	r0, #0
    1e76:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
    1e78:	4282      	cmp	r2, r0
    1e7a:	d006      	beq.n	1e8a <gpio_sam0_manage_callback+0x6e>
	return list->head;
    1e7c:	68da      	ldr	r2, [r3, #12]
	parent->next = child;
    1e7e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    1e80:	691a      	ldr	r2, [r3, #16]
	list->head = node;
    1e82:	60d9      	str	r1, [r3, #12]
Z_GENLIST_PREPEND(slist, snode)
    1e84:	2a00      	cmp	r2, #0
    1e86:	d100      	bne.n	1e8a <gpio_sam0_manage_callback+0x6e>
	list->tail = node;
    1e88:	6119      	str	r1, [r3, #16]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    1e8a:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->callbacks, callback, set);
    1e8c:	e010      	b.n	1eb0 <gpio_sam0_manage_callback+0x94>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    1e8e:	4281      	cmp	r1, r0
    1e90:	d106      	bne.n	1ea0 <gpio_sam0_manage_callback+0x84>
	return node->next;
    1e92:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    1e94:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    1e96:	6918      	ldr	r0, [r3, #16]
    1e98:	4281      	cmp	r1, r0
    1e9a:	d1eb      	bne.n	1e74 <gpio_sam0_manage_callback+0x58>
	list->tail = node;
    1e9c:	611c      	str	r4, [r3, #16]
}
    1e9e:	e7e9      	b.n	1e74 <gpio_sam0_manage_callback+0x58>
	return node->next;
    1ea0:	0004      	movs	r4, r0
    1ea2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    1ea4:	2800      	cmp	r0, #0
    1ea6:	d1f2      	bne.n	1e8e <gpio_sam0_manage_callback+0x72>
			if (!set) {
    1ea8:	2a00      	cmp	r2, #0
    1eaa:	d1e7      	bne.n	1e7c <gpio_sam0_manage_callback+0x60>
				return -EINVAL;
    1eac:	2016      	movs	r0, #22
    1eae:	4240      	negs	r0, r0
}
    1eb0:	bd10      	pop	{r4, pc}
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	000062fa 	.word	0x000062fa
    1eb8:	00006336 	.word	0x00006336
    1ebc:	00005d0d 	.word	0x00005d0d
    1ec0:	0000633f 	.word	0x0000633f
    1ec4:	0000634e 	.word	0x0000634e
    1ec8:	00006360 	.word	0x00006360

00001ecc <gpio_sam0_pin_interrupt_configure>:
{
    1ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ece:	b085      	sub	sp, #20
    1ed0:	0017      	movs	r7, r2
    1ed2:	9302      	str	r3, [sp, #8]
	switch (mode) {
    1ed4:	2380      	movs	r3, #128	; 0x80
	const struct gpio_sam0_config *config = dev->config;
    1ed6:	6846      	ldr	r6, [r0, #4]
	struct gpio_sam0_data *const data = dev->data;
    1ed8:	6902      	ldr	r2, [r0, #16]
	PortGroup *regs = config->regs;
    1eda:	6875      	ldr	r5, [r6, #4]
{
    1edc:	000c      	movs	r4, r1
		.reg = regs->PINCFG[pin].reg,
    1ede:	1869      	adds	r1, r5, r1
    1ee0:	3140      	adds	r1, #64	; 0x40
    1ee2:	7809      	ldrb	r1, [r1, #0]
	data->dev = dev;
    1ee4:	6050      	str	r0, [r2, #4]
	switch (mode) {
    1ee6:	4835      	ldr	r0, [pc, #212]	; (1fbc <gpio_sam0_pin_interrupt_configure+0xf0>)
		.reg = regs->PINCFG[pin].reg,
    1ee8:	b2c9      	uxtb	r1, r1
	switch (mode) {
    1eea:	4038      	ands	r0, r7
    1eec:	03db      	lsls	r3, r3, #15
    1eee:	4298      	cmp	r0, r3
    1ef0:	d01f      	beq.n	1f32 <gpio_sam0_pin_interrupt_configure+0x66>
    1ef2:	2380      	movs	r3, #128	; 0x80
    1ef4:	039b      	lsls	r3, r3, #14
    1ef6:	429f      	cmp	r7, r3
    1ef8:	d002      	beq.n	1f00 <gpio_sam0_pin_interrupt_configure+0x34>
			rc = -EINVAL;
    1efa:	2016      	movs	r0, #22
			rc = -ENOTSUP;
    1efc:	4240      	negs	r0, r0
	return rc;
    1efe:	e016      	b.n	1f2e <gpio_sam0_pin_interrupt_configure+0x62>
		pincfg.bit.PMUXEN = 0;
    1f00:	2301      	movs	r3, #1
    1f02:	4399      	bics	r1, r3
    1f04:	9103      	str	r1, [sp, #12]
		rc = sam0_eic_disable_interrupt(config->id, pin);
    1f06:	7a30      	ldrb	r0, [r6, #8]
    1f08:	0021      	movs	r1, r4
    1f0a:	f7ff ff1b 	bl	1d44 <sam0_eic_disable_interrupt>
		if (rc == -EBUSY) {
    1f0e:	0003      	movs	r3, r0
    1f10:	2210      	movs	r2, #16
    1f12:	3310      	adds	r3, #16
    1f14:	4393      	bics	r3, r2
    1f16:	d10a      	bne.n	1f2e <gpio_sam0_pin_interrupt_configure+0x62>
			rc = sam0_eic_release(config->id, pin);
    1f18:	0021      	movs	r1, r4
    1f1a:	7a30      	ldrb	r0, [r6, #8]
    1f1c:	f7ff feb0 	bl	1c80 <sam0_eic_release>
	if (rc == 0) {
    1f20:	2800      	cmp	r0, #0
    1f22:	d104      	bne.n	1f2e <gpio_sam0_pin_interrupt_configure+0x62>
		regs->PINCFG[pin] = pincfg;
    1f24:	466b      	mov	r3, sp
    1f26:	192d      	adds	r5, r5, r4
    1f28:	7b1b      	ldrb	r3, [r3, #12]
    1f2a:	3540      	adds	r5, #64	; 0x40
    1f2c:	702b      	strb	r3, [r5, #0]
}
    1f2e:	b005      	add	sp, #20
    1f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((pincfg.bit.INEN == 0)
    1f32:	0788      	lsls	r0, r1, #30
    1f34:	d540      	bpl.n	1fb8 <gpio_sam0_pin_interrupt_configure+0xec>
		    || ((regs->DIR.reg & BIT(pin)) != 0)) {
    1f36:	6828      	ldr	r0, [r5, #0]
    1f38:	2301      	movs	r3, #1
    1f3a:	40e0      	lsrs	r0, r4
    1f3c:	4218      	tst	r0, r3
    1f3e:	d13b      	bne.n	1fb8 <gpio_sam0_pin_interrupt_configure+0xec>
		pincfg.bit.PMUXEN = 1;
    1f40:	0018      	movs	r0, r3
    1f42:	4308      	orrs	r0, r1
			regs->PMUX[pin / 2U].bit.PMUXO = PORT_PMUX_PMUXE_A_Val;
    1f44:	0861      	lsrs	r1, r4, #1
    1f46:	1869      	adds	r1, r5, r1
		pincfg.bit.PMUXEN = 1;
    1f48:	9003      	str	r0, [sp, #12]
			regs->PMUX[pin / 2U].bit.PMUXO = PORT_PMUX_PMUXE_A_Val;
    1f4a:	3130      	adds	r1, #48	; 0x30
    1f4c:	200f      	movs	r0, #15
		if ((pin & 1U) != 0) {
    1f4e:	421c      	tst	r4, r3
    1f50:	d028      	beq.n	1fa4 <gpio_sam0_pin_interrupt_configure+0xd8>
			regs->PMUX[pin / 2U].bit.PMUXO = PORT_PMUX_PMUXE_A_Val;
    1f52:	780b      	ldrb	r3, [r1, #0]
    1f54:	4018      	ands	r0, r3
			regs->PMUX[pin / 2U].bit.PMUXE = PORT_PMUX_PMUXE_A_Val;
    1f56:	7008      	strb	r0, [r1, #0]
		switch (trig) {
    1f58:	2180      	movs	r1, #128	; 0x80
    1f5a:	9b02      	ldr	r3, [sp, #8]
    1f5c:	04c9      	lsls	r1, r1, #19
    1f5e:	428b      	cmp	r3, r1
    1f60:	d024      	beq.n	1fac <gpio_sam0_pin_interrupt_configure+0xe0>
    1f62:	21c0      	movs	r1, #192	; 0xc0
    1f64:	04c9      	lsls	r1, r1, #19
    1f66:	428b      	cmp	r3, r1
    1f68:	d024      	beq.n	1fb4 <gpio_sam0_pin_interrupt_configure+0xe8>
    1f6a:	2180      	movs	r1, #128	; 0x80
    1f6c:	0489      	lsls	r1, r1, #18
    1f6e:	428b      	cmp	r3, r1
    1f70:	d1c3      	bne.n	1efa <gpio_sam0_pin_interrupt_configure+0x2e>
				: SAM0_EIC_FALLING;
    1f72:	2380      	movs	r3, #128	; 0x80
    1f74:	2101      	movs	r1, #1
    1f76:	03db      	lsls	r3, r3, #15
				: SAM0_EIC_RISING;
    1f78:	429f      	cmp	r7, r3
    1f7a:	d100      	bne.n	1f7e <gpio_sam0_pin_interrupt_configure+0xb2>
    1f7c:	3103      	adds	r1, #3
					      (data->debounce & BIT(pin)) != 0,
    1f7e:	6893      	ldr	r3, [r2, #8]
			rc = sam0_eic_acquire(config->id, pin, trigger,
    1f80:	2001      	movs	r0, #1
					      (data->debounce & BIT(pin)) != 0,
    1f82:	40e3      	lsrs	r3, r4
			rc = sam0_eic_acquire(config->id, pin, trigger,
    1f84:	4003      	ands	r3, r0
    1f86:	7a30      	ldrb	r0, [r6, #8]
    1f88:	9201      	str	r2, [sp, #4]
    1f8a:	4a0d      	ldr	r2, [pc, #52]	; (1fc0 <gpio_sam0_pin_interrupt_configure+0xf4>)
    1f8c:	9200      	str	r2, [sp, #0]
    1f8e:	000a      	movs	r2, r1
    1f90:	0021      	movs	r1, r4
    1f92:	f7ff fdf1 	bl	1b78 <sam0_eic_acquire>
		if (rc == 0) {
    1f96:	2800      	cmp	r0, #0
    1f98:	d1c9      	bne.n	1f2e <gpio_sam0_pin_interrupt_configure+0x62>
			rc = sam0_eic_enable_interrupt(config->id, pin);
    1f9a:	0021      	movs	r1, r4
    1f9c:	7a30      	ldrb	r0, [r6, #8]
    1f9e:	f7ff feb5 	bl	1d0c <sam0_eic_enable_interrupt>
    1fa2:	e7bd      	b.n	1f20 <gpio_sam0_pin_interrupt_configure+0x54>
			regs->PMUX[pin / 2U].bit.PMUXE = PORT_PMUX_PMUXE_A_Val;
    1fa4:	780b      	ldrb	r3, [r1, #0]
    1fa6:	4383      	bics	r3, r0
    1fa8:	0018      	movs	r0, r3
    1faa:	e7d4      	b.n	1f56 <gpio_sam0_pin_interrupt_configure+0x8a>
				: SAM0_EIC_RISING;
    1fac:	2380      	movs	r3, #128	; 0x80
    1fae:	2100      	movs	r1, #0
    1fb0:	03db      	lsls	r3, r3, #15
    1fb2:	e7e1      	b.n	1f78 <gpio_sam0_pin_interrupt_configure+0xac>
    1fb4:	2102      	movs	r1, #2
    1fb6:	e7e2      	b.n	1f7e <gpio_sam0_pin_interrupt_configure+0xb2>
			rc = -ENOTSUP;
    1fb8:	2086      	movs	r0, #134	; 0x86
    1fba:	e79f      	b.n	1efc <gpio_sam0_pin_interrupt_configure+0x30>
    1fbc:	feffffff 	.word	0xfeffffff
    1fc0:	00001fc5 	.word	0x00001fc5

00001fc4 <gpio_sam0_isr>:
{
    1fc4:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->callbacks, data->dev, pins);
    1fc6:	684e      	ldr	r6, [r1, #4]
    1fc8:	68c9      	ldr	r1, [r1, #12]
{
    1fca:	0005      	movs	r5, r0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1fcc:	2900      	cmp	r1, #0
    1fce:	d002      	beq.n	1fd6 <gpio_sam0_isr+0x12>
	return node->next;
    1fd0:	680c      	ldr	r4, [r1, #0]
    1fd2:	2900      	cmp	r1, #0
    1fd4:	d100      	bne.n	1fd8 <gpio_sam0_isr+0x14>
}
    1fd6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    1fd8:	688b      	ldr	r3, [r1, #8]
    1fda:	001a      	movs	r2, r3
    1fdc:	402a      	ands	r2, r5
    1fde:	422b      	tst	r3, r5
    1fe0:	d012      	beq.n	2008 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x8>
			__ASSERT(cb->handler, "No callback handler!");
    1fe2:	684b      	ldr	r3, [r1, #4]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d10d      	bne.n	2004 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x4>
    1fe8:	4c0a      	ldr	r4, [pc, #40]	; (2014 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x14>)
    1fea:	490b      	ldr	r1, [pc, #44]	; (2018 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x18>)
    1fec:	0022      	movs	r2, r4
    1fee:	480b      	ldr	r0, [pc, #44]	; (201c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1c>)
    1ff0:	334d      	adds	r3, #77	; 0x4d
    1ff2:	f003 f8ce 	bl	5192 <assert_print>
    1ff6:	480a      	ldr	r0, [pc, #40]	; (2020 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x20>)
    1ff8:	f003 f8cb 	bl	5192 <assert_print>
    1ffc:	214d      	movs	r1, #77	; 0x4d
    1ffe:	0020      	movs	r0, r4
    2000:	f003 f8c3 	bl	518a <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2004:	0030      	movs	r0, r6
    2006:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2008:	1e23      	subs	r3, r4, #0
    200a:	d000      	beq.n	200e <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xe>
    200c:	6823      	ldr	r3, [r4, #0]
    200e:	0021      	movs	r1, r4
    2010:	001c      	movs	r4, r3
    2012:	e7de      	b.n	1fd2 <gpio_sam0_isr+0xe>
    2014:	000062fa 	.word	0x000062fa
    2018:	00006377 	.word	0x00006377
    201c:	00005d0d 	.word	0x00005d0d
    2020:	00006360 	.word	0x00006360

00002024 <pinctrl_configure_pins>:
	soc_port_configure(&soc_pin);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2024:	b5f0      	push	{r4, r5, r6, r7, lr}
    2026:	0004      	movs	r4, r0
	soc_pin.pinum = SAM_PINMUX_PIN_GET(pin);
    2028:	271f      	movs	r7, #31
    202a:	0089      	lsls	r1, r1, #2
{
    202c:	b085      	sub	sp, #20
    202e:	1845      	adds	r5, r0, r1
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2030:	42ac      	cmp	r4, r5
    2032:	d102      	bne.n	203a <pinctrl_configure_pins+0x16>
		pinctrl_configure_pin(*pins++);
	}

	return 0;
}
    2034:	2000      	movs	r0, #0
    2036:	b005      	add	sp, #20
    2038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	port_idx = SAM_PINMUX_PORT_GET(pin);
    203a:	210f      	movs	r1, #15
		pinctrl_configure_pin(*pins++);
    203c:	6823      	ldr	r3, [r4, #0]
	port_idx = SAM_PINMUX_PORT_GET(pin);
    203e:	0c1a      	lsrs	r2, r3, #16
    2040:	400a      	ands	r2, r1
	__ASSERT_NO_MSG(port_idx < ARRAY_SIZE(sam_port_addrs));
    2042:	2a02      	cmp	r2, #2
    2044:	d90a      	bls.n	205c <pinctrl_configure_pins+0x38>
    2046:	4c11      	ldr	r4, [pc, #68]	; (208c <pinctrl_configure_pins+0x68>)
    2048:	4911      	ldr	r1, [pc, #68]	; (2090 <pinctrl_configure_pins+0x6c>)
    204a:	4812      	ldr	r0, [pc, #72]	; (2094 <pinctrl_configure_pins+0x70>)
    204c:	231f      	movs	r3, #31
    204e:	0022      	movs	r2, r4
    2050:	f003 f89f 	bl	5192 <assert_print>
    2054:	211f      	movs	r1, #31
    2056:	0020      	movs	r0, r4
    2058:	f003 f897 	bl	518a <assert_post_action>
	soc_pin.flags = SAM_PINCTRL_FLAGS_GET(pin) << SOC_PORT_FLAGS_POS;
    205c:	203f      	movs	r0, #63	; 0x3f
	soc_pin.regs = (PortGroup *) sam_port_addrs[port_idx];
    205e:	490e      	ldr	r1, [pc, #56]	; (2098 <pinctrl_configure_pins+0x74>)
    2060:	0092      	lsls	r2, r2, #2
    2062:	5851      	ldr	r1, [r2, r1]
	port_func = SAM_PINMUX_FUNC_GET(pin);
    2064:	011e      	lsls	r6, r3, #4
	soc_pin.pinum = SAM_PINMUX_PIN_GET(pin);
    2066:	0d1a      	lsrs	r2, r3, #20
    2068:	403a      	ands	r2, r7
	soc_pin.flags = SAM_PINCTRL_FLAGS_GET(pin) << SOC_PORT_FLAGS_POS;
    206a:	4018      	ands	r0, r3
	if (port_func == SAM_PINMUX_FUNC_periph) {
    206c:	0f76      	lsrs	r6, r6, #29
    206e:	2e01      	cmp	r6, #1
    2070:	d104      	bne.n	207c <pinctrl_configure_pins+0x58>
		soc_pin.flags |= (SAM_PINMUX_PERIPH_GET(pin)
    2072:	0f1b      	lsrs	r3, r3, #28
				  << SOC_PORT_FUNC_POS)
    2074:	041b      	lsls	r3, r3, #16
		soc_pin.flags |= (SAM_PINMUX_PERIPH_GET(pin)
    2076:	4303      	orrs	r3, r0
    2078:	2040      	movs	r0, #64	; 0x40
    207a:	4318      	orrs	r0, r3
	soc_pin.flags = SAM_PINCTRL_FLAGS_GET(pin) << SOC_PORT_FLAGS_POS;
    207c:	9003      	str	r0, [sp, #12]
	soc_port_configure(&soc_pin);
    207e:	a801      	add	r0, sp, #4
	soc_pin.regs = (PortGroup *) sam_port_addrs[port_idx];
    2080:	9101      	str	r1, [sp, #4]
	soc_pin.pinum = SAM_PINMUX_PIN_GET(pin);
    2082:	9202      	str	r2, [sp, #8]
    2084:	3404      	adds	r4, #4
	soc_port_configure(&soc_pin);
    2086:	f003 f8aa 	bl	51de <soc_port_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    208a:	e7d1      	b.n	2030 <pinctrl_configure_pins+0xc>
    208c:	000063ad 	.word	0x000063ad
    2090:	000063df 	.word	0x000063df
    2094:	00005d0d 	.word	0x00005d0d
    2098:	000058b4 	.word	0x000058b4

0000209c <uart_sam0_init>:

	SercomUsart * const usart = cfg->regs;

#ifdef MCLK
	/* Enable the GCLK */
	GCLK->PCHCTRL[cfg->gclk_core_id].reg = GCLK_PCHCTRL_GEN_GCLK0 |
    209c:	2140      	movs	r1, #64	; 0x40
{
    209e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uart_sam0_dev_data *const dev_data = dev->data;
    20a0:	6903      	ldr	r3, [r0, #16]
	const struct uart_sam0_dev_cfg *const cfg = dev->config;
    20a2:	6845      	ldr	r5, [r0, #4]
{
    20a4:	b085      	sub	sp, #20
    20a6:	9000      	str	r0, [sp, #0]
	struct uart_sam0_dev_data *const dev_data = dev->data;
    20a8:	9301      	str	r3, [sp, #4]
	GCLK->PCHCTRL[cfg->gclk_core_id].reg = GCLK_PCHCTRL_GEN_GCLK0 |
    20aa:	8b2b      	ldrh	r3, [r5, #24]
    20ac:	4a2e      	ldr	r2, [pc, #184]	; (2168 <uart_sam0_init+0xcc>)
    20ae:	3320      	adds	r3, #32
    20b0:	009b      	lsls	r3, r3, #2
	SercomUsart * const usart = cfg->regs;
    20b2:	682c      	ldr	r4, [r5, #0]
	GCLK->PCHCTRL[cfg->gclk_core_id].reg = GCLK_PCHCTRL_GEN_GCLK0 |
    20b4:	5099      	str	r1, [r3, r2]
					       GCLK_PCHCTRL_CHEN;

	/* Enable SERCOM clock in MCLK */
	*cfg->mclk |= cfg->mclk_mask;
    20b6:	692a      	ldr	r2, [r5, #16]
    20b8:	6969      	ldr	r1, [r5, #20]
    20ba:	6813      	ldr	r3, [r2, #0]
	PM->APBCMASK.reg |= cfg->pm_apbcmask;
#endif

	/* Disable all USART interrupts */
	usart->INTENCLR.reg = SERCOM_USART_INTENCLR_MASK;
	wait_synchronization(usart);
    20bc:	0020      	movs	r0, r4
	*cfg->mclk |= cfg->mclk_mask;
    20be:	430b      	orrs	r3, r1
    20c0:	6013      	str	r3, [r2, #0]
	usart->INTENCLR.reg = SERCOM_USART_INTENCLR_MASK;
    20c2:	23bf      	movs	r3, #191	; 0xbf
    20c4:	7523      	strb	r3, [r4, #20]
	wait_synchronization(usart);
    20c6:	f003 f96f 	bl	53a8 <wait_synchronization>
#if defined(SERCOM_USART_CTRLA_SAMPR)
	    /* 16x oversampling with arithmetic baud rate generation */
	    | SERCOM_USART_CTRLA_SAMPR(0)
#endif
	    | SERCOM_USART_CTRLA_FORM(0) |
	    SERCOM_USART_CTRLA_CPOL | SERCOM_USART_CTRLA_DORD;
    20ca:	68aa      	ldr	r2, [r5, #8]
    20cc:	4b27      	ldr	r3, [pc, #156]	; (216c <uart_sam0_init+0xd0>)
	wait_synchronization(usart);
    20ce:	0020      	movs	r0, r4
	    SERCOM_USART_CTRLA_CPOL | SERCOM_USART_CTRLA_DORD;
    20d0:	4313      	orrs	r3, r2
	usart->CTRLA.reg =
    20d2:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    20d4:	f003 f968 	bl	53a8 <wait_synchronization>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    20d8:	2100      	movs	r1, #0
    20da:	6a28      	ldr	r0, [r5, #32]
    20dc:	aa03      	add	r2, sp, #12
    20de:	f003 f950 	bl	5382 <pinctrl_lookup_state>
	if (ret < 0) {
    20e2:	2800      	cmp	r0, #0
    20e4:	db3b      	blt.n	215e <uart_sam0_init+0xc2>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    20e6:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    20e8:	2200      	movs	r2, #0
    20ea:	7919      	ldrb	r1, [r3, #4]
    20ec:	6818      	ldr	r0, [r3, #0]
    20ee:	f7ff ff99 	bl	2024 <pinctrl_configure_pins>

	/* Enable PINMUX based on PINCTRL */
	retval = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (retval < 0) {
    20f2:	2800      	cmp	r0, #0
    20f4:	db33      	blt.n	215e <uart_sam0_init+0xc2>
		return retval;
	}

	dev_data->config_cache.flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
	dev_data->config_cache.parity = UART_CFG_PARITY_NONE;
    20f6:	9a01      	ldr	r2, [sp, #4]
    20f8:	4b1d      	ldr	r3, [pc, #116]	; (2170 <uart_sam0_init+0xd4>)
	dev_data->config_cache.data_bits = UART_CFG_DATA_BITS_8;

	/* Enable receiver and transmitter */
	usart->CTRLB.reg = SERCOM_USART_CTRLB_CHSIZE(0) |
			   SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN;
	wait_synchronization(usart);
    20fa:	0020      	movs	r0, r4
	dev_data->config_cache.parity = UART_CFG_PARITY_NONE;
    20fc:	6053      	str	r3, [r2, #4]
	usart->CTRLB.reg = SERCOM_USART_CTRLB_CHSIZE(0) |
    20fe:	3b01      	subs	r3, #1
    2100:	3bff      	subs	r3, #255	; 0xff
    2102:	6063      	str	r3, [r4, #4]
	wait_synchronization(usart);
    2104:	f003 f950 	bl	53a8 <wait_synchronization>
	tmp = (uint64_t)baudrate << 20;
    2108:	6869      	ldr	r1, [r5, #4]
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    210a:	481a      	ldr	r0, [pc, #104]	; (2174 <uart_sam0_init+0xd8>)
	tmp = (uint64_t)baudrate << 20;
    210c:	0b0b      	lsrs	r3, r1, #12
    210e:	050a      	lsls	r2, r1, #20
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    2110:	2100      	movs	r1, #0
    2112:	1880      	adds	r0, r0, r2
    2114:	4159      	adcs	r1, r3
    2116:	2300      	movs	r3, #0
    2118:	4a17      	ldr	r2, [pc, #92]	; (2178 <uart_sam0_init+0xdc>)
    211a:	f7fe f89f 	bl	25c <__aeabi_uldivmod>
	if (tmp < 1 || tmp > UINT16_MAX) {
    211e:	2601      	movs	r6, #1
    2120:	4276      	negs	r6, r6
    2122:	17f7      	asrs	r7, r6, #31
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    2124:	0002      	movs	r2, r0
    2126:	000b      	movs	r3, r1
	if (tmp < 1 || tmp > UINT16_MAX) {
    2128:	18b6      	adds	r6, r6, r2
    212a:	415f      	adcs	r7, r3
    212c:	2f00      	cmp	r7, #0
    212e:	d118      	bne.n	2162 <uart_sam0_init+0xc6>
    2130:	4912      	ldr	r1, [pc, #72]	; (217c <uart_sam0_init+0xe0>)
    2132:	428e      	cmp	r6, r1
    2134:	d815      	bhi.n	2162 <uart_sam0_init+0xc6>
	baud = 65536 - (uint16_t)tmp;
    2136:	4252      	negs	r2, r2
    2138:	b292      	uxth	r2, r2
	wait_synchronization(usart);
    213a:	0020      	movs	r0, r4
	usart->BAUD.reg = baud;
    213c:	81a2      	strh	r2, [r4, #12]
	wait_synchronization(usart);
    213e:	f003 f933 	bl	53a8 <wait_synchronization>
	retval = uart_sam0_set_baudrate(usart, cfg->baudrate,
					SOC_ATMEL_SAM0_GCLK0_FREQ_HZ);
	if (retval != 0) {
		return retval;
	}
	dev_data->config_cache.baudrate = cfg->baudrate;
    2142:	686b      	ldr	r3, [r5, #4]
    2144:	9a01      	ldr	r2, [sp, #4]

#if CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API
	cfg->irq_config_func(dev);
    2146:	9800      	ldr	r0, [sp, #0]
	dev_data->config_cache.baudrate = cfg->baudrate;
    2148:	6013      	str	r3, [r2, #0]
	cfg->irq_config_func(dev);
    214a:	69eb      	ldr	r3, [r5, #28]
    214c:	4798      	blx	r3
		}
	}

#endif

	usart->CTRLA.bit.ENABLE = 1;
    214e:	2302      	movs	r3, #2
    2150:	6822      	ldr	r2, [r4, #0]
	wait_synchronization(usart);
    2152:	0020      	movs	r0, r4
	usart->CTRLA.bit.ENABLE = 1;
    2154:	4313      	orrs	r3, r2
    2156:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    2158:	f003 f926 	bl	53a8 <wait_synchronization>

	return 0;
    215c:	0038      	movs	r0, r7
}
    215e:	b005      	add	sp, #20
    2160:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ERANGE;
    2162:	2022      	movs	r0, #34	; 0x22
    2164:	4240      	negs	r0, r0
    2166:	e7fa      	b.n	215e <uart_sam0_init+0xc2>
    2168:	40001c00 	.word	0x40001c00
    216c:	60000004 	.word	0x60000004
    2170:	00030100 	.word	0x00030100
    2174:	016e3600 	.word	0x016e3600
    2178:	02dc6c00 	.word	0x02dc6c00
    217c:	0000fffe 	.word	0x0000fffe

00002180 <uart_sam0_configure>:
{
    2180:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uart_sam0_dev_data *const dev_data = dev->data;
    2182:	6903      	ldr	r3, [r0, #16]
{
    2184:	b085      	sub	sp, #20
	struct uart_sam0_dev_data *const dev_data = dev->data;
    2186:	9301      	str	r3, [sp, #4]
	SercomUsart * const usart = cfg->regs;
    2188:	6843      	ldr	r3, [r0, #4]
{
    218a:	000d      	movs	r5, r1
	SercomUsart * const usart = cfg->regs;
    218c:	681c      	ldr	r4, [r3, #0]
	wait_synchronization(usart);
    218e:	0020      	movs	r0, r4
    2190:	f003 f90a 	bl	53a8 <wait_synchronization>
	usart->CTRLA.bit.ENABLE = 0;
    2194:	2202      	movs	r2, #2
    2196:	6823      	ldr	r3, [r4, #0]
	wait_synchronization(usart);
    2198:	0020      	movs	r0, r4
	usart->CTRLA.bit.ENABLE = 0;
    219a:	4393      	bics	r3, r2
    219c:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    219e:	f003 f903 	bl	53a8 <wait_synchronization>
	if (new_cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
    21a2:	79ea      	ldrb	r2, [r5, #7]
    21a4:	2a00      	cmp	r2, #0
    21a6:	d10d      	bne.n	21c4 <uart_sam0_configure+0x44>
	dev_data->config_cache.flow_ctrl = new_cfg->flow_ctrl;
    21a8:	9b01      	ldr	r3, [sp, #4]
    21aa:	71da      	strb	r2, [r3, #7]
	SERCOM_USART_CTRLA_Type CTRLA_temp = usart->CTRLA;
    21ac:	6821      	ldr	r1, [r4, #0]
	SERCOM_USART_CTRLB_Type CTRLB_temp = usart->CTRLB;
    21ae:	6866      	ldr	r6, [r4, #4]
    21b0:	04b3      	lsls	r3, r6, #18
    21b2:	0fdb      	lsrs	r3, r3, #31
    21b4:	9302      	str	r3, [sp, #8]
	switch (new_cfg->parity) {
    21b6:	792b      	ldrb	r3, [r5, #4]
    21b8:	2b01      	cmp	r3, #1
    21ba:	d006      	beq.n	21ca <uart_sam0_configure+0x4a>
    21bc:	2b02      	cmp	r3, #2
    21be:	d007      	beq.n	21d0 <uart_sam0_configure+0x50>
    21c0:	2b00      	cmp	r3, #0
    21c2:	d003      	beq.n	21cc <uart_sam0_configure+0x4c>
		return -ENOTSUP;
    21c4:	2086      	movs	r0, #134	; 0x86
		return -ERANGE;
    21c6:	4240      	negs	r0, r0
    21c8:	e059      	b.n	227e <uart_sam0_configure+0xfe>
		CTRLB_temp.bit.PMODE = 1;
    21ca:	9302      	str	r3, [sp, #8]
	switch (new_cfg->parity) {
    21cc:	001a      	movs	r2, r3
    21ce:	e001      	b.n	21d4 <uart_sam0_configure+0x54>
		CTRLB_temp.bit.PMODE = 0;
    21d0:	9202      	str	r2, [sp, #8]
		CTRLA_temp.bit.FORM = 0x1;
    21d2:	2201      	movs	r2, #1
	dev_data->config_cache.parity = new_cfg->parity;
    21d4:	9801      	ldr	r0, [sp, #4]
    21d6:	7103      	strb	r3, [r0, #4]
	switch (new_cfg->stop_bits) {
    21d8:	796b      	ldrb	r3, [r5, #5]
    21da:	2b01      	cmp	r3, #1
    21dc:	d051      	beq.n	2282 <uart_sam0_configure+0x102>
		CTRLB_temp.bit.SBMODE = 1;
    21de:	2001      	movs	r0, #1
	switch (new_cfg->stop_bits) {
    21e0:	2b03      	cmp	r3, #3
    21e2:	d1ef      	bne.n	21c4 <uart_sam0_configure+0x44>
    21e4:	9003      	str	r0, [sp, #12]
	dev_data->config_cache.stop_bits = new_cfg->stop_bits;
    21e6:	9801      	ldr	r0, [sp, #4]
    21e8:	7143      	strb	r3, [r0, #5]
	switch (new_cfg->data_bits) {
    21ea:	79af      	ldrb	r7, [r5, #6]
    21ec:	2f04      	cmp	r7, #4
    21ee:	d8e9      	bhi.n	21c4 <uart_sam0_configure+0x44>
	usart->CTRLA = CTRLA_temp;
    21f0:	4b26      	ldr	r3, [pc, #152]	; (228c <uart_sam0_configure+0x10c>)
    21f2:	0612      	lsls	r2, r2, #24
    21f4:	4019      	ands	r1, r3
    21f6:	4311      	orrs	r1, r2
	dev_data->config_cache.data_bits = new_cfg->data_bits;
    21f8:	7187      	strb	r7, [r0, #6]
	wait_synchronization(usart);
    21fa:	0020      	movs	r0, r4
	usart->CTRLA = CTRLA_temp;
    21fc:	6021      	str	r1, [r4, #0]
	wait_synchronization(usart);
    21fe:	f003 f8d3 	bl	53a8 <wait_synchronization>
	usart->CTRLB = CTRLB_temp;
    2202:	9b03      	ldr	r3, [sp, #12]
    2204:	2107      	movs	r1, #7
    2206:	019a      	lsls	r2, r3, #6
    2208:	003b      	movs	r3, r7
    220a:	400b      	ands	r3, r1
    220c:	3305      	adds	r3, #5
    220e:	400b      	ands	r3, r1
    2210:	4313      	orrs	r3, r2
    2212:	9a02      	ldr	r2, [sp, #8]
	wait_synchronization(usart);
    2214:	0020      	movs	r0, r4
	usart->CTRLB = CTRLB_temp;
    2216:	0352      	lsls	r2, r2, #13
    2218:	4313      	orrs	r3, r2
    221a:	4a1d      	ldr	r2, [pc, #116]	; (2290 <uart_sam0_configure+0x110>)
    221c:	4032      	ands	r2, r6
    221e:	4313      	orrs	r3, r2
    2220:	0c36      	lsrs	r6, r6, #16
    2222:	b29b      	uxth	r3, r3
    2224:	0436      	lsls	r6, r6, #16
    2226:	431e      	orrs	r6, r3
    2228:	6066      	str	r6, [r4, #4]
	wait_synchronization(usart);
    222a:	f003 f8bd 	bl	53a8 <wait_synchronization>
	tmp = (uint64_t)baudrate << 20;
    222e:	682b      	ldr	r3, [r5, #0]
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    2230:	4a18      	ldr	r2, [pc, #96]	; (2294 <uart_sam0_configure+0x114>)
	tmp = (uint64_t)baudrate << 20;
    2232:	0b19      	lsrs	r1, r3, #12
    2234:	0518      	lsls	r0, r3, #20
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    2236:	2300      	movs	r3, #0
    2238:	1880      	adds	r0, r0, r2
    223a:	4159      	adcs	r1, r3
    223c:	2300      	movs	r3, #0
    223e:	4a16      	ldr	r2, [pc, #88]	; (2298 <uart_sam0_configure+0x118>)
    2240:	f7fe f80c 	bl	25c <__aeabi_uldivmod>
	if (tmp < 1 || tmp > UINT16_MAX) {
    2244:	2601      	movs	r6, #1
    2246:	4276      	negs	r6, r6
    2248:	17f7      	asrs	r7, r6, #31
	tmp = (tmp + (clk_freq_hz >> 1)) / clk_freq_hz;
    224a:	0002      	movs	r2, r0
    224c:	000b      	movs	r3, r1
	if (tmp < 1 || tmp > UINT16_MAX) {
    224e:	18b6      	adds	r6, r6, r2
    2250:	415f      	adcs	r7, r3
    2252:	2f00      	cmp	r7, #0
    2254:	d117      	bne.n	2286 <uart_sam0_configure+0x106>
    2256:	4911      	ldr	r1, [pc, #68]	; (229c <uart_sam0_configure+0x11c>)
    2258:	428e      	cmp	r6, r1
    225a:	d814      	bhi.n	2286 <uart_sam0_configure+0x106>
	baud = 65536 - (uint16_t)tmp;
    225c:	4252      	negs	r2, r2
    225e:	b292      	uxth	r2, r2
	wait_synchronization(usart);
    2260:	0020      	movs	r0, r4
	usart->BAUD.reg = baud;
    2262:	81a2      	strh	r2, [r4, #12]
	wait_synchronization(usart);
    2264:	f003 f8a0 	bl	53a8 <wait_synchronization>
	dev_data->config_cache.baudrate = new_cfg->baudrate;
    2268:	682b      	ldr	r3, [r5, #0]
    226a:	9a01      	ldr	r2, [sp, #4]
	wait_synchronization(usart);
    226c:	0020      	movs	r0, r4
	dev_data->config_cache.baudrate = new_cfg->baudrate;
    226e:	6013      	str	r3, [r2, #0]
	usart->CTRLA.bit.ENABLE = 1;
    2270:	2302      	movs	r3, #2
    2272:	6822      	ldr	r2, [r4, #0]
    2274:	4313      	orrs	r3, r2
    2276:	6023      	str	r3, [r4, #0]
	wait_synchronization(usart);
    2278:	f003 f896 	bl	53a8 <wait_synchronization>
	return 0;
    227c:	0038      	movs	r0, r7
}
    227e:	b005      	add	sp, #20
    2280:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (new_cfg->stop_bits) {
    2282:	2000      	movs	r0, #0
    2284:	e7ae      	b.n	21e4 <uart_sam0_configure+0x64>
		return -ERANGE;
    2286:	2022      	movs	r0, #34	; 0x22
    2288:	e79d      	b.n	21c6 <uart_sam0_configure+0x46>
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	f0ffffff 	.word	0xf0ffffff
    2290:	ffffdfb8 	.word	0xffffdfb8
    2294:	016e3600 	.word	0x016e3600
    2298:	02dc6c00 	.word	0x02dc6c00
    229c:	0000fffe 	.word	0x0000fffe

000022a0 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
    22a0:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
    22a2:	4b0a      	ldr	r3, [pc, #40]	; (22cc <elapsed+0x2c>)
    22a4:	4a0a      	ldr	r2, [pc, #40]	; (22d0 <elapsed+0x30>)
    22a6:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    22a8:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
    22aa:	4d0a      	ldr	r5, [pc, #40]	; (22d4 <elapsed+0x34>)
    22ac:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    22ae:	03c9      	lsls	r1, r1, #15
    22b0:	d401      	bmi.n	22b6 <elapsed+0x16>
	    || (val1 < val2)) {
    22b2:	42a0      	cmp	r0, r4
    22b4:	d204      	bcs.n	22c0 <elapsed+0x20>
		overflow_cyc += last_load;
    22b6:	6811      	ldr	r1, [r2, #0]
    22b8:	6828      	ldr	r0, [r5, #0]
    22ba:	1809      	adds	r1, r1, r0
    22bc:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    22be:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
    22c0:	682b      	ldr	r3, [r5, #0]
    22c2:	6810      	ldr	r0, [r2, #0]
    22c4:	18c0      	adds	r0, r0, r3
    22c6:	1b00      	subs	r0, r0, r4
}
    22c8:	bd30      	pop	{r4, r5, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	e000e010 	.word	0xe000e010
    22d0:	20000968 	.word	0x20000968
    22d4:	20000974 	.word	0x20000974

000022d8 <sys_clock_driver_init>:
static int sys_clock_driver_init(void)
{

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
    22d8:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    22da:	4a09      	ldr	r2, [pc, #36]	; (2300 <sys_clock_driver_init+0x28>)
    22dc:	6a13      	ldr	r3, [r2, #32]
    22de:	021b      	lsls	r3, r3, #8
    22e0:	0a1b      	lsrs	r3, r3, #8
    22e2:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
    22e4:	4b07      	ldr	r3, [pc, #28]	; (2304 <sys_clock_driver_init+0x2c>)
    22e6:	4a08      	ldr	r2, [pc, #32]	; (2308 <sys_clock_driver_init+0x30>)
    22e8:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
    22ea:	4b08      	ldr	r3, [pc, #32]	; (230c <sys_clock_driver_init+0x34>)
    22ec:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    22ee:	4b08      	ldr	r3, [pc, #32]	; (2310 <sys_clock_driver_init+0x38>)
    22f0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    22f2:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
    22f4:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    22f6:	6819      	ldr	r1, [r3, #0]
    22f8:	430a      	orrs	r2, r1
    22fa:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    22fc:	4770      	bx	lr
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	e000ed00 	.word	0xe000ed00
    2304:	20000974 	.word	0x20000974
    2308:	000012bf 	.word	0x000012bf
    230c:	20000968 	.word	0x20000968
    2310:	e000e010 	.word	0xe000e010

00002314 <sys_clock_isr>:
{
    2314:	b570      	push	{r4, r5, r6, lr}
	elapsed();
    2316:	f7ff ffc3 	bl	22a0 <elapsed>
	cycle_count += overflow_cyc;
    231a:	4b0c      	ldr	r3, [pc, #48]	; (234c <sys_clock_isr+0x38>)
    231c:	4a0c      	ldr	r2, [pc, #48]	; (2350 <sys_clock_isr+0x3c>)
    231e:	6818      	ldr	r0, [r3, #0]
    2320:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2322:	4c0c      	ldr	r4, [pc, #48]	; (2354 <sys_clock_isr+0x40>)
	cycle_count += overflow_cyc;
    2324:	1840      	adds	r0, r0, r1
    2326:	6010      	str	r0, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2328:	2196      	movs	r1, #150	; 0x96
	overflow_cyc = 0;
    232a:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    232c:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
    232e:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2330:	0149      	lsls	r1, r1, #5
    2332:	1b40      	subs	r0, r0, r5
    2334:	f7fd fed8 	bl	e8 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
    2338:	2396      	movs	r3, #150	; 0x96
    233a:	015b      	lsls	r3, r3, #5
    233c:	4343      	muls	r3, r0
    233e:	195b      	adds	r3, r3, r5
    2340:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
    2342:	f002 f871 	bl	4428 <sys_clock_announce>
	z_arm_int_exit();
    2346:	f7fe fedd 	bl	1104 <z_arm_exc_exit>
}
    234a:	bd70      	pop	{r4, r5, r6, pc}
    234c:	20000968 	.word	0x20000968
    2350:	20000970 	.word	0x20000970
    2354:	2000096c 	.word	0x2000096c

00002358 <sys_clock_set_timeout>:
{
    2358:	b5f0      	push	{r4, r5, r6, r7, lr}
    235a:	4e49      	ldr	r6, [pc, #292]	; (2480 <sys_clock_set_timeout+0x128>)
    235c:	4f49      	ldr	r7, [pc, #292]	; (2484 <sys_clock_set_timeout+0x12c>)
    235e:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    2360:	2900      	cmp	r1, #0
    2362:	d02d      	beq.n	23c0 <sys_clock_set_timeout+0x68>
    2364:	1c43      	adds	r3, r0, #1
    2366:	d108      	bne.n	237a <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    2368:	2201      	movs	r2, #1
    236a:	6833      	ldr	r3, [r6, #0]
    236c:	4393      	bics	r3, r2
    236e:	6033      	str	r3, [r6, #0]
		last_load = TIMER_STOPPED;
    2370:	23ff      	movs	r3, #255	; 0xff
    2372:	061b      	lsls	r3, r3, #24
    2374:	603b      	str	r3, [r7, #0]
}
    2376:	b005      	add	sp, #20
    2378:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
    237a:	683b      	ldr	r3, [r7, #0]
    237c:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    237e:	2400      	movs	r4, #0
    2380:	2801      	cmp	r0, #1
    2382:	dd04      	ble.n	238e <sys_clock_set_timeout+0x36>
    2384:	4b40      	ldr	r3, [pc, #256]	; (2488 <sys_clock_set_timeout+0x130>)
    2386:	001c      	movs	r4, r3
    2388:	4298      	cmp	r0, r3
    238a:	dc00      	bgt.n	238e <sys_clock_set_timeout+0x36>
    238c:	1e44      	subs	r4, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
    238e:	f3ef 8310 	mrs	r3, PRIMASK
    2392:	b672      	cpsid	i
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2394:	4d3d      	ldr	r5, [pc, #244]	; (248c <sys_clock_set_timeout+0x134>)
    2396:	9303      	str	r3, [sp, #12]
    2398:	0028      	movs	r0, r5
    239a:	f000 fbc3 	bl	2b24 <z_spin_lock_valid>
    239e:	2800      	cmp	r0, #0
    23a0:	d114      	bne.n	23cc <sys_clock_set_timeout+0x74>
    23a2:	4c3b      	ldr	r4, [pc, #236]	; (2490 <sys_clock_set_timeout+0x138>)
    23a4:	2394      	movs	r3, #148	; 0x94
    23a6:	0022      	movs	r2, r4
    23a8:	493a      	ldr	r1, [pc, #232]	; (2494 <sys_clock_set_timeout+0x13c>)
    23aa:	483b      	ldr	r0, [pc, #236]	; (2498 <sys_clock_set_timeout+0x140>)
    23ac:	f002 fef1 	bl	5192 <assert_print>
    23b0:	0029      	movs	r1, r5
    23b2:	483a      	ldr	r0, [pc, #232]	; (249c <sys_clock_set_timeout+0x144>)
    23b4:	f002 feed 	bl	5192 <assert_print>
    23b8:	2194      	movs	r1, #148	; 0x94
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    23ba:	0020      	movs	r0, r4
    23bc:	f002 fee5 	bl	518a <assert_post_action>
	uint32_t last_load_ = last_load;
    23c0:	683b      	ldr	r3, [r7, #0]
    23c2:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    23c4:	1c43      	adds	r3, r0, #1
    23c6:	d1da      	bne.n	237e <sys_clock_set_timeout+0x26>
    23c8:	482f      	ldr	r0, [pc, #188]	; (2488 <sys_clock_set_timeout+0x130>)
    23ca:	e7df      	b.n	238c <sys_clock_set_timeout+0x34>
	z_spin_lock_set_owner(l);
    23cc:	0028      	movs	r0, r5
    23ce:	f000 fbc7 	bl	2b60 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    23d2:	f7ff ff65 	bl	22a0 <elapsed>
	overflow_cyc = 0U;
    23d6:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
    23d8:	68b3      	ldr	r3, [r6, #8]
    23da:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
    23dc:	4b30      	ldr	r3, [pc, #192]	; (24a0 <sys_clock_set_timeout+0x148>)
    23de:	681d      	ldr	r5, [r3, #0]
	overflow_cyc = 0U;
    23e0:	4b30      	ldr	r3, [pc, #192]	; (24a4 <sys_clock_set_timeout+0x14c>)
	cycle_count += pending;
    23e2:	1945      	adds	r5, r0, r5
	overflow_cyc = 0U;
    23e4:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    23e6:	4b30      	ldr	r3, [pc, #192]	; (24a8 <sys_clock_set_timeout+0x150>)
    23e8:	681b      	ldr	r3, [r3, #0]
    23ea:	9300      	str	r3, [sp, #0]
    23ec:	1aeb      	subs	r3, r5, r3
	if ((int32_t)unannounced < 0) {
    23ee:	4293      	cmp	r3, r2
    23f0:	db39      	blt.n	2466 <sys_clock_set_timeout+0x10e>
		delay = ticks * CYC_PER_TICK;
    23f2:	2296      	movs	r2, #150	; 0x96
    23f4:	0152      	lsls	r2, r2, #5
    23f6:	4354      	muls	r4, r2
		delay = DIV_ROUND_UP(delay, CYC_PER_TICK) * CYC_PER_TICK;
    23f8:	492c      	ldr	r1, [pc, #176]	; (24ac <sys_clock_set_timeout+0x154>)
    23fa:	1860      	adds	r0, r4, r1
    23fc:	18c0      	adds	r0, r0, r3
    23fe:	0011      	movs	r1, r2
    2400:	f7fd fe72 	bl	e8 <__udivsi3>
    2404:	2296      	movs	r2, #150	; 0x96
    2406:	0152      	lsls	r2, r2, #5
    2408:	4350      	muls	r0, r2
		delay -= unannounced;
    240a:	9b00      	ldr	r3, [sp, #0]
    240c:	1b5b      	subs	r3, r3, r5
    240e:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
    2410:	2380      	movs	r3, #128	; 0x80
    2412:	00db      	lsls	r3, r3, #3
    2414:	4298      	cmp	r0, r3
    2416:	d929      	bls.n	246c <sys_clock_set_timeout+0x114>
		if (delay > MAX_CYCLES) {
    2418:	4b25      	ldr	r3, [pc, #148]	; (24b0 <sys_clock_set_timeout+0x158>)
    241a:	4298      	cmp	r0, r3
    241c:	d826      	bhi.n	246c <sys_clock_set_timeout+0x114>
	SysTick->VAL = 0; /* resets timer to last_load */
    241e:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
    2420:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
    2422:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
    2424:	68b1      	ldr	r1, [r6, #8]
	SysTick->LOAD = last_load - 1;
    2426:	6070      	str	r0, [r6, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    2428:	60b3      	str	r3, [r6, #8]
	if (val1 < val2) {
    242a:	9b02      	ldr	r3, [sp, #8]
    242c:	9802      	ldr	r0, [sp, #8]
    242e:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
    2430:	195a      	adds	r2, r3, r5
	if (val1 < val2) {
    2432:	4288      	cmp	r0, r1
    2434:	d202      	bcs.n	243c <sys_clock_set_timeout+0xe4>
		cycle_count += (val1 + (last_load_ - val2));
    2436:	9a01      	ldr	r2, [sp, #4]
    2438:	189b      	adds	r3, r3, r2
    243a:	195a      	adds	r2, r3, r5
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    243c:	4d13      	ldr	r5, [pc, #76]	; (248c <sys_clock_set_timeout+0x134>)
    243e:	4b18      	ldr	r3, [pc, #96]	; (24a0 <sys_clock_set_timeout+0x148>)
    2440:	0028      	movs	r0, r5
    2442:	601a      	str	r2, [r3, #0]
    2444:	f000 fb7e 	bl	2b44 <z_spin_unlock_valid>
    2448:	2800      	cmp	r0, #0
    244a:	d111      	bne.n	2470 <sys_clock_set_timeout+0x118>
    244c:	4c10      	ldr	r4, [pc, #64]	; (2490 <sys_clock_set_timeout+0x138>)
    244e:	23c3      	movs	r3, #195	; 0xc3
    2450:	0022      	movs	r2, r4
    2452:	4918      	ldr	r1, [pc, #96]	; (24b4 <sys_clock_set_timeout+0x15c>)
    2454:	4810      	ldr	r0, [pc, #64]	; (2498 <sys_clock_set_timeout+0x140>)
    2456:	f002 fe9c 	bl	5192 <assert_print>
    245a:	0029      	movs	r1, r5
    245c:	4816      	ldr	r0, [pc, #88]	; (24b8 <sys_clock_set_timeout+0x160>)
    245e:	f002 fe98 	bl	5192 <assert_print>
    2462:	21c3      	movs	r1, #195	; 0xc3
    2464:	e7a9      	b.n	23ba <sys_clock_set_timeout+0x62>
    2466:	2080      	movs	r0, #128	; 0x80
    2468:	00c0      	lsls	r0, r0, #3
    246a:	e7d8      	b.n	241e <sys_clock_set_timeout+0xc6>
    246c:	0018      	movs	r0, r3
    246e:	e7d6      	b.n	241e <sys_clock_set_timeout+0xc6>
	if (key != 0U) {
    2470:	9b03      	ldr	r3, [sp, #12]
    2472:	2b00      	cmp	r3, #0
    2474:	d000      	beq.n	2478 <sys_clock_set_timeout+0x120>
    2476:	e77e      	b.n	2376 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
    2478:	b662      	cpsie	i
    247a:	f3bf 8f6f 	isb	sy
    247e:	e77a      	b.n	2376 <sys_clock_set_timeout+0x1e>
    2480:	e000e010 	.word	0xe000e010
    2484:	20000974 	.word	0x20000974
    2488:	00000da6 	.word	0x00000da6
    248c:	20000978 	.word	0x20000978
    2490:	000064e1 	.word	0x000064e1
    2494:	0000650e 	.word	0x0000650e
    2498:	00005d0d 	.word	0x00005d0d
    249c:	00006523 	.word	0x00006523
    24a0:	20000970 	.word	0x20000970
    24a4:	20000968 	.word	0x20000968
    24a8:	2000096c 	.word	0x2000096c
    24ac:	000012bf 	.word	0x000012bf
    24b0:	00ffe880 	.word	0x00ffe880
    24b4:	0000653b 	.word	0x0000653b
    24b8:	00006552 	.word	0x00006552

000024bc <sys_clock_elapsed>:
{
    24bc:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    24be:	f3ef 8610 	mrs	r6, PRIMASK
    24c2:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    24c4:	4d1e      	ldr	r5, [pc, #120]	; (2540 <sys_clock_elapsed+0x84>)
    24c6:	0028      	movs	r0, r5
    24c8:	f000 fb2c 	bl	2b24 <z_spin_lock_valid>
    24cc:	2800      	cmp	r0, #0
    24ce:	d10e      	bne.n	24ee <sys_clock_elapsed+0x32>
    24d0:	4c1c      	ldr	r4, [pc, #112]	; (2544 <sys_clock_elapsed+0x88>)
    24d2:	2394      	movs	r3, #148	; 0x94
    24d4:	0022      	movs	r2, r4
    24d6:	491c      	ldr	r1, [pc, #112]	; (2548 <sys_clock_elapsed+0x8c>)
    24d8:	481c      	ldr	r0, [pc, #112]	; (254c <sys_clock_elapsed+0x90>)
    24da:	f002 fe5a 	bl	5192 <assert_print>
    24de:	0029      	movs	r1, r5
    24e0:	481b      	ldr	r0, [pc, #108]	; (2550 <sys_clock_elapsed+0x94>)
    24e2:	f002 fe56 	bl	5192 <assert_print>
    24e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    24e8:	0020      	movs	r0, r4
    24ea:	f002 fe4e 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    24ee:	0028      	movs	r0, r5
    24f0:	f000 fb36 	bl	2b60 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    24f4:	f7ff fed4 	bl	22a0 <elapsed>
    24f8:	4a16      	ldr	r2, [pc, #88]	; (2554 <sys_clock_elapsed+0x98>)
    24fa:	4b17      	ldr	r3, [pc, #92]	; (2558 <sys_clock_elapsed+0x9c>)
    24fc:	6814      	ldr	r4, [r2, #0]
    24fe:	681b      	ldr	r3, [r3, #0]
    2500:	1ae4      	subs	r4, r4, r3
    2502:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2504:	0028      	movs	r0, r5
    2506:	f000 fb1d 	bl	2b44 <z_spin_unlock_valid>
    250a:	2800      	cmp	r0, #0
    250c:	d10c      	bne.n	2528 <sys_clock_elapsed+0x6c>
    250e:	4c0d      	ldr	r4, [pc, #52]	; (2544 <sys_clock_elapsed+0x88>)
    2510:	23c3      	movs	r3, #195	; 0xc3
    2512:	0022      	movs	r2, r4
    2514:	4911      	ldr	r1, [pc, #68]	; (255c <sys_clock_elapsed+0xa0>)
    2516:	480d      	ldr	r0, [pc, #52]	; (254c <sys_clock_elapsed+0x90>)
    2518:	f002 fe3b 	bl	5192 <assert_print>
    251c:	0029      	movs	r1, r5
    251e:	4810      	ldr	r0, [pc, #64]	; (2560 <sys_clock_elapsed+0xa4>)
    2520:	f002 fe37 	bl	5192 <assert_print>
    2524:	21c3      	movs	r1, #195	; 0xc3
    2526:	e7df      	b.n	24e8 <sys_clock_elapsed+0x2c>
	if (key != 0U) {
    2528:	2e00      	cmp	r6, #0
    252a:	d102      	bne.n	2532 <sys_clock_elapsed+0x76>
	__asm__ volatile(
    252c:	b662      	cpsie	i
    252e:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
    2532:	2196      	movs	r1, #150	; 0x96
    2534:	0020      	movs	r0, r4
    2536:	0149      	lsls	r1, r1, #5
    2538:	f7fd fdd6 	bl	e8 <__udivsi3>
}
    253c:	bd70      	pop	{r4, r5, r6, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	20000978 	.word	0x20000978
    2544:	000064e1 	.word	0x000064e1
    2548:	0000650e 	.word	0x0000650e
    254c:	00005d0d 	.word	0x00005d0d
    2550:	00006523 	.word	0x00006523
    2554:	20000970 	.word	0x20000970
    2558:	2000096c 	.word	0x2000096c
    255c:	0000653b 	.word	0x0000653b
    2560:	00006552 	.word	0x00006552

00002564 <sys_clock_cycle_get_32>:
{
    2564:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    2566:	f3ef 8610 	mrs	r6, PRIMASK
    256a:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    256c:	4c1a      	ldr	r4, [pc, #104]	; (25d8 <sys_clock_cycle_get_32+0x74>)
    256e:	0020      	movs	r0, r4
    2570:	f000 fad8 	bl	2b24 <z_spin_lock_valid>
    2574:	2800      	cmp	r0, #0
    2576:	d10e      	bne.n	2596 <sys_clock_cycle_get_32+0x32>
    2578:	4d18      	ldr	r5, [pc, #96]	; (25dc <sys_clock_cycle_get_32+0x78>)
    257a:	2394      	movs	r3, #148	; 0x94
    257c:	002a      	movs	r2, r5
    257e:	4918      	ldr	r1, [pc, #96]	; (25e0 <sys_clock_cycle_get_32+0x7c>)
    2580:	4818      	ldr	r0, [pc, #96]	; (25e4 <sys_clock_cycle_get_32+0x80>)
    2582:	f002 fe06 	bl	5192 <assert_print>
    2586:	0021      	movs	r1, r4
    2588:	4817      	ldr	r0, [pc, #92]	; (25e8 <sys_clock_cycle_get_32+0x84>)
    258a:	f002 fe02 	bl	5192 <assert_print>
    258e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2590:	0028      	movs	r0, r5
    2592:	f002 fdfa 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    2596:	0020      	movs	r0, r4
    2598:	f000 fae2 	bl	2b60 <z_spin_lock_set_owner>
	uint32_t ret = elapsed() + cycle_count;
    259c:	f7ff fe80 	bl	22a0 <elapsed>
    25a0:	4b12      	ldr	r3, [pc, #72]	; (25ec <sys_clock_cycle_get_32+0x88>)
    25a2:	681d      	ldr	r5, [r3, #0]
    25a4:	1945      	adds	r5, r0, r5
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    25a6:	0020      	movs	r0, r4
    25a8:	f000 facc 	bl	2b44 <z_spin_unlock_valid>
    25ac:	2800      	cmp	r0, #0
    25ae:	d10c      	bne.n	25ca <sys_clock_cycle_get_32+0x66>
    25b0:	4d0a      	ldr	r5, [pc, #40]	; (25dc <sys_clock_cycle_get_32+0x78>)
    25b2:	23c3      	movs	r3, #195	; 0xc3
    25b4:	002a      	movs	r2, r5
    25b6:	490e      	ldr	r1, [pc, #56]	; (25f0 <sys_clock_cycle_get_32+0x8c>)
    25b8:	480a      	ldr	r0, [pc, #40]	; (25e4 <sys_clock_cycle_get_32+0x80>)
    25ba:	f002 fdea 	bl	5192 <assert_print>
    25be:	0021      	movs	r1, r4
    25c0:	480c      	ldr	r0, [pc, #48]	; (25f4 <sys_clock_cycle_get_32+0x90>)
    25c2:	f002 fde6 	bl	5192 <assert_print>
    25c6:	21c3      	movs	r1, #195	; 0xc3
    25c8:	e7e2      	b.n	2590 <sys_clock_cycle_get_32+0x2c>
	if (key != 0U) {
    25ca:	2e00      	cmp	r6, #0
    25cc:	d102      	bne.n	25d4 <sys_clock_cycle_get_32+0x70>
	__asm__ volatile(
    25ce:	b662      	cpsie	i
    25d0:	f3bf 8f6f 	isb	sy
}
    25d4:	0028      	movs	r0, r5
    25d6:	bd70      	pop	{r4, r5, r6, pc}
    25d8:	20000978 	.word	0x20000978
    25dc:	000064e1 	.word	0x000064e1
    25e0:	0000650e 	.word	0x0000650e
    25e4:	00005d0d 	.word	0x00005d0d
    25e8:	00006523 	.word	0x00006523
    25ec:	20000970 	.word	0x20000970
    25f0:	0000653b 	.word	0x0000653b
    25f4:	00006552 	.word	0x00006552

000025f8 <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
    25f8:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(device, dev) {
    25fa:	4b0b      	ldr	r3, [pc, #44]	; (2628 <z_device_state_init+0x30>)
    25fc:	4a0b      	ldr	r2, [pc, #44]	; (262c <z_device_state_init+0x34>)
    25fe:	4293      	cmp	r3, r2
    2600:	d90f      	bls.n	2622 <z_device_state_init+0x2a>
    2602:	4c0b      	ldr	r4, [pc, #44]	; (2630 <z_device_state_init+0x38>)
    2604:	490b      	ldr	r1, [pc, #44]	; (2634 <z_device_state_init+0x3c>)
    2606:	2317      	movs	r3, #23
    2608:	0022      	movs	r2, r4
    260a:	480b      	ldr	r0, [pc, #44]	; (2638 <z_device_state_init+0x40>)
    260c:	f002 fdc1 	bl	5192 <assert_print>
    2610:	480a      	ldr	r0, [pc, #40]	; (263c <z_device_state_init+0x44>)
    2612:	f002 fdbe 	bl	5192 <assert_print>
    2616:	2117      	movs	r1, #23
    2618:	0020      	movs	r0, r4
    261a:	f002 fdb6 	bl	518a <assert_post_action>
    261e:	3318      	adds	r3, #24
    2620:	e7ed      	b.n	25fe <z_device_state_init+0x6>
    2622:	4293      	cmp	r3, r2
    2624:	d3fb      	bcc.n	261e <z_device_state_init+0x26>
		z_object_init(dev);
	}
}
    2626:	bd10      	pop	{r4, pc}
    2628:	0000561c 	.word	0x0000561c
    262c:	000056c4 	.word	0x000056c4
    2630:	00006567 	.word	0x00006567
    2634:	0000658a 	.word	0x0000658a
    2638:	00005d0d 	.word	0x00005d0d
    263c:	000065a2 	.word	0x000065a2

00002640 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    2640:	b510      	push	{r4, lr}
    2642:	0004      	movs	r4, r0
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    2644:	2145      	movs	r1, #69	; 0x45
    2646:	4803      	ldr	r0, [pc, #12]	; (2654 <k_sys_fatal_error_handler+0x14>)
    2648:	f002 fdff 	bl	524a <z_log_minimal_printk>
	arch_system_halt(reason);
    264c:	0020      	movs	r0, r4
    264e:	f002 ff78 	bl	5542 <arch_system_halt>
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	000065c1 	.word	0x000065c1

00002658 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    265a:	0004      	movs	r4, r0
    265c:	000d      	movs	r5, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    265e:	f3ef 8710 	mrs	r7, PRIMASK
    2662:	b672      	cpsid	i
	return z_impl_z_current_get();
    2664:	f001 fbf2 	bl	3e4c <z_impl_z_current_get>
    2668:	4b20      	ldr	r3, [pc, #128]	; (26ec <z_fatal_error+0x94>)
    266a:	0006      	movs	r6, r0
	switch (reason) {
    266c:	2c04      	cmp	r4, #4
    266e:	d802      	bhi.n	2676 <z_fatal_error+0x1e>
    2670:	4b1f      	ldr	r3, [pc, #124]	; (26f0 <z_fatal_error+0x98>)
    2672:	00a2      	lsls	r2, r4, #2
    2674:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    2676:	2200      	movs	r2, #0
    2678:	2145      	movs	r1, #69	; 0x45
    267a:	9200      	str	r2, [sp, #0]
    267c:	481d      	ldr	r0, [pc, #116]	; (26f4 <z_fatal_error+0x9c>)
    267e:	0022      	movs	r2, r4
    2680:	f002 fde3 	bl	524a <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    2684:	2d00      	cmp	r5, #0
    2686:	d006      	beq.n	2696 <z_fatal_error+0x3e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    2688:	69eb      	ldr	r3, [r5, #28]
    268a:	05db      	lsls	r3, r3, #23
    268c:	d003      	beq.n	2696 <z_fatal_error+0x3e>
		LOG_ERR("Fault during interrupt handling\n");
    268e:	2145      	movs	r1, #69	; 0x45
    2690:	4819      	ldr	r0, [pc, #100]	; (26f8 <z_fatal_error+0xa0>)
    2692:	f002 fdda 	bl	524a <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    2696:	2e00      	cmp	r6, #0
    2698:	d007      	beq.n	26aa <z_fatal_error+0x52>
    269a:	0030      	movs	r0, r6
    269c:	f002 ff5d 	bl	555a <k_thread_name_get>
    26a0:	1e03      	subs	r3, r0, #0
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    26a2:	d002      	beq.n	26aa <z_fatal_error+0x52>
    26a4:	7802      	ldrb	r2, [r0, #0]
    26a6:	2a00      	cmp	r2, #0
    26a8:	d100      	bne.n	26ac <z_fatal_error+0x54>
		thread_name = "unknown";
    26aa:	4b14      	ldr	r3, [pc, #80]	; (26fc <z_fatal_error+0xa4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    26ac:	2145      	movs	r1, #69	; 0x45
    26ae:	4814      	ldr	r0, [pc, #80]	; (2700 <z_fatal_error+0xa8>)
    26b0:	0032      	movs	r2, r6
    26b2:	f002 fdca 	bl	524a <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    26b6:	0029      	movs	r1, r5
    26b8:	0020      	movs	r0, r4
    26ba:	f7ff ffc1 	bl	2640 <k_sys_fatal_error_handler>
		}
#endif /* CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	} else {
		/* Test mode */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    26be:	2d00      	cmp	r5, #0
    26c0:	d008      	beq.n	26d4 <z_fatal_error+0x7c>
    26c2:	69eb      	ldr	r3, [r5, #28]
    26c4:	05db      	lsls	r3, r3, #23
    26c6:	d005      	beq.n	26d4 <z_fatal_error+0x7c>
	if (key != 0U) {
    26c8:	2f00      	cmp	r7, #0
    26ca:	d102      	bne.n	26d2 <z_fatal_error+0x7a>
	__asm__ volatile(
    26cc:	b662      	cpsie	i
    26ce:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    26d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			if (reason == K_ERR_SPURIOUS_IRQ) {
    26d4:	2c01      	cmp	r4, #1
    26d6:	d0f7      	beq.n	26c8 <z_fatal_error+0x70>
	if (key != 0U) {
    26d8:	2f00      	cmp	r7, #0
    26da:	d102      	bne.n	26e2 <z_fatal_error+0x8a>
	__asm__ volatile(
    26dc:	b662      	cpsie	i
    26de:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    26e2:	0030      	movs	r0, r6
    26e4:	f7fe fdd2 	bl	128c <z_impl_k_thread_abort>
}
    26e8:	e7f3      	b.n	26d2 <z_fatal_error+0x7a>
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	000065d5 	.word	0x000065d5
    26f0:	000059c4 	.word	0x000059c4
    26f4:	000065eb 	.word	0x000065eb
    26f8:	00006618 	.word	0x00006618
    26fc:	000065e3 	.word	0x000065e3
    2700:	0000663e 	.word	0x0000663e

00002704 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    2704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
					}
					dev->state->init_res = rc;
				}
			}

			dev->state->initialized = true;
    2706:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2708:	4e12      	ldr	r6, [pc, #72]	; (2754 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x44>)
    270a:	0083      	lsls	r3, r0, #2
    270c:	3001      	adds	r0, #1
    270e:	599c      	ldr	r4, [r3, r6]
    2710:	0083      	lsls	r3, r0, #2
    2712:	9301      	str	r3, [sp, #4]
    2714:	9b01      	ldr	r3, [sp, #4]
    2716:	58f3      	ldr	r3, [r6, r3]
    2718:	42a3      	cmp	r3, r4
    271a:	d800      	bhi.n	271e <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0xe>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    271c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
    271e:	6865      	ldr	r5, [r4, #4]
			if (entry->init_fn.dev != NULL) {
    2720:	6823      	ldr	r3, [r4, #0]
		if (dev != NULL) {
    2722:	2d00      	cmp	r5, #0
    2724:	d013      	beq.n	274e <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x3e>
			if (entry->init_fn.dev != NULL) {
    2726:	2b00      	cmp	r3, #0
    2728:	d00b      	beq.n	2742 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x32>
				rc = entry->init_fn.dev(dev);
    272a:	0028      	movs	r0, r5
    272c:	4798      	blx	r3
				if (rc != 0) {
    272e:	2800      	cmp	r0, #0
    2730:	d007      	beq.n	2742 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x32>
					if (rc < 0) {
    2732:	17c2      	asrs	r2, r0, #31
    2734:	1880      	adds	r0, r0, r2
					dev->state->init_res = rc;
    2736:	68eb      	ldr	r3, [r5, #12]
					if (rc < 0) {
    2738:	4050      	eors	r0, r2
					if (rc > UINT8_MAX) {
    273a:	28ff      	cmp	r0, #255	; 0xff
    273c:	dd00      	ble.n	2740 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x30>
    273e:	20ff      	movs	r0, #255	; 0xff
					dev->state->init_res = rc;
    2740:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2742:	68ea      	ldr	r2, [r5, #12]
    2744:	7853      	ldrb	r3, [r2, #1]
    2746:	433b      	orrs	r3, r7
    2748:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    274a:	3408      	adds	r4, #8
    274c:	e7e2      	b.n	2714 <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x4>
			(void)entry->init_fn.sys();
    274e:	4798      	blx	r3
    2750:	e7fb      	b.n	274a <CONFIG_SYS_CLOCK_TICKS_PER_SEC+0x3a>
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	000059d8 	.word	0x000059d8

00002758 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2758:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    275a:	2401      	movs	r4, #1
    275c:	4b0a      	ldr	r3, [pc, #40]	; (2788 <bg_thread_main+0x30>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    275e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    2760:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    2762:	f7ff ffcf 	bl	2704 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    2766:	f001 ff65 	bl	4634 <boot_banner>

#if defined(CONFIG_CPP)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    276a:	f002 fcbe 	bl	50ea <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    276e:	2004      	movs	r0, #4
    2770:	f7ff ffc8 	bl	2704 <z_sys_init_run_level>

	z_init_static_threads();
    2774:	f000 f964 	bl	2a40 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    2778:	f7ff f8b8 	bl	18ec <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    277c:	4a03      	ldr	r2, [pc, #12]	; (278c <bg_thread_main+0x34>)
    277e:	7b13      	ldrb	r3, [r2, #12]
    2780:	43a3      	bics	r3, r4
    2782:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2784:	bd10      	pop	{r4, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	200009f4 	.word	0x200009f4
    278c:	200007f8 	.word	0x200007f8

00002790 <z_bss_zero>:
{
    2790:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    2792:	4a03      	ldr	r2, [pc, #12]	; (27a0 <z_bss_zero+0x10>)
    2794:	4803      	ldr	r0, [pc, #12]	; (27a4 <z_bss_zero+0x14>)
    2796:	2100      	movs	r1, #0
    2798:	1a12      	subs	r2, r2, r0
    279a:	f002 fed6 	bl	554a <z_early_memset>
}
    279e:	bd10      	pop	{r4, pc}
    27a0:	200009f8 	.word	0x200009f8
    27a4:	200006d8 	.word	0x200006d8

000027a8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    27a8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    27aa:	2690      	movs	r6, #144	; 0x90
{
    27ac:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    27ae:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
    27b0:	0201      	lsls	r1, r0, #8
    27b2:	4813      	ldr	r0, [pc, #76]	; (2800 <z_init_cpu+0x58>)
{
    27b4:	b086      	sub	sp, #24
	k_thread_stack_t *stack = z_idle_stacks[i];
    27b6:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
    27b8:	4812      	ldr	r0, [pc, #72]	; (2804 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    27ba:	2514      	movs	r5, #20
	z_setup_new_thread(thread, stack,
    27bc:	9005      	str	r0, [sp, #20]
    27be:	2001      	movs	r0, #1
    27c0:	9004      	str	r0, [sp, #16]
    27c2:	300e      	adds	r0, #14
    27c4:	9003      	str	r0, [sp, #12]
    27c6:	2000      	movs	r0, #0
    27c8:	2280      	movs	r2, #128	; 0x80
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    27ca:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
    27cc:	4b0e      	ldr	r3, [pc, #56]	; (2808 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    27ce:	9002      	str	r0, [sp, #8]
    27d0:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    27d2:	480e      	ldr	r0, [pc, #56]	; (280c <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
    27d4:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    27d6:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
    27d8:	4b0d      	ldr	r3, [pc, #52]	; (2810 <z_init_cpu+0x68>)
    27da:	0030      	movs	r0, r6
    27dc:	9500      	str	r5, [sp, #0]
    27de:	0052      	lsls	r2, r2, #1
    27e0:	f000 f882 	bl	28e8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    27e4:	2204      	movs	r2, #4
    27e6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    27e8:	742c      	strb	r4, [r5, #16]
    27ea:	4393      	bics	r3, r2
    27ec:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    27ee:	3401      	adds	r4, #1
    27f0:	4b08      	ldr	r3, [pc, #32]	; (2814 <z_init_cpu+0x6c>)
    27f2:	02e4      	lsls	r4, r4, #11
    27f4:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    27f6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    27f8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    27fa:	b006      	add	sp, #24
    27fc:	bd70      	pop	{r4, r5, r6, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	200015f8 	.word	0x200015f8
    2804:	000066a5 	.word	0x000066a5
    2808:	20000768 	.word	0x20000768
    280c:	2000097c 	.word	0x2000097c
    2810:	00002b71 	.word	0x00002b71
    2814:	20000df8 	.word	0x20000df8

00002818 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    2818:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    281a:	2000      	movs	r0, #0
{
    281c:	b0ab      	sub	sp, #172	; 0xac
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    281e:	f7ff ff71 	bl	2704 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    2822:	4b21      	ldr	r3, [pc, #132]	; (28a8 <z_cstart+0x90>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2824:	f383 8808 	msr	MSP, r3
    2828:	4920      	ldr	r1, [pc, #128]	; (28ac <z_cstart+0x94>)
    282a:	4b21      	ldr	r3, [pc, #132]	; (28b0 <z_cstart+0x98>)
    282c:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    282e:	2500      	movs	r5, #0
    2830:	401a      	ands	r2, r3
    2832:	23c0      	movs	r3, #192	; 0xc0
    2834:	041b      	lsls	r3, r3, #16
    2836:	4313      	orrs	r3, r2
    2838:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    283a:	f002 fd23 	bl	5284 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    283e:	f7fe fb21 	bl	e84 <z_arm_cpu_idle_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    2842:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    2844:	4e1b      	ldr	r6, [pc, #108]	; (28b4 <z_cstart+0x9c>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    2846:	ab06      	add	r3, sp, #24
    2848:	32ff      	adds	r2, #255	; 0xff
    284a:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
    284c:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
    284e:	9527      	str	r5, [sp, #156]	; 0x9c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2850:	f7ff fed2 	bl	25f8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    2854:	2001      	movs	r0, #1
    2856:	f7ff ff55 	bl	2704 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    285a:	2002      	movs	r0, #2
    285c:	f7ff ff52 	bl	2704 <z_sys_init_run_level>
	z_sched_init();
    2860:	f001 f96a 	bl	3b38 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    2864:	4c14      	ldr	r4, [pc, #80]	; (28b8 <z_cstart+0xa0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2866:	4b15      	ldr	r3, [pc, #84]	; (28bc <z_cstart+0xa4>)
	_kernel.ready_q.cache = &z_main_thread;
    2868:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    286a:	2280      	movs	r2, #128	; 0x80
    286c:	9305      	str	r3, [sp, #20]
    286e:	2301      	movs	r3, #1
    2870:	4e13      	ldr	r6, [pc, #76]	; (28c0 <z_cstart+0xa8>)
    2872:	4914      	ldr	r1, [pc, #80]	; (28c4 <z_cstart+0xac>)
    2874:	9304      	str	r3, [sp, #16]
    2876:	00d2      	lsls	r2, r2, #3
    2878:	0033      	movs	r3, r6
    287a:	0020      	movs	r0, r4
    287c:	9503      	str	r5, [sp, #12]
    287e:	9502      	str	r5, [sp, #8]
    2880:	9501      	str	r5, [sp, #4]
    2882:	9500      	str	r5, [sp, #0]
    2884:	f000 f830 	bl	28e8 <z_setup_new_thread>
    2888:	2204      	movs	r2, #4
    288a:	0007      	movs	r7, r0
    288c:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
    288e:	0020      	movs	r0, r4
    2890:	4393      	bics	r3, r2
    2892:	7363      	strb	r3, [r4, #13]
    2894:	f000 fbfa 	bl	308c <z_ready_thread>
	z_init_cpu(0);
    2898:	0028      	movs	r0, r5
    289a:	f7ff ff85 	bl	27a8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    289e:	0032      	movs	r2, r6
    28a0:	0039      	movs	r1, r7
    28a2:	0020      	movs	r0, r4
    28a4:	f7fe fc0a 	bl	10bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    28a8:	200015f8 	.word	0x200015f8
    28ac:	e000ed00 	.word	0xe000ed00
    28b0:	ff00ffff 	.word	0xff00ffff
    28b4:	2000097c 	.word	0x2000097c
    28b8:	200007f8 	.word	0x200007f8
    28bc:	000066aa 	.word	0x000066aa
    28c0:	00002759 	.word	0x00002759
    28c4:	200016f8 	.word	0x200016f8

000028c8 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    28c8:	b510      	push	{r4, lr}
    28ca:	1e04      	subs	r4, r0, #0
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    28cc:	d101      	bne.n	28d2 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    28ce:	4b05      	ldr	r3, [pc, #20]	; (28e4 <z_impl_k_thread_name_set+0x1c>)
    28d0:	689c      	ldr	r4, [r3, #8]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    28d2:	0020      	movs	r0, r4
    28d4:	221f      	movs	r2, #31
    28d6:	3060      	adds	r0, #96	; 0x60
    28d8:	f002 fa58 	bl	4d8c <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    28dc:	2000      	movs	r0, #0
    28de:	347f      	adds	r4, #127	; 0x7f
    28e0:	7020      	strb	r0, [r4, #0]

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    28e2:	bd10      	pop	{r4, pc}
    28e4:	2000097c 	.word	0x2000097c

000028e8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    28e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ea:	b085      	sub	sp, #20
    28ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    28ee:	0004      	movs	r4, r0
    28f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    28f2:	2d0f      	cmp	r5, #15
    28f4:	d135      	bne.n	2962 <z_setup_new_thread+0x7a>
    28f6:	4827      	ldr	r0, [pc, #156]	; (2994 <z_setup_new_thread+0xac>)
    28f8:	4283      	cmp	r3, r0
    28fa:	d136      	bne.n	296a <z_setup_new_thread+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    28fc:	0020      	movs	r0, r4
    28fe:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2900:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    2902:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    2904:	980e      	ldr	r0, [sp, #56]	; 0x38
	thread_base->pended_on = NULL;
    2906:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    2908:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    290a:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    290c:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    290e:	7360      	strb	r0, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2910:	3003      	adds	r0, #3
    2912:	4382      	bics	r2, r0

	thread_base->prio = priority;
    2914:	73a5      	strb	r5, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
    2916:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    291a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    291c:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
    291e:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
    2920:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2922:	9202      	str	r2, [sp, #8]
    2924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2926:	0020      	movs	r0, r4
    2928:	9201      	str	r2, [sp, #4]
    292a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    292c:	9200      	str	r2, [sp, #0]
    292e:	002a      	movs	r2, r5
    2930:	f7fe fbac 	bl	108c <arch_new_thread>
	new_thread->init_data = NULL;
    2934:	0020      	movs	r0, r4
    2936:	6566      	str	r6, [r4, #84]	; 0x54
	if (name != NULL) {
    2938:	3060      	adds	r0, #96	; 0x60
    293a:	42b7      	cmp	r7, r6
    293c:	d027      	beq.n	298e <z_setup_new_thread+0xa6>
    293e:	221f      	movs	r2, #31
    2940:	0039      	movs	r1, r7
    2942:	f002 fa23 	bl	4d8c <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    2946:	0023      	movs	r3, r4
    2948:	337f      	adds	r3, #127	; 0x7f
    294a:	701e      	strb	r6, [r3, #0]
	if (!_current) {
    294c:	4b12      	ldr	r3, [pc, #72]	; (2998 <z_setup_new_thread+0xb0>)
    294e:	689b      	ldr	r3, [r3, #8]
    2950:	2b00      	cmp	r3, #0
    2952:	d001      	beq.n	2958 <z_setup_new_thread+0x70>
	new_thread->resource_pool = _current->resource_pool;
    2954:	3308      	adds	r3, #8
    2956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
    2958:	0028      	movs	r0, r5
    295a:	3408      	adds	r4, #8
    295c:	67e3      	str	r3, [r4, #124]	; 0x7c
    295e:	b005      	add	sp, #20
    2960:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    2962:	0028      	movs	r0, r5
    2964:	3010      	adds	r0, #16
    2966:	281e      	cmp	r0, #30
    2968:	d9c8      	bls.n	28fc <z_setup_new_thread+0x14>
    296a:	4c0c      	ldr	r4, [pc, #48]	; (299c <z_setup_new_thread+0xb4>)
    296c:	490c      	ldr	r1, [pc, #48]	; (29a0 <z_setup_new_thread+0xb8>)
    296e:	0022      	movs	r2, r4
    2970:	480c      	ldr	r0, [pc, #48]	; (29a4 <z_setup_new_thread+0xbc>)
    2972:	4b0d      	ldr	r3, [pc, #52]	; (29a8 <z_setup_new_thread+0xc0>)
    2974:	f002 fc0d 	bl	5192 <assert_print>
    2978:	2310      	movs	r3, #16
    297a:	0029      	movs	r1, r5
    297c:	480b      	ldr	r0, [pc, #44]	; (29ac <z_setup_new_thread+0xc4>)
    297e:	220e      	movs	r2, #14
    2980:	425b      	negs	r3, r3
    2982:	f002 fc06 	bl	5192 <assert_print>
    2986:	0020      	movs	r0, r4
    2988:	4907      	ldr	r1, [pc, #28]	; (29a8 <z_setup_new_thread+0xc0>)
    298a:	f002 fbfe 	bl	518a <assert_post_action>
		new_thread->name[0] = '\0';
    298e:	7007      	strb	r7, [r0, #0]
    2990:	e7dc      	b.n	294c <z_setup_new_thread+0x64>
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	00002b71 	.word	0x00002b71
    2998:	2000097c 	.word	0x2000097c
    299c:	000066b2 	.word	0x000066b2
    29a0:	000066d5 	.word	0x000066d5
    29a4:	00005d0d 	.word	0x00005d0d
    29a8:	0000021a 	.word	0x0000021a
    29ac:	00006755 	.word	0x00006755

000029b0 <z_impl_k_thread_create>:
{
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	b086      	sub	sp, #24
    29b4:	0004      	movs	r4, r0
    29b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    29b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    29ba:	f3ef 8005 	mrs	r0, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    29be:	2800      	cmp	r0, #0
    29c0:	d00f      	beq.n	29e2 <z_impl_k_thread_create+0x32>
    29c2:	23a3      	movs	r3, #163	; 0xa3
    29c4:	4c19      	ldr	r4, [pc, #100]	; (2a2c <z_impl_k_thread_create+0x7c>)
    29c6:	491a      	ldr	r1, [pc, #104]	; (2a30 <z_impl_k_thread_create+0x80>)
    29c8:	0022      	movs	r2, r4
    29ca:	481a      	ldr	r0, [pc, #104]	; (2a34 <z_impl_k_thread_create+0x84>)
    29cc:	009b      	lsls	r3, r3, #2
    29ce:	f002 fbe0 	bl	5192 <assert_print>
    29d2:	4819      	ldr	r0, [pc, #100]	; (2a38 <z_impl_k_thread_create+0x88>)
    29d4:	f002 fbdd 	bl	5192 <assert_print>
    29d8:	21a3      	movs	r1, #163	; 0xa3
    29da:	0020      	movs	r0, r4
    29dc:	0089      	lsls	r1, r1, #2
    29de:	f002 fbd4 	bl	518a <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    29e2:	9005      	str	r0, [sp, #20]
    29e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    29e6:	9004      	str	r0, [sp, #16]
    29e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    29ea:	9003      	str	r0, [sp, #12]
    29ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    29ee:	9002      	str	r0, [sp, #8]
    29f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    29f2:	9001      	str	r0, [sp, #4]
    29f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    29f6:	9000      	str	r0, [sp, #0]
    29f8:	0020      	movs	r0, r4
    29fa:	f7ff ff75 	bl	28e8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    29fe:	002b      	movs	r3, r5
    2a00:	1c72      	adds	r2, r6, #1
    2a02:	d101      	bne.n	2a08 <z_impl_k_thread_create+0x58>
    2a04:	3301      	adds	r3, #1
    2a06:	d005      	beq.n	2a14 <z_impl_k_thread_create+0x64>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2a08:	002b      	movs	r3, r5
    2a0a:	4333      	orrs	r3, r6
    2a0c:	d105      	bne.n	2a1a <z_impl_k_thread_create+0x6a>
	z_sched_start(thread);
    2a0e:	0020      	movs	r0, r4
    2a10:	f000 fbca 	bl	31a8 <z_sched_start>
}
    2a14:	0020      	movs	r0, r4
    2a16:	b006      	add	sp, #24
    2a18:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    2a1a:	0020      	movs	r0, r4
    2a1c:	0032      	movs	r2, r6
    2a1e:	002b      	movs	r3, r5
    2a20:	4906      	ldr	r1, [pc, #24]	; (2a3c <z_impl_k_thread_create+0x8c>)
    2a22:	3018      	adds	r0, #24
    2a24:	f001 fbf4 	bl	4210 <z_add_timeout>
    2a28:	e7f4      	b.n	2a14 <z_impl_k_thread_create+0x64>
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	000066b2 	.word	0x000066b2
    2a30:	00006786 	.word	0x00006786
    2a34:	00005d0d 	.word	0x00005d0d
    2a38:	00006798 	.word	0x00006798
    2a3c:	000055a7 	.word	0x000055a7

00002a40 <z_init_static_threads>:
{
    2a40:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2a42:	4c2f      	ldr	r4, [pc, #188]	; (2b00 <z_init_static_threads+0xc0>)
{
    2a44:	b086      	sub	sp, #24
    2a46:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    2a48:	4d2e      	ldr	r5, [pc, #184]	; (2b04 <z_init_static_threads+0xc4>)
    2a4a:	42ac      	cmp	r4, r5
    2a4c:	d923      	bls.n	2a96 <z_init_static_threads+0x56>
    2a4e:	4c2e      	ldr	r4, [pc, #184]	; (2b08 <z_init_static_threads+0xc8>)
    2a50:	492e      	ldr	r1, [pc, #184]	; (2b0c <z_init_static_threads+0xcc>)
    2a52:	0022      	movs	r2, r4
    2a54:	482e      	ldr	r0, [pc, #184]	; (2b10 <z_init_static_threads+0xd0>)
    2a56:	4b2f      	ldr	r3, [pc, #188]	; (2b14 <z_init_static_threads+0xd4>)
    2a58:	f002 fb9b 	bl	5192 <assert_print>
    2a5c:	482e      	ldr	r0, [pc, #184]	; (2b18 <z_init_static_threads+0xd8>)
    2a5e:	f002 fb98 	bl	5192 <assert_print>
    2a62:	492c      	ldr	r1, [pc, #176]	; (2b14 <z_init_static_threads+0xd4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    2a64:	0020      	movs	r0, r4
    2a66:	f002 fb90 	bl	518a <assert_post_action>
		z_setup_new_thread(
    2a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a6c:	9305      	str	r3, [sp, #20]
    2a6e:	6a23      	ldr	r3, [r4, #32]
    2a70:	9304      	str	r3, [sp, #16]
    2a72:	69e3      	ldr	r3, [r4, #28]
    2a74:	9303      	str	r3, [sp, #12]
    2a76:	69a3      	ldr	r3, [r4, #24]
    2a78:	9302      	str	r3, [sp, #8]
    2a7a:	6963      	ldr	r3, [r4, #20]
    2a7c:	9301      	str	r3, [sp, #4]
    2a7e:	6923      	ldr	r3, [r4, #16]
    2a80:	9300      	str	r3, [sp, #0]
    2a82:	68e3      	ldr	r3, [r4, #12]
    2a84:	68a2      	ldr	r2, [r4, #8]
    2a86:	6861      	ldr	r1, [r4, #4]
    2a88:	6820      	ldr	r0, [r4, #0]
    2a8a:	f7ff ff2d 	bl	28e8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2a8e:	6823      	ldr	r3, [r4, #0]
    2a90:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    2a92:	342c      	adds	r4, #44	; 0x2c
    2a94:	e7d8      	b.n	2a48 <z_init_static_threads+0x8>
    2a96:	42ac      	cmp	r4, r5
    2a98:	d3e7      	bcc.n	2a6a <z_init_static_threads+0x2a>
	k_sched_lock();
    2a9a:	f000 fbd7 	bl	324c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2a9e:	0034      	movs	r4, r6
    2aa0:	42ac      	cmp	r4, r5
    2aa2:	d926      	bls.n	2af2 <z_init_static_threads+0xb2>
    2aa4:	4c18      	ldr	r4, [pc, #96]	; (2b08 <z_init_static_threads+0xc8>)
    2aa6:	4919      	ldr	r1, [pc, #100]	; (2b0c <z_init_static_threads+0xcc>)
    2aa8:	0022      	movs	r2, r4
    2aaa:	4819      	ldr	r0, [pc, #100]	; (2b10 <z_init_static_threads+0xd0>)
    2aac:	4b1b      	ldr	r3, [pc, #108]	; (2b1c <z_init_static_threads+0xdc>)
    2aae:	f002 fb70 	bl	5192 <assert_print>
    2ab2:	4819      	ldr	r0, [pc, #100]	; (2b18 <z_init_static_threads+0xd8>)
    2ab4:	f002 fb6d 	bl	5192 <assert_print>
    2ab8:	4918      	ldr	r1, [pc, #96]	; (2b1c <z_init_static_threads+0xdc>)
    2aba:	e7d3      	b.n	2a64 <z_init_static_threads+0x24>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2abe:	1c5a      	adds	r2, r3, #1
    2ac0:	d00f      	beq.n	2ae2 <z_init_static_threads+0xa2>
					    K_MSEC(thread_data->init_delay));
    2ac2:	43d8      	mvns	r0, r3
    2ac4:	17c0      	asrs	r0, r0, #31
    2ac6:	4018      	ands	r0, r3
			return t * ((uint64_t)to_hz / from_hz);
    2ac8:	220a      	movs	r2, #10
    2aca:	2300      	movs	r3, #0
    2acc:	17c1      	asrs	r1, r0, #31
    2ace:	f7fd fc4d 	bl	36c <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
    2ad2:	6826      	ldr	r6, [r4, #0]
    2ad4:	000b      	movs	r3, r1
    2ad6:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2ad8:	4301      	orrs	r1, r0
    2ada:	d104      	bne.n	2ae6 <z_init_static_threads+0xa6>
	z_sched_start(thread);
    2adc:	0030      	movs	r0, r6
    2ade:	f000 fb63 	bl	31a8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2ae2:	342c      	adds	r4, #44	; 0x2c
    2ae4:	e7dc      	b.n	2aa0 <z_init_static_threads+0x60>
    2ae6:	0030      	movs	r0, r6
    2ae8:	490d      	ldr	r1, [pc, #52]	; (2b20 <z_init_static_threads+0xe0>)
    2aea:	3018      	adds	r0, #24
    2aec:	f001 fb90 	bl	4210 <z_add_timeout>
    2af0:	e7f7      	b.n	2ae2 <z_init_static_threads+0xa2>
    2af2:	42ac      	cmp	r4, r5
    2af4:	d3e2      	bcc.n	2abc <z_init_static_threads+0x7c>
	k_sched_unlock();
    2af6:	f000 fc19 	bl	332c <k_sched_unlock>
}
    2afa:	b006      	add	sp, #24
    2afc:	bd70      	pop	{r4, r5, r6, pc}
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	000057c4 	.word	0x000057c4
    2b04:	000057c4 	.word	0x000057c4
    2b08:	000066b2 	.word	0x000066b2
    2b0c:	000067bd 	.word	0x000067bd
    2b10:	00005d0d 	.word	0x00005d0d
    2b14:	000002f3 	.word	0x000002f3
    2b18:	000065a2 	.word	0x000065a2
    2b1c:	00000312 	.word	0x00000312
    2b20:	000055a7 	.word	0x000055a7

00002b24 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    2b24:	6803      	ldr	r3, [r0, #0]
	if (thread_cpu != 0U) {
		if ((thread_cpu & 3U) == _current_cpu->id) {
			return false;
		}
	}
	return true;
    2b26:	2001      	movs	r0, #1
	if (thread_cpu != 0U) {
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d007      	beq.n	2b3c <z_spin_lock_valid+0x18>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    2b2c:	2203      	movs	r2, #3
    2b2e:	4013      	ands	r3, r2
    2b30:	4a03      	ldr	r2, [pc, #12]	; (2b40 <z_spin_lock_valid+0x1c>)
    2b32:	7c12      	ldrb	r2, [r2, #16]
    2b34:	1a9b      	subs	r3, r3, r2
    2b36:	1e5a      	subs	r2, r3, #1
    2b38:	4193      	sbcs	r3, r2
    2b3a:	b2d8      	uxtb	r0, r3
}
    2b3c:	4770      	bx	lr
    2b3e:	46c0      	nop			; (mov r8, r8)
    2b40:	2000097c 	.word	0x2000097c

00002b44 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    2b44:	4a05      	ldr	r2, [pc, #20]	; (2b5c <z_spin_unlock_valid+0x18>)
{
    2b46:	0003      	movs	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    2b48:	7c11      	ldrb	r1, [r2, #16]
    2b4a:	6892      	ldr	r2, [r2, #8]
    2b4c:	430a      	orrs	r2, r1
    2b4e:	6801      	ldr	r1, [r0, #0]
    2b50:	2000      	movs	r0, #0
    2b52:	4291      	cmp	r1, r2
    2b54:	d101      	bne.n	2b5a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    2b56:	6018      	str	r0, [r3, #0]
	return true;
    2b58:	3001      	adds	r0, #1
}
    2b5a:	4770      	bx	lr
    2b5c:	2000097c 	.word	0x2000097c

00002b60 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    2b60:	4b02      	ldr	r3, [pc, #8]	; (2b6c <z_spin_lock_set_owner+0xc>)
    2b62:	7c1a      	ldrb	r2, [r3, #16]
    2b64:	689b      	ldr	r3, [r3, #8]
    2b66:	4313      	orrs	r3, r2
    2b68:	6003      	str	r3, [r0, #0]
}
    2b6a:	4770      	bx	lr
    2b6c:	2000097c 	.word	0x2000097c

00002b70 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
    2b70:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    2b72:	4b0b      	ldr	r3, [pc, #44]	; (2ba0 <idle+0x30>)
    2b74:	689b      	ldr	r3, [r3, #8]
    2b76:	7b9b      	ldrb	r3, [r3, #14]
    2b78:	2b7f      	cmp	r3, #127	; 0x7f
    2b7a:	d90a      	bls.n	2b92 <idle+0x22>
    2b7c:	4c09      	ldr	r4, [pc, #36]	; (2ba4 <idle+0x34>)
    2b7e:	490a      	ldr	r1, [pc, #40]	; (2ba8 <idle+0x38>)
    2b80:	480a      	ldr	r0, [pc, #40]	; (2bac <idle+0x3c>)
    2b82:	2329      	movs	r3, #41	; 0x29
    2b84:	0022      	movs	r2, r4
    2b86:	f002 fb04 	bl	5192 <assert_print>
    2b8a:	2129      	movs	r1, #41	; 0x29
    2b8c:	0020      	movs	r0, r4
    2b8e:	f002 fafc 	bl	518a <assert_post_action>
	__asm__ volatile("mrs %0, PRIMASK;"
    2b92:	f3ef 8310 	mrs	r3, PRIMASK
    2b96:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2b98:	f7fe f97a 	bl	e90 <arch_cpu_idle>
    2b9c:	e7f9      	b.n	2b92 <idle+0x22>
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	2000097c 	.word	0x2000097c
    2ba4:	000067ea 	.word	0x000067ea
    2ba8:	0000680b 	.word	0x0000680b
    2bac:	00005d0d 	.word	0x00005d0d

00002bb0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    2bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bb2:	b085      	sub	sp, #20
    2bb4:	0004      	movs	r4, r0
    2bb6:	9202      	str	r2, [sp, #8]
    2bb8:	9303      	str	r3, [sp, #12]
    2bba:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d00d      	beq.n	2bde <z_impl_k_mutex_lock+0x2e>
    2bc2:	4c5c      	ldr	r4, [pc, #368]	; (2d34 <z_impl_k_mutex_lock+0x184>)
    2bc4:	495c      	ldr	r1, [pc, #368]	; (2d38 <z_impl_k_mutex_lock+0x188>)
    2bc6:	2365      	movs	r3, #101	; 0x65
    2bc8:	0022      	movs	r2, r4
    2bca:	485c      	ldr	r0, [pc, #368]	; (2d3c <z_impl_k_mutex_lock+0x18c>)
    2bcc:	f002 fae1 	bl	5192 <assert_print>
    2bd0:	485b      	ldr	r0, [pc, #364]	; (2d40 <z_impl_k_mutex_lock+0x190>)
    2bd2:	f002 fade 	bl	5192 <assert_print>
    2bd6:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2bd8:	0020      	movs	r0, r4
    2bda:	f002 fad6 	bl	518a <assert_post_action>
    2bde:	f3ef 8710 	mrs	r7, PRIMASK
    2be2:	b672      	cpsid	i
    2be4:	4d57      	ldr	r5, [pc, #348]	; (2d44 <z_impl_k_mutex_lock+0x194>)
    2be6:	0028      	movs	r0, r5
    2be8:	f7ff ff9c 	bl	2b24 <z_spin_lock_valid>
    2bec:	2800      	cmp	r0, #0
    2bee:	d10c      	bne.n	2c0a <z_impl_k_mutex_lock+0x5a>
    2bf0:	4c55      	ldr	r4, [pc, #340]	; (2d48 <z_impl_k_mutex_lock+0x198>)
    2bf2:	2394      	movs	r3, #148	; 0x94
    2bf4:	0022      	movs	r2, r4
    2bf6:	4955      	ldr	r1, [pc, #340]	; (2d4c <z_impl_k_mutex_lock+0x19c>)
    2bf8:	4850      	ldr	r0, [pc, #320]	; (2d3c <z_impl_k_mutex_lock+0x18c>)
    2bfa:	f002 faca 	bl	5192 <assert_print>
    2bfe:	0029      	movs	r1, r5
    2c00:	4853      	ldr	r0, [pc, #332]	; (2d50 <z_impl_k_mutex_lock+0x1a0>)
    2c02:	f002 fac6 	bl	5192 <assert_print>
    2c06:	2194      	movs	r1, #148	; 0x94
    2c08:	e7e6      	b.n	2bd8 <z_impl_k_mutex_lock+0x28>
	z_spin_lock_set_owner(l);
    2c0a:	0028      	movs	r0, r5
    2c0c:	f7ff ffa8 	bl	2b60 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2c10:	68e3      	ldr	r3, [r4, #12]
    2c12:	4a50      	ldr	r2, [pc, #320]	; (2d54 <z_impl_k_mutex_lock+0x1a4>)
    2c14:	2b00      	cmp	r3, #0
    2c16:	d014      	beq.n	2c42 <z_impl_k_mutex_lock+0x92>
    2c18:	68a0      	ldr	r0, [r4, #8]
    2c1a:	6891      	ldr	r1, [r2, #8]
    2c1c:	4288      	cmp	r0, r1
    2c1e:	d02a      	beq.n	2c76 <z_impl_k_mutex_lock+0xc6>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2c20:	9b02      	ldr	r3, [sp, #8]
    2c22:	9a03      	ldr	r2, [sp, #12]
    2c24:	4313      	orrs	r3, r2
    2c26:	d131      	bne.n	2c8c <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2c28:	0028      	movs	r0, r5
    2c2a:	f7ff ff8b 	bl	2b44 <z_spin_unlock_valid>
    2c2e:	2800      	cmp	r0, #0
    2c30:	d014      	beq.n	2c5c <z_impl_k_mutex_lock+0xac>
	if (key != 0U) {
    2c32:	2f00      	cmp	r7, #0
    2c34:	d102      	bne.n	2c3c <z_impl_k_mutex_lock+0x8c>
	__asm__ volatile(
    2c36:	b662      	cpsie	i
    2c38:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    2c3c:	2010      	movs	r0, #16
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
    2c3e:	4240      	negs	r0, r0
    2c40:	e01e      	b.n	2c80 <z_impl_k_mutex_lock+0xd0>
					_current->base.prio :
    2c42:	6891      	ldr	r1, [r2, #8]
    2c44:	7b89      	ldrb	r1, [r1, #14]
    2c46:	b249      	sxtb	r1, r1
		mutex->lock_count++;
    2c48:	3301      	adds	r3, #1
    2c4a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    2c4c:	6893      	ldr	r3, [r2, #8]
    2c4e:	0028      	movs	r0, r5
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2c50:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    2c52:	60a3      	str	r3, [r4, #8]
    2c54:	f7ff ff76 	bl	2b44 <z_spin_unlock_valid>
    2c58:	2800      	cmp	r0, #0
    2c5a:	d10e      	bne.n	2c7a <z_impl_k_mutex_lock+0xca>
    2c5c:	4c3a      	ldr	r4, [pc, #232]	; (2d48 <z_impl_k_mutex_lock+0x198>)
    2c5e:	23c3      	movs	r3, #195	; 0xc3
    2c60:	0022      	movs	r2, r4
    2c62:	493d      	ldr	r1, [pc, #244]	; (2d58 <z_impl_k_mutex_lock+0x1a8>)
    2c64:	4835      	ldr	r0, [pc, #212]	; (2d3c <z_impl_k_mutex_lock+0x18c>)
    2c66:	f002 fa94 	bl	5192 <assert_print>
    2c6a:	0029      	movs	r1, r5
    2c6c:	483b      	ldr	r0, [pc, #236]	; (2d5c <z_impl_k_mutex_lock+0x1ac>)
    2c6e:	f002 fa90 	bl	5192 <assert_print>
    2c72:	21c3      	movs	r1, #195	; 0xc3
    2c74:	e7b0      	b.n	2bd8 <z_impl_k_mutex_lock+0x28>
					_current->base.prio :
    2c76:	6921      	ldr	r1, [r4, #16]
    2c78:	e7e6      	b.n	2c48 <z_impl_k_mutex_lock+0x98>
	if (key != 0U) {
    2c7a:	2f00      	cmp	r7, #0
    2c7c:	d002      	beq.n	2c84 <z_impl_k_mutex_lock+0xd4>
		return 0;
    2c7e:	2000      	movs	r0, #0
}
    2c80:	b005      	add	sp, #20
    2c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile(
    2c84:	b662      	cpsie	i
    2c86:	f3bf 8f6f 	isb	sy
    2c8a:	e7f8      	b.n	2c7e <z_impl_k_mutex_lock+0xce>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2c8c:	230e      	movs	r3, #14
    2c8e:	7b89      	ldrb	r1, [r1, #14]
    2c90:	56c3      	ldrsb	r3, [r0, r3]
    2c92:	b249      	sxtb	r1, r1
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    2c94:	4299      	cmp	r1, r3
    2c96:	dd00      	ble.n	2c9a <z_impl_k_mutex_lock+0xea>
    2c98:	0019      	movs	r1, r3
    2c9a:	000a      	movs	r2, r1
    2c9c:	327f      	adds	r2, #127	; 0x7f
    2c9e:	da01      	bge.n	2ca4 <z_impl_k_mutex_lock+0xf4>
    2ca0:	217f      	movs	r1, #127	; 0x7f
    2ca2:	4249      	negs	r1, r1
	bool resched = false;
    2ca4:	2600      	movs	r6, #0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    2ca6:	428b      	cmp	r3, r1
    2ca8:	dd02      	ble.n	2cb0 <z_impl_k_mutex_lock+0x100>
		resched = adjust_owner_prio(mutex, new_prio);
    2caa:	f002 fc5c 	bl	5566 <adjust_owner_prio.isra.0>
    2cae:	0006      	movs	r6, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2cb0:	9b02      	ldr	r3, [sp, #8]
    2cb2:	0022      	movs	r2, r4
    2cb4:	9300      	str	r3, [sp, #0]
    2cb6:	9b03      	ldr	r3, [sp, #12]
    2cb8:	0039      	movs	r1, r7
    2cba:	0028      	movs	r0, r5
    2cbc:	9301      	str	r3, [sp, #4]
    2cbe:	f000 fcf7 	bl	36b0 <z_pend_curr>
	if (got_mutex == 0) {
    2cc2:	2800      	cmp	r0, #0
    2cc4:	d0db      	beq.n	2c7e <z_impl_k_mutex_lock+0xce>
	__asm__ volatile("mrs %0, PRIMASK;"
    2cc6:	f3ef 8710 	mrs	r7, PRIMASK
    2cca:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2ccc:	0028      	movs	r0, r5
    2cce:	f7ff ff29 	bl	2b24 <z_spin_lock_valid>
    2cd2:	2800      	cmp	r0, #0
    2cd4:	d100      	bne.n	2cd8 <z_impl_k_mutex_lock+0x128>
    2cd6:	e78b      	b.n	2bf0 <z_impl_k_mutex_lock+0x40>
	z_spin_lock_set_owner(l);
    2cd8:	0028      	movs	r0, r5
    2cda:	f7ff ff41 	bl	2b60 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
    2cde:	68a0      	ldr	r0, [r4, #8]
    2ce0:	2800      	cmp	r0, #0
    2ce2:	d019      	beq.n	2d18 <z_impl_k_mutex_lock+0x168>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2ce4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    2ce6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2ce8:	429c      	cmp	r4, r3
    2cea:	d00b      	beq.n	2d04 <z_impl_k_mutex_lock+0x154>
    2cec:	2b00      	cmp	r3, #0
    2cee:	d009      	beq.n	2d04 <z_impl_k_mutex_lock+0x154>
    2cf0:	7b9b      	ldrb	r3, [r3, #14]
    2cf2:	b25b      	sxtb	r3, r3
    2cf4:	4299      	cmp	r1, r3
    2cf6:	dd00      	ble.n	2cfa <z_impl_k_mutex_lock+0x14a>
    2cf8:	0019      	movs	r1, r3
    2cfa:	000b      	movs	r3, r1
    2cfc:	337f      	adds	r3, #127	; 0x7f
    2cfe:	da01      	bge.n	2d04 <z_impl_k_mutex_lock+0x154>
    2d00:	217f      	movs	r1, #127	; 0x7f
    2d02:	4249      	negs	r1, r1
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    2d04:	f002 fc2f 	bl	5566 <adjust_owner_prio.isra.0>
    2d08:	2800      	cmp	r0, #0
    2d0a:	d005      	beq.n	2d18 <z_impl_k_mutex_lock+0x168>
		z_reschedule(&lock, key);
    2d0c:	0039      	movs	r1, r7
    2d0e:	0028      	movs	r0, r5
    2d10:	f000 fa02 	bl	3118 <z_reschedule>
	return -EAGAIN;
    2d14:	200b      	movs	r0, #11
    2d16:	e792      	b.n	2c3e <z_impl_k_mutex_lock+0x8e>
	if (resched) {
    2d18:	2e00      	cmp	r6, #0
    2d1a:	d1f7      	bne.n	2d0c <z_impl_k_mutex_lock+0x15c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2d1c:	0028      	movs	r0, r5
    2d1e:	f7ff ff11 	bl	2b44 <z_spin_unlock_valid>
    2d22:	2800      	cmp	r0, #0
    2d24:	d09a      	beq.n	2c5c <z_impl_k_mutex_lock+0xac>
	if (key != 0U) {
    2d26:	2f00      	cmp	r7, #0
    2d28:	d1f4      	bne.n	2d14 <z_impl_k_mutex_lock+0x164>
	__asm__ volatile(
    2d2a:	b662      	cpsie	i
    2d2c:	f3bf 8f6f 	isb	sy
    2d30:	e7f0      	b.n	2d14 <z_impl_k_mutex_lock+0x164>
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	00006833 	.word	0x00006833
    2d38:	00006786 	.word	0x00006786
    2d3c:	00005d0d 	.word	0x00005d0d
    2d40:	00006855 	.word	0x00006855
    2d44:	2000099c 	.word	0x2000099c
    2d48:	000064e1 	.word	0x000064e1
    2d4c:	0000650e 	.word	0x0000650e
    2d50:	00006523 	.word	0x00006523
    2d54:	2000097c 	.word	0x2000097c
    2d58:	0000653b 	.word	0x0000653b
    2d5c:	00006552 	.word	0x00006552

00002d60 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    2d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d62:	0004      	movs	r4, r0
    2d64:	f3ef 8705 	mrs	r7, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    2d68:	2f00      	cmp	r7, #0
    2d6a:	d00d      	beq.n	2d88 <z_impl_k_mutex_unlock+0x28>
    2d6c:	4c3a      	ldr	r4, [pc, #232]	; (2e58 <z_impl_k_mutex_unlock+0xf8>)
    2d6e:	493b      	ldr	r1, [pc, #236]	; (2e5c <z_impl_k_mutex_unlock+0xfc>)
    2d70:	23cd      	movs	r3, #205	; 0xcd
    2d72:	0022      	movs	r2, r4
    2d74:	483a      	ldr	r0, [pc, #232]	; (2e60 <z_impl_k_mutex_unlock+0x100>)
    2d76:	f002 fa0c 	bl	5192 <assert_print>
    2d7a:	483a      	ldr	r0, [pc, #232]	; (2e64 <z_impl_k_mutex_unlock+0x104>)
    2d7c:	f002 fa09 	bl	5192 <assert_print>
    2d80:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    2d82:	0020      	movs	r0, r4
    2d84:	f002 fa01 	bl	518a <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
    2d88:	6883      	ldr	r3, [r0, #8]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d05e      	beq.n	2e4c <z_impl_k_mutex_unlock+0xec>
	CHECKIF(mutex->owner != _current) {
    2d8e:	4a36      	ldr	r2, [pc, #216]	; (2e68 <z_impl_k_mutex_unlock+0x108>)
    2d90:	6892      	ldr	r2, [r2, #8]
    2d92:	4293      	cmp	r3, r2
    2d94:	d15d      	bne.n	2e52 <z_impl_k_mutex_unlock+0xf2>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    2d96:	68c3      	ldr	r3, [r0, #12]
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d108      	bne.n	2dae <z_impl_k_mutex_unlock+0x4e>
    2d9c:	4c2e      	ldr	r4, [pc, #184]	; (2e58 <z_impl_k_mutex_unlock+0xf8>)
    2d9e:	4933      	ldr	r1, [pc, #204]	; (2e6c <z_impl_k_mutex_unlock+0x10c>)
    2da0:	0022      	movs	r2, r4
    2da2:	482f      	ldr	r0, [pc, #188]	; (2e60 <z_impl_k_mutex_unlock+0x100>)
    2da4:	33e5      	adds	r3, #229	; 0xe5
    2da6:	f002 f9f4 	bl	5192 <assert_print>
    2daa:	21e5      	movs	r1, #229	; 0xe5
    2dac:	e7e9      	b.n	2d82 <z_impl_k_mutex_unlock+0x22>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    2dae:	2b01      	cmp	r3, #1
    2db0:	d003      	beq.n	2dba <z_impl_k_mutex_unlock+0x5a>
		mutex->lock_count--;
    2db2:	3b01      	subs	r3, #1
    2db4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    2db6:	2000      	movs	r0, #0
}
    2db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
    2dba:	f3ef 8610 	mrs	r6, PRIMASK
    2dbe:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2dc0:	4d2b      	ldr	r5, [pc, #172]	; (2e70 <z_impl_k_mutex_unlock+0x110>)
    2dc2:	0028      	movs	r0, r5
    2dc4:	f7ff feae 	bl	2b24 <z_spin_lock_valid>
    2dc8:	2800      	cmp	r0, #0
    2dca:	d10c      	bne.n	2de6 <z_impl_k_mutex_unlock+0x86>
    2dcc:	4c29      	ldr	r4, [pc, #164]	; (2e74 <z_impl_k_mutex_unlock+0x114>)
    2dce:	2394      	movs	r3, #148	; 0x94
    2dd0:	0022      	movs	r2, r4
    2dd2:	4929      	ldr	r1, [pc, #164]	; (2e78 <z_impl_k_mutex_unlock+0x118>)
    2dd4:	4822      	ldr	r0, [pc, #136]	; (2e60 <z_impl_k_mutex_unlock+0x100>)
    2dd6:	f002 f9dc 	bl	5192 <assert_print>
    2dda:	0029      	movs	r1, r5
    2ddc:	4827      	ldr	r0, [pc, #156]	; (2e7c <z_impl_k_mutex_unlock+0x11c>)
    2dde:	f002 f9d8 	bl	5192 <assert_print>
    2de2:	2194      	movs	r1, #148	; 0x94
    2de4:	e7cd      	b.n	2d82 <z_impl_k_mutex_unlock+0x22>
	z_spin_lock_set_owner(l);
    2de6:	0028      	movs	r0, r5
    2de8:	f7ff feba 	bl	2b60 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2dec:	6921      	ldr	r1, [r4, #16]
    2dee:	68a0      	ldr	r0, [r4, #8]
    2df0:	f002 fbb9 	bl	5566 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2df4:	0020      	movs	r0, r4
    2df6:	f000 fe4d 	bl	3a94 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2dfa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    2dfc:	2800      	cmp	r0, #0
    2dfe:	d00c      	beq.n	2e1a <z_impl_k_mutex_unlock+0xba>
		mutex->owner_orig_prio = new_owner->base.prio;
    2e00:	230e      	movs	r3, #14
    2e02:	56c3      	ldrsb	r3, [r0, r3]
    2e04:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2e06:	0003      	movs	r3, r0
    2e08:	338c      	adds	r3, #140	; 0x8c
    2e0a:	601f      	str	r7, [r3, #0]
		z_ready_thread(new_owner);
    2e0c:	f000 f93e 	bl	308c <z_ready_thread>
		z_reschedule(&lock, key);
    2e10:	0031      	movs	r1, r6
    2e12:	0028      	movs	r0, r5
    2e14:	f000 f980 	bl	3118 <z_reschedule>
    2e18:	e7cd      	b.n	2db6 <z_impl_k_mutex_unlock+0x56>
		mutex->lock_count = 0U;
    2e1a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2e1c:	0028      	movs	r0, r5
    2e1e:	f7ff fe91 	bl	2b44 <z_spin_unlock_valid>
    2e22:	2800      	cmp	r0, #0
    2e24:	d10c      	bne.n	2e40 <z_impl_k_mutex_unlock+0xe0>
    2e26:	4c13      	ldr	r4, [pc, #76]	; (2e74 <z_impl_k_mutex_unlock+0x114>)
    2e28:	23c3      	movs	r3, #195	; 0xc3
    2e2a:	0022      	movs	r2, r4
    2e2c:	4914      	ldr	r1, [pc, #80]	; (2e80 <z_impl_k_mutex_unlock+0x120>)
    2e2e:	480c      	ldr	r0, [pc, #48]	; (2e60 <z_impl_k_mutex_unlock+0x100>)
    2e30:	f002 f9af 	bl	5192 <assert_print>
    2e34:	0029      	movs	r1, r5
    2e36:	4813      	ldr	r0, [pc, #76]	; (2e84 <z_impl_k_mutex_unlock+0x124>)
    2e38:	f002 f9ab 	bl	5192 <assert_print>
    2e3c:	21c3      	movs	r1, #195	; 0xc3
    2e3e:	e7a0      	b.n	2d82 <z_impl_k_mutex_unlock+0x22>
	if (key != 0U) {
    2e40:	2e00      	cmp	r6, #0
    2e42:	d1b8      	bne.n	2db6 <z_impl_k_mutex_unlock+0x56>
	__asm__ volatile(
    2e44:	b662      	cpsie	i
    2e46:	f3bf 8f6f 	isb	sy
    2e4a:	e7b4      	b.n	2db6 <z_impl_k_mutex_unlock+0x56>
		return -EINVAL;
    2e4c:	2016      	movs	r0, #22
		return -EPERM;
    2e4e:	4240      	negs	r0, r0
    2e50:	e7b2      	b.n	2db8 <z_impl_k_mutex_unlock+0x58>
    2e52:	2001      	movs	r0, #1
    2e54:	e7fb      	b.n	2e4e <z_impl_k_mutex_unlock+0xee>
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	00006833 	.word	0x00006833
    2e5c:	00006786 	.word	0x00006786
    2e60:	00005d0d 	.word	0x00005d0d
    2e64:	00006855 	.word	0x00006855
    2e68:	2000097c 	.word	0x2000097c
    2e6c:	0000687a 	.word	0x0000687a
    2e70:	2000099c 	.word	0x2000099c
    2e74:	000064e1 	.word	0x000064e1
    2e78:	0000650e 	.word	0x0000650e
    2e7c:	00006523 	.word	0x00006523
    2e80:	0000653b 	.word	0x0000653b
    2e84:	00006552 	.word	0x00006552

00002e88 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    2e88:	89c2      	ldrh	r2, [r0, #14]
{
    2e8a:	0003      	movs	r3, r0
		&& !z_is_idle_thread_object(thread);
    2e8c:	2000      	movs	r0, #0
    2e8e:	2a7f      	cmp	r2, #127	; 0x7f
    2e90:	d811      	bhi.n	2eb6 <sliceable+0x2e>
	int ret = slice_ticks;
    2e92:	4a0a      	ldr	r2, [pc, #40]	; (2ebc <sliceable+0x34>)
    2e94:	6810      	ldr	r0, [r2, #0]
		&& slice_time(thread) != 0
    2e96:	2800      	cmp	r0, #0
    2e98:	d00d      	beq.n	2eb6 <sliceable+0x2e>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2e9a:	210e      	movs	r1, #14
    2e9c:	4a08      	ldr	r2, [pc, #32]	; (2ec0 <sliceable+0x38>)
    2e9e:	5659      	ldrsb	r1, [r3, r1]
    2ea0:	6812      	ldr	r2, [r2, #0]
		&& !z_is_idle_thread_object(thread);
    2ea2:	2000      	movs	r0, #0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2ea4:	4291      	cmp	r1, r2
    2ea6:	db06      	blt.n	2eb6 <sliceable+0x2e>
		&& !z_is_thread_prevented_from_running(thread)
    2ea8:	7b5a      	ldrb	r2, [r3, #13]
    2eaa:	06d2      	lsls	r2, r2, #27
    2eac:	d103      	bne.n	2eb6 <sliceable+0x2e>
		&& !z_is_idle_thread_object(thread);
    2eae:	4805      	ldr	r0, [pc, #20]	; (2ec4 <sliceable+0x3c>)
    2eb0:	1a18      	subs	r0, r3, r0
    2eb2:	1e43      	subs	r3, r0, #1
    2eb4:	4198      	sbcs	r0, r3

#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
    2eb6:	2301      	movs	r3, #1
    2eb8:	4018      	ands	r0, r3
}
    2eba:	4770      	bx	lr
    2ebc:	200009a8 	.word	0x200009a8
    2ec0:	200009a4 	.word	0x200009a4
    2ec4:	20000768 	.word	0x20000768

00002ec8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
    2ec8:	b510      	push	{r4, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    2eca:	2800      	cmp	r0, #0
    2ecc:	d00e      	beq.n	2eec <slice_timeout+0x24>
    2ece:	4b11      	ldr	r3, [pc, #68]	; (2f14 <slice_timeout+0x4c>)
    2ed0:	4298      	cmp	r0, r3
    2ed2:	d30b      	bcc.n	2eec <slice_timeout+0x24>
    2ed4:	4a10      	ldr	r2, [pc, #64]	; (2f18 <slice_timeout+0x50>)
    2ed6:	4290      	cmp	r0, r2
    2ed8:	d208      	bcs.n	2eec <slice_timeout+0x24>
    2eda:	1ac0      	subs	r0, r0, r3
    2edc:	4b0f      	ldr	r3, [pc, #60]	; (2f1c <slice_timeout+0x54>)
    2ede:	2103      	movs	r1, #3
    2ee0:	001a      	movs	r2, r3
    2ee2:	4342      	muls	r2, r0
    2ee4:	41ca      	rors	r2, r1
    2ee6:	490e      	ldr	r1, [pc, #56]	; (2f20 <slice_timeout+0x58>)
    2ee8:	428a      	cmp	r2, r1
    2eea:	d90c      	bls.n	2f06 <slice_timeout+0x3e>
    2eec:	23c8      	movs	r3, #200	; 0xc8
    2eee:	4c0d      	ldr	r4, [pc, #52]	; (2f24 <slice_timeout+0x5c>)
    2ef0:	490d      	ldr	r1, [pc, #52]	; (2f28 <slice_timeout+0x60>)
    2ef2:	480e      	ldr	r0, [pc, #56]	; (2f2c <slice_timeout+0x64>)
    2ef4:	0022      	movs	r2, r4
    2ef6:	33ff      	adds	r3, #255	; 0xff
    2ef8:	f002 f94b 	bl	5192 <assert_print>
    2efc:	21c8      	movs	r1, #200	; 0xc8
    2efe:	0020      	movs	r0, r4
    2f00:	31ff      	adds	r1, #255	; 0xff
    2f02:	f002 f942 	bl	518a <assert_post_action>

	slice_expired[cpu] = true;
    2f06:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    2f08:	10c0      	asrs	r0, r0, #3
    2f0a:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
    2f0c:	4a08      	ldr	r2, [pc, #32]	; (2f30 <slice_timeout+0x68>)
    2f0e:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    2f10:	bd10      	pop	{r4, pc}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	20000888 	.word	0x20000888
    2f18:	200008a0 	.word	0x200008a0
    2f1c:	aaaaaaab 	.word	0xaaaaaaab
    2f20:	0aaaaaaa 	.word	0x0aaaaaaa
    2f24:	00006891 	.word	0x00006891
    2f28:	000068b3 	.word	0x000068b3
    2f2c:	00005d0d 	.word	0x00005d0d
    2f30:	200009f5 	.word	0x200009f5

00002f34 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    2f34:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
    2f36:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
    2f38:	4b0c      	ldr	r3, [pc, #48]	; (2f6c <z_reset_time_slice+0x38>)
{
    2f3a:	0005      	movs	r5, r0
	int cpu = _current_cpu->id;
    2f3c:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    2f3e:	4b0c      	ldr	r3, [pc, #48]	; (2f70 <z_reset_time_slice+0x3c>)
    2f40:	4374      	muls	r4, r6
    2f42:	18e4      	adds	r4, r4, r3
    2f44:	0020      	movs	r0, r4
    2f46:	f001 fa21 	bl	438c <z_abort_timeout>
	slice_expired[cpu] = false;
    2f4a:	2200      	movs	r2, #0
    2f4c:	4b09      	ldr	r3, [pc, #36]	; (2f74 <z_reset_time_slice+0x40>)
	if (sliceable(curr)) {
    2f4e:	0028      	movs	r0, r5
	slice_expired[cpu] = false;
    2f50:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    2f52:	f7ff ff99 	bl	2e88 <sliceable>
    2f56:	2800      	cmp	r0, #0
    2f58:	d007      	beq.n	2f6a <z_reset_time_slice+0x36>
	int ret = slice_ticks;
    2f5a:	4b07      	ldr	r3, [pc, #28]	; (2f78 <z_reset_time_slice+0x44>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    2f5c:	0020      	movs	r0, r4
			      K_TICKS(slice_time(curr) - 1));
    2f5e:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    2f60:	4906      	ldr	r1, [pc, #24]	; (2f7c <z_reset_time_slice+0x48>)
			      K_TICKS(slice_time(curr) - 1));
    2f62:	3a01      	subs	r2, #1
    2f64:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    2f66:	f001 f953 	bl	4210 <z_add_timeout>
	}
}
    2f6a:	bd70      	pop	{r4, r5, r6, pc}
    2f6c:	2000097c 	.word	0x2000097c
    2f70:	20000888 	.word	0x20000888
    2f74:	200009f5 	.word	0x200009f5
    2f78:	200009a8 	.word	0x200009a8
    2f7c:	00002ec9 	.word	0x00002ec9

00002f80 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    2f80:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
    2f82:	4d16      	ldr	r5, [pc, #88]	; (2fdc <update_cache+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2f84:	4b16      	ldr	r3, [pc, #88]	; (2fe0 <update_cache+0x60>)
	return list->head == list;
    2f86:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2f88:	429c      	cmp	r4, r3
    2f8a:	d001      	beq.n	2f90 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    2f8c:	2c00      	cmp	r4, #0
    2f8e:	d100      	bne.n	2f92 <update_cache+0x12>
    2f90:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    2f92:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    2f94:	2800      	cmp	r0, #0
    2f96:	d118      	bne.n	2fca <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d10d      	bne.n	2fb8 <update_cache+0x38>
    2f9c:	4c11      	ldr	r4, [pc, #68]	; (2fe4 <update_cache+0x64>)
    2f9e:	4912      	ldr	r1, [pc, #72]	; (2fe8 <update_cache+0x68>)
    2fa0:	0022      	movs	r2, r4
    2fa2:	4812      	ldr	r0, [pc, #72]	; (2fec <update_cache+0x6c>)
    2fa4:	338a      	adds	r3, #138	; 0x8a
    2fa6:	f002 f8f4 	bl	5192 <assert_print>
    2faa:	4811      	ldr	r0, [pc, #68]	; (2ff0 <update_cache+0x70>)
    2fac:	f002 f8f1 	bl	5192 <assert_print>
    2fb0:	218a      	movs	r1, #138	; 0x8a
    2fb2:	0020      	movs	r0, r4
    2fb4:	f002 f8e9 	bl	518a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    2fb8:	7b5a      	ldrb	r2, [r3, #13]
    2fba:	06d2      	lsls	r2, r2, #27
    2fbc:	d105      	bne.n	2fca <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2fbe:	69a2      	ldr	r2, [r4, #24]
    2fc0:	2a00      	cmp	r2, #0
    2fc2:	d102      	bne.n	2fca <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
    2fc4:	89da      	ldrh	r2, [r3, #14]
    2fc6:	2a7f      	cmp	r2, #127	; 0x7f
    2fc8:	d805      	bhi.n	2fd6 <update_cache+0x56>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    2fca:	429c      	cmp	r4, r3
    2fcc:	d002      	beq.n	2fd4 <update_cache+0x54>
			z_reset_time_slice(thread);
    2fce:	0020      	movs	r0, r4
    2fd0:	f7ff ffb0 	bl	2f34 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    2fd4:	0023      	movs	r3, r4
    2fd6:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    2fd8:	bd70      	pop	{r4, r5, r6, pc}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	2000097c 	.word	0x2000097c
    2fe0:	20000994 	.word	0x20000994
    2fe4:	00006891 	.word	0x00006891
    2fe8:	00006a4c 	.word	0x00006a4c
    2fec:	00005d0d 	.word	0x00005d0d
    2ff0:	00006a73 	.word	0x00006a73

00002ff4 <ready_thread>:
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    2ff4:	230d      	movs	r3, #13
{
    2ff6:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    2ff8:	56c3      	ldrsb	r3, [r0, r3]
	return (thread->base.thread_state & state) != 0U;
    2ffa:	7b41      	ldrb	r1, [r0, #13]
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	db34      	blt.n	306a <ready_thread+0x76>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3000:	06cb      	lsls	r3, r1, #27
    3002:	d132      	bne.n	306a <ready_thread+0x76>
	return node->next != NULL;
    3004:	6983      	ldr	r3, [r0, #24]
    3006:	2b00      	cmp	r3, #0
    3008:	d12f      	bne.n	306a <ready_thread+0x76>
	thread->base.thread_state |= _THREAD_QUEUED;
    300a:	2280      	movs	r2, #128	; 0x80
    300c:	4252      	negs	r2, r2
    300e:	430a      	orrs	r2, r1
    3010:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3012:	4a18      	ldr	r2, [pc, #96]	; (3074 <ready_thread+0x80>)
    3014:	4290      	cmp	r0, r2
    3016:	d10a      	bne.n	302e <ready_thread+0x3a>
    3018:	4c17      	ldr	r4, [pc, #92]	; (3078 <ready_thread+0x84>)
    301a:	4918      	ldr	r1, [pc, #96]	; (307c <ready_thread+0x88>)
    301c:	4818      	ldr	r0, [pc, #96]	; (3080 <ready_thread+0x8c>)
    301e:	0022      	movs	r2, r4
    3020:	33bc      	adds	r3, #188	; 0xbc
    3022:	f002 f8b6 	bl	5192 <assert_print>
    3026:	21bc      	movs	r1, #188	; 0xbc
    3028:	0020      	movs	r0, r4
    302a:	f002 f8ae 	bl	518a <assert_post_action>
	return list->head == list;
    302e:	4a15      	ldr	r2, [pc, #84]	; (3084 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3030:	4c15      	ldr	r4, [pc, #84]	; (3088 <ready_thread+0x94>)
	return list->head == list;
    3032:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3034:	42a1      	cmp	r1, r4
    3036:	d000      	beq.n	303a <ready_thread+0x46>
    3038:	000b      	movs	r3, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    303a:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    303c:	2b00      	cmp	r3, #0
    303e:	d104      	bne.n	304a <ready_thread+0x56>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
    3040:	6004      	str	r4, [r0, #0]
	node->prev = tail;
    3042:	6041      	str	r1, [r0, #4]

	tail->next = node;
    3044:	6008      	str	r0, [r1, #0]
	list->tail = node;
    3046:	61d0      	str	r0, [r2, #28]
}
    3048:	e00c      	b.n	3064 <ready_thread+0x70>
	int32_t b1 = thread_1->base.prio;
    304a:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
    304c:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
    304e:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
    3050:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
    3052:	42b5      	cmp	r5, r6
    3054:	d00a      	beq.n	306c <ready_thread+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3056:	42ae      	cmp	r6, r5
    3058:	dd08      	ble.n	306c <ready_thread+0x78>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    305a:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    305c:	6003      	str	r3, [r0, #0]
	node->prev = prev;
    305e:	6042      	str	r2, [r0, #4]
	prev->next = node;
    3060:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3062:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
    3064:	2000      	movs	r0, #0
    3066:	f7ff ff8b 	bl	2f80 <update_cache>
		flag_ipi();
	}
}
    306a:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    306c:	428b      	cmp	r3, r1
    306e:	d0e7      	beq.n	3040 <ready_thread+0x4c>
    3070:	681b      	ldr	r3, [r3, #0]
    3072:	e7e3      	b.n	303c <ready_thread+0x48>
    3074:	20000768 	.word	0x20000768
    3078:	00006891 	.word	0x00006891
    307c:	00006a76 	.word	0x00006a76
    3080:	00005d0d 	.word	0x00005d0d
    3084:	2000097c 	.word	0x2000097c
    3088:	20000994 	.word	0x20000994

0000308c <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    308c:	b570      	push	{r4, r5, r6, lr}
    308e:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    3090:	f3ef 8610 	mrs	r6, PRIMASK
    3094:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3096:	4c19      	ldr	r4, [pc, #100]	; (30fc <z_ready_thread+0x70>)
    3098:	0020      	movs	r0, r4
    309a:	f7ff fd43 	bl	2b24 <z_spin_lock_valid>
    309e:	2800      	cmp	r0, #0
    30a0:	d10e      	bne.n	30c0 <z_ready_thread+0x34>
    30a2:	4d17      	ldr	r5, [pc, #92]	; (3100 <z_ready_thread+0x74>)
    30a4:	2394      	movs	r3, #148	; 0x94
    30a6:	002a      	movs	r2, r5
    30a8:	4916      	ldr	r1, [pc, #88]	; (3104 <z_ready_thread+0x78>)
    30aa:	4817      	ldr	r0, [pc, #92]	; (3108 <z_ready_thread+0x7c>)
    30ac:	f002 f871 	bl	5192 <assert_print>
    30b0:	0021      	movs	r1, r4
    30b2:	4816      	ldr	r0, [pc, #88]	; (310c <z_ready_thread+0x80>)
    30b4:	f002 f86d 	bl	5192 <assert_print>
    30b8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    30ba:	0028      	movs	r0, r5
    30bc:	f002 f865 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    30c0:	0020      	movs	r0, r4
    30c2:	f7ff fd4d 	bl	2b60 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    30c6:	0028      	movs	r0, r5
    30c8:	f7ff ff94 	bl	2ff4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    30cc:	0020      	movs	r0, r4
    30ce:	f7ff fd39 	bl	2b44 <z_spin_unlock_valid>
    30d2:	2800      	cmp	r0, #0
    30d4:	d10c      	bne.n	30f0 <z_ready_thread+0x64>
    30d6:	4d0a      	ldr	r5, [pc, #40]	; (3100 <z_ready_thread+0x74>)
    30d8:	23c3      	movs	r3, #195	; 0xc3
    30da:	002a      	movs	r2, r5
    30dc:	490c      	ldr	r1, [pc, #48]	; (3110 <z_ready_thread+0x84>)
    30de:	480a      	ldr	r0, [pc, #40]	; (3108 <z_ready_thread+0x7c>)
    30e0:	f002 f857 	bl	5192 <assert_print>
    30e4:	0021      	movs	r1, r4
    30e6:	480b      	ldr	r0, [pc, #44]	; (3114 <z_ready_thread+0x88>)
    30e8:	f002 f853 	bl	5192 <assert_print>
    30ec:	21c3      	movs	r1, #195	; 0xc3
    30ee:	e7e4      	b.n	30ba <z_ready_thread+0x2e>
	if (key != 0U) {
    30f0:	2e00      	cmp	r6, #0
    30f2:	d102      	bne.n	30fa <z_ready_thread+0x6e>
	__asm__ volatile(
    30f4:	b662      	cpsie	i
    30f6:	f3bf 8f6f 	isb	sy
		}
	}
}
    30fa:	bd70      	pop	{r4, r5, r6, pc}
    30fc:	200009ac 	.word	0x200009ac
    3100:	000064e1 	.word	0x000064e1
    3104:	0000650e 	.word	0x0000650e
    3108:	00005d0d 	.word	0x00005d0d
    310c:	00006523 	.word	0x00006523
    3110:	0000653b 	.word	0x0000653b
    3114:	00006552 	.word	0x00006552

00003118 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3118:	b570      	push	{r4, r5, r6, lr}
    311a:	0004      	movs	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    311c:	2900      	cmp	r1, #0
    311e:	d11f      	bne.n	3160 <z_reschedule+0x48>
    3120:	f3ef 8505 	mrs	r5, IPSR
    3124:	2d00      	cmp	r5, #0
    3126:	d12c      	bne.n	3182 <z_reschedule+0x6a>
	new_thread = _kernel.ready_q.cache;
    3128:	4b1a      	ldr	r3, [pc, #104]	; (3194 <z_reschedule+0x7c>)
	if (resched(key.key) && need_swap()) {
    312a:	695a      	ldr	r2, [r3, #20]
    312c:	689b      	ldr	r3, [r3, #8]
    312e:	429a      	cmp	r2, r3
    3130:	d027      	beq.n	3182 <z_reschedule+0x6a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3132:	f7ff fd07 	bl	2b44 <z_spin_unlock_valid>
    3136:	2800      	cmp	r0, #0
    3138:	d10e      	bne.n	3158 <z_reschedule+0x40>
    313a:	4d17      	ldr	r5, [pc, #92]	; (3198 <z_reschedule+0x80>)
    313c:	23e2      	movs	r3, #226	; 0xe2
    313e:	002a      	movs	r2, r5
    3140:	4916      	ldr	r1, [pc, #88]	; (319c <z_reschedule+0x84>)
    3142:	4817      	ldr	r0, [pc, #92]	; (31a0 <z_reschedule+0x88>)
    3144:	f002 f825 	bl	5192 <assert_print>
    3148:	0021      	movs	r1, r4
    314a:	4816      	ldr	r0, [pc, #88]	; (31a4 <z_reschedule+0x8c>)
    314c:	f002 f821 	bl	5192 <assert_print>
    3150:	21e2      	movs	r1, #226	; 0xe2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3152:	0028      	movs	r0, r5
    3154:	f002 f819 	bl	518a <assert_post_action>
	ret = arch_swap(key);
    3158:	0028      	movs	r0, r5
    315a:	f7fd ff35 	bl	fc8 <arch_swap>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    315e:	bd70      	pop	{r4, r5, r6, pc}
    3160:	f7ff fcf0 	bl	2b44 <z_spin_unlock_valid>
    3164:	2800      	cmp	r0, #0
    3166:	d1fa      	bne.n	315e <z_reschedule+0x46>
    3168:	4d0b      	ldr	r5, [pc, #44]	; (3198 <z_reschedule+0x80>)
    316a:	23c3      	movs	r3, #195	; 0xc3
    316c:	002a      	movs	r2, r5
    316e:	490b      	ldr	r1, [pc, #44]	; (319c <z_reschedule+0x84>)
    3170:	480b      	ldr	r0, [pc, #44]	; (31a0 <z_reschedule+0x88>)
    3172:	f002 f80e 	bl	5192 <assert_print>
    3176:	0021      	movs	r1, r4
    3178:	480a      	ldr	r0, [pc, #40]	; (31a4 <z_reschedule+0x8c>)
    317a:	f002 f80a 	bl	5192 <assert_print>
    317e:	21c3      	movs	r1, #195	; 0xc3
    3180:	e7e7      	b.n	3152 <z_reschedule+0x3a>
    3182:	f7ff fcdf 	bl	2b44 <z_spin_unlock_valid>
    3186:	2800      	cmp	r0, #0
    3188:	d0ee      	beq.n	3168 <z_reschedule+0x50>
    318a:	b662      	cpsie	i
    318c:	f3bf 8f6f 	isb	sy
    3190:	e7e5      	b.n	315e <z_reschedule+0x46>
    3192:	46c0      	nop			; (mov r8, r8)
    3194:	2000097c 	.word	0x2000097c
    3198:	000064e1 	.word	0x000064e1
    319c:	0000653b 	.word	0x0000653b
    31a0:	00005d0d 	.word	0x00005d0d
    31a4:	00006552 	.word	0x00006552

000031a8 <z_sched_start>:
{
    31a8:	b570      	push	{r4, r5, r6, lr}
    31aa:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    31ac:	f3ef 8610 	mrs	r6, PRIMASK
    31b0:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    31b2:	4c1f      	ldr	r4, [pc, #124]	; (3230 <z_sched_start+0x88>)
    31b4:	0020      	movs	r0, r4
    31b6:	f7ff fcb5 	bl	2b24 <z_spin_lock_valid>
    31ba:	2800      	cmp	r0, #0
    31bc:	d10e      	bne.n	31dc <z_sched_start+0x34>
    31be:	4d1d      	ldr	r5, [pc, #116]	; (3234 <z_sched_start+0x8c>)
    31c0:	2394      	movs	r3, #148	; 0x94
    31c2:	002a      	movs	r2, r5
    31c4:	491c      	ldr	r1, [pc, #112]	; (3238 <z_sched_start+0x90>)
    31c6:	481d      	ldr	r0, [pc, #116]	; (323c <z_sched_start+0x94>)
    31c8:	f001 ffe3 	bl	5192 <assert_print>
    31cc:	0021      	movs	r1, r4
    31ce:	481c      	ldr	r0, [pc, #112]	; (3240 <z_sched_start+0x98>)
    31d0:	f001 ffdf 	bl	5192 <assert_print>
    31d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    31d6:	0028      	movs	r0, r5
    31d8:	f001 ffd7 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    31dc:	0020      	movs	r0, r4
    31de:	f7ff fcbf 	bl	2b60 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    31e2:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    31e4:	7b6b      	ldrb	r3, [r5, #13]
    31e6:	4213      	tst	r3, r2
    31e8:	d117      	bne.n	321a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    31ea:	0020      	movs	r0, r4
    31ec:	f7ff fcaa 	bl	2b44 <z_spin_unlock_valid>
    31f0:	2800      	cmp	r0, #0
    31f2:	d10c      	bne.n	320e <z_sched_start+0x66>
    31f4:	4d0f      	ldr	r5, [pc, #60]	; (3234 <z_sched_start+0x8c>)
    31f6:	23c3      	movs	r3, #195	; 0xc3
    31f8:	002a      	movs	r2, r5
    31fa:	4912      	ldr	r1, [pc, #72]	; (3244 <z_sched_start+0x9c>)
    31fc:	480f      	ldr	r0, [pc, #60]	; (323c <z_sched_start+0x94>)
    31fe:	f001 ffc8 	bl	5192 <assert_print>
    3202:	0021      	movs	r1, r4
    3204:	4810      	ldr	r0, [pc, #64]	; (3248 <z_sched_start+0xa0>)
    3206:	f001 ffc4 	bl	5192 <assert_print>
    320a:	21c3      	movs	r1, #195	; 0xc3
    320c:	e7e3      	b.n	31d6 <z_sched_start+0x2e>
	if (key != 0U) {
    320e:	2e00      	cmp	r6, #0
    3210:	d102      	bne.n	3218 <z_sched_start+0x70>
	__asm__ volatile(
    3212:	b662      	cpsie	i
    3214:	f3bf 8f6f 	isb	sy
}
    3218:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    321a:	4393      	bics	r3, r2
	ready_thread(thread);
    321c:	0028      	movs	r0, r5
    321e:	736b      	strb	r3, [r5, #13]
    3220:	f7ff fee8 	bl	2ff4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3224:	0031      	movs	r1, r6
    3226:	0020      	movs	r0, r4
    3228:	f7ff ff76 	bl	3118 <z_reschedule>
    322c:	e7f4      	b.n	3218 <z_sched_start+0x70>
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	200009ac 	.word	0x200009ac
    3234:	000064e1 	.word	0x000064e1
    3238:	0000650e 	.word	0x0000650e
    323c:	00005d0d 	.word	0x00005d0d
    3240:	00006523 	.word	0x00006523
    3244:	0000653b 	.word	0x0000653b
    3248:	00006552 	.word	0x00006552

0000324c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
    324c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    324e:	f3ef 8510 	mrs	r5, PRIMASK
    3252:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3254:	4c29      	ldr	r4, [pc, #164]	; (32fc <k_sched_lock+0xb0>)
    3256:	0020      	movs	r0, r4
    3258:	f7ff fc64 	bl	2b24 <z_spin_lock_valid>
    325c:	2800      	cmp	r0, #0
    325e:	d10d      	bne.n	327c <k_sched_lock+0x30>
    3260:	4d27      	ldr	r5, [pc, #156]	; (3300 <k_sched_lock+0xb4>)
    3262:	2394      	movs	r3, #148	; 0x94
    3264:	002a      	movs	r2, r5
    3266:	4927      	ldr	r1, [pc, #156]	; (3304 <k_sched_lock+0xb8>)
    3268:	4827      	ldr	r0, [pc, #156]	; (3308 <k_sched_lock+0xbc>)
    326a:	f001 ff92 	bl	5192 <assert_print>
    326e:	0021      	movs	r1, r4
    3270:	4826      	ldr	r0, [pc, #152]	; (330c <k_sched_lock+0xc0>)
    3272:	f001 ff8e 	bl	5192 <assert_print>
    3276:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3278:	0028      	movs	r0, r5
    327a:	e012      	b.n	32a2 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
    327c:	0020      	movs	r0, r4
    327e:	f7ff fc6f 	bl	2b60 <z_spin_lock_set_owner>
    3282:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    3286:	2b00      	cmp	r3, #0
    3288:	d00d      	beq.n	32a6 <k_sched_lock+0x5a>
    328a:	4c21      	ldr	r4, [pc, #132]	; (3310 <k_sched_lock+0xc4>)
    328c:	4921      	ldr	r1, [pc, #132]	; (3314 <k_sched_lock+0xc8>)
    328e:	23fd      	movs	r3, #253	; 0xfd
    3290:	0022      	movs	r2, r4
    3292:	481d      	ldr	r0, [pc, #116]	; (3308 <k_sched_lock+0xbc>)
    3294:	f001 ff7d 	bl	5192 <assert_print>
    3298:	481f      	ldr	r0, [pc, #124]	; (3318 <k_sched_lock+0xcc>)
    329a:	f001 ff7a 	bl	5192 <assert_print>
    329e:	21fd      	movs	r1, #253	; 0xfd
    32a0:	0020      	movs	r0, r4
    32a2:	f001 ff72 	bl	518a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    32a6:	4b1d      	ldr	r3, [pc, #116]	; (331c <k_sched_lock+0xd0>)
    32a8:	689a      	ldr	r2, [r3, #8]
    32aa:	7bd3      	ldrb	r3, [r2, #15]
    32ac:	2b01      	cmp	r3, #1
    32ae:	d10b      	bne.n	32c8 <k_sched_lock+0x7c>
    32b0:	4c17      	ldr	r4, [pc, #92]	; (3310 <k_sched_lock+0xc4>)
    32b2:	491b      	ldr	r1, [pc, #108]	; (3320 <k_sched_lock+0xd4>)
    32b4:	0022      	movs	r2, r4
    32b6:	4814      	ldr	r0, [pc, #80]	; (3308 <k_sched_lock+0xbc>)
    32b8:	33fd      	adds	r3, #253	; 0xfd
    32ba:	f001 ff6a 	bl	5192 <assert_print>
    32be:	4816      	ldr	r0, [pc, #88]	; (3318 <k_sched_lock+0xcc>)
    32c0:	f001 ff67 	bl	5192 <assert_print>
    32c4:	21fe      	movs	r1, #254	; 0xfe
    32c6:	e7eb      	b.n	32a0 <k_sched_lock+0x54>

	--_current->base.sched_locked;
    32c8:	3b01      	subs	r3, #1
    32ca:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    32cc:	0020      	movs	r0, r4
    32ce:	f7ff fc39 	bl	2b44 <z_spin_unlock_valid>
    32d2:	2800      	cmp	r0, #0
    32d4:	d10c      	bne.n	32f0 <k_sched_lock+0xa4>
    32d6:	4d0a      	ldr	r5, [pc, #40]	; (3300 <k_sched_lock+0xb4>)
    32d8:	23c3      	movs	r3, #195	; 0xc3
    32da:	002a      	movs	r2, r5
    32dc:	4911      	ldr	r1, [pc, #68]	; (3324 <k_sched_lock+0xd8>)
    32de:	480a      	ldr	r0, [pc, #40]	; (3308 <k_sched_lock+0xbc>)
    32e0:	f001 ff57 	bl	5192 <assert_print>
    32e4:	0021      	movs	r1, r4
    32e6:	4810      	ldr	r0, [pc, #64]	; (3328 <k_sched_lock+0xdc>)
    32e8:	f001 ff53 	bl	5192 <assert_print>
    32ec:	21c3      	movs	r1, #195	; 0xc3
    32ee:	e7c3      	b.n	3278 <k_sched_lock+0x2c>
	if (key != 0U) {
    32f0:	2d00      	cmp	r5, #0
    32f2:	d102      	bne.n	32fa <k_sched_lock+0xae>
	__asm__ volatile(
    32f4:	b662      	cpsie	i
    32f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    32fa:	bd70      	pop	{r4, r5, r6, pc}
    32fc:	200009ac 	.word	0x200009ac
    3300:	000064e1 	.word	0x000064e1
    3304:	0000650e 	.word	0x0000650e
    3308:	00005d0d 	.word	0x00005d0d
    330c:	00006523 	.word	0x00006523
    3310:	00006a97 	.word	0x00006a97
    3314:	00006786 	.word	0x00006786
    3318:	00006a73 	.word	0x00006a73
    331c:	2000097c 	.word	0x2000097c
    3320:	00006ac2 	.word	0x00006ac2
    3324:	0000653b 	.word	0x0000653b
    3328:	00006552 	.word	0x00006552

0000332c <k_sched_unlock>:

void k_sched_unlock(void)
{
    332c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    332e:	f3ef 8510 	mrs	r5, PRIMASK
    3332:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3334:	4c2c      	ldr	r4, [pc, #176]	; (33e8 <k_sched_unlock+0xbc>)
    3336:	0020      	movs	r0, r4
    3338:	f7ff fbf4 	bl	2b24 <z_spin_lock_valid>
    333c:	2800      	cmp	r0, #0
    333e:	d10d      	bne.n	335c <k_sched_unlock+0x30>
    3340:	4d2a      	ldr	r5, [pc, #168]	; (33ec <k_sched_unlock+0xc0>)
    3342:	2394      	movs	r3, #148	; 0x94
    3344:	002a      	movs	r2, r5
    3346:	492a      	ldr	r1, [pc, #168]	; (33f0 <k_sched_unlock+0xc4>)
    3348:	482a      	ldr	r0, [pc, #168]	; (33f4 <k_sched_unlock+0xc8>)
    334a:	f001 ff22 	bl	5192 <assert_print>
    334e:	0021      	movs	r1, r4
    3350:	4829      	ldr	r0, [pc, #164]	; (33f8 <k_sched_unlock+0xcc>)
    3352:	f001 ff1e 	bl	5192 <assert_print>
    3356:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3358:	0028      	movs	r0, r5
    335a:	e013      	b.n	3384 <k_sched_unlock+0x58>
	z_spin_lock_set_owner(l);
    335c:	0020      	movs	r0, r4
    335e:	f7ff fbff 	bl	2b60 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    3362:	4b26      	ldr	r3, [pc, #152]	; (33fc <k_sched_unlock+0xd0>)
    3364:	689a      	ldr	r2, [r3, #8]
    3366:	7bd3      	ldrb	r3, [r2, #15]
    3368:	2b00      	cmp	r3, #0
    336a:	d10d      	bne.n	3388 <k_sched_unlock+0x5c>
    336c:	4c24      	ldr	r4, [pc, #144]	; (3400 <k_sched_unlock+0xd4>)
    336e:	4925      	ldr	r1, [pc, #148]	; (3404 <k_sched_unlock+0xd8>)
    3370:	0022      	movs	r2, r4
    3372:	4820      	ldr	r0, [pc, #128]	; (33f4 <k_sched_unlock+0xc8>)
    3374:	4b24      	ldr	r3, [pc, #144]	; (3408 <k_sched_unlock+0xdc>)
    3376:	f001 ff0c 	bl	5192 <assert_print>
    337a:	4824      	ldr	r0, [pc, #144]	; (340c <k_sched_unlock+0xe0>)
    337c:	f001 ff09 	bl	5192 <assert_print>
    3380:	4921      	ldr	r1, [pc, #132]	; (3408 <k_sched_unlock+0xdc>)
    3382:	0020      	movs	r0, r4
    3384:	f001 ff01 	bl	518a <assert_post_action>
    3388:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    338c:	2800      	cmp	r0, #0
    338e:	d00d      	beq.n	33ac <k_sched_unlock+0x80>
    3390:	23fb      	movs	r3, #251	; 0xfb
    3392:	4c1b      	ldr	r4, [pc, #108]	; (3400 <k_sched_unlock+0xd4>)
    3394:	491e      	ldr	r1, [pc, #120]	; (3410 <k_sched_unlock+0xe4>)
    3396:	0022      	movs	r2, r4
    3398:	4816      	ldr	r0, [pc, #88]	; (33f4 <k_sched_unlock+0xc8>)
    339a:	009b      	lsls	r3, r3, #2
    339c:	f001 fef9 	bl	5192 <assert_print>
    33a0:	481a      	ldr	r0, [pc, #104]	; (340c <k_sched_unlock+0xe0>)
    33a2:	f001 fef6 	bl	5192 <assert_print>
    33a6:	21fb      	movs	r1, #251	; 0xfb
    33a8:	0089      	lsls	r1, r1, #2
    33aa:	e7ea      	b.n	3382 <k_sched_unlock+0x56>

		++_current->base.sched_locked;
    33ac:	3301      	adds	r3, #1
    33ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    33b0:	f7ff fde6 	bl	2f80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    33b4:	0020      	movs	r0, r4
    33b6:	f7ff fbc5 	bl	2b44 <z_spin_unlock_valid>
    33ba:	2800      	cmp	r0, #0
    33bc:	d10c      	bne.n	33d8 <k_sched_unlock+0xac>
    33be:	4d0b      	ldr	r5, [pc, #44]	; (33ec <k_sched_unlock+0xc0>)
    33c0:	23c3      	movs	r3, #195	; 0xc3
    33c2:	002a      	movs	r2, r5
    33c4:	4913      	ldr	r1, [pc, #76]	; (3414 <k_sched_unlock+0xe8>)
    33c6:	480b      	ldr	r0, [pc, #44]	; (33f4 <k_sched_unlock+0xc8>)
    33c8:	f001 fee3 	bl	5192 <assert_print>
    33cc:	0021      	movs	r1, r4
    33ce:	4812      	ldr	r0, [pc, #72]	; (3418 <k_sched_unlock+0xec>)
    33d0:	f001 fedf 	bl	5192 <assert_print>
    33d4:	21c3      	movs	r1, #195	; 0xc3
    33d6:	e7bf      	b.n	3358 <k_sched_unlock+0x2c>
	if (key != 0U) {
    33d8:	2d00      	cmp	r5, #0
    33da:	d102      	bne.n	33e2 <k_sched_unlock+0xb6>
	__asm__ volatile(
    33dc:	b662      	cpsie	i
    33de:	f3bf 8f6f 	isb	sy
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    33e2:	f002 f8d9 	bl	5598 <z_reschedule_unlocked>
}
    33e6:	bd70      	pop	{r4, r5, r6, pc}
    33e8:	200009ac 	.word	0x200009ac
    33ec:	000064e1 	.word	0x000064e1
    33f0:	0000650e 	.word	0x0000650e
    33f4:	00005d0d 	.word	0x00005d0d
    33f8:	00006523 	.word	0x00006523
    33fc:	2000097c 	.word	0x2000097c
    3400:	00006891 	.word	0x00006891
    3404:	00006af3 	.word	0x00006af3
    3408:	000003eb 	.word	0x000003eb
    340c:	00006a73 	.word	0x00006a73
    3410:	00006786 	.word	0x00006786
    3414:	0000653b 	.word	0x0000653b
    3418:	00006552 	.word	0x00006552

0000341c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    341c:	4b0b      	ldr	r3, [pc, #44]	; (344c <z_priq_dumb_remove+0x30>)
{
    341e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3420:	4299      	cmp	r1, r3
    3422:	d10a      	bne.n	343a <z_priq_dumb_remove+0x1e>
    3424:	4c0a      	ldr	r4, [pc, #40]	; (3450 <z_priq_dumb_remove+0x34>)
    3426:	490b      	ldr	r1, [pc, #44]	; (3454 <z_priq_dumb_remove+0x38>)
    3428:	480b      	ldr	r0, [pc, #44]	; (3458 <z_priq_dumb_remove+0x3c>)
    342a:	0022      	movs	r2, r4
    342c:	4b0b      	ldr	r3, [pc, #44]	; (345c <z_priq_dumb_remove+0x40>)
    342e:	f001 feb0 	bl	5192 <assert_print>
    3432:	0020      	movs	r0, r4
    3434:	4909      	ldr	r1, [pc, #36]	; (345c <z_priq_dumb_remove+0x40>)
    3436:	f001 fea8 	bl	518a <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    343a:	680b      	ldr	r3, [r1, #0]
	sys_dnode_t *const prev = node->prev;
    343c:	684a      	ldr	r2, [r1, #4]

	prev->next = next;
    343e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3440:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3442:	2300      	movs	r3, #0
    3444:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    3446:	604b      	str	r3, [r1, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3448:	bd10      	pop	{r4, pc}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	20000768 	.word	0x20000768
    3450:	00006891 	.word	0x00006891
    3454:	00006a76 	.word	0x00006a76
    3458:	00005d0d 	.word	0x00005d0d
    345c:	0000047b 	.word	0x0000047b

00003460 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
    3460:	220d      	movs	r2, #13
{
    3462:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3464:	5682      	ldrsb	r2, [r0, r2]
{
    3466:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
    3468:	7b43      	ldrb	r3, [r0, #13]
    346a:	4d21      	ldr	r5, [pc, #132]	; (34f0 <move_thread_to_end_of_prio_q+0x90>)
	if (z_is_thread_queued(thread)) {
    346c:	2a00      	cmp	r2, #0
    346e:	da06      	bge.n	347e <move_thread_to_end_of_prio_q+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3470:	227f      	movs	r2, #127	; 0x7f
    3472:	4013      	ands	r3, r2
	_priq_run_remove(thread_runq(thread), thread);
    3474:	0001      	movs	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3476:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3478:	0028      	movs	r0, r5
    347a:	f7ff ffcf 	bl	341c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    347e:	2380      	movs	r3, #128	; 0x80
    3480:	7b62      	ldrb	r2, [r4, #13]
    3482:	425b      	negs	r3, r3
    3484:	4313      	orrs	r3, r2
    3486:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3488:	4b1a      	ldr	r3, [pc, #104]	; (34f4 <move_thread_to_end_of_prio_q+0x94>)
    348a:	429c      	cmp	r4, r3
    348c:	d10a      	bne.n	34a4 <move_thread_to_end_of_prio_q+0x44>
    348e:	4c1a      	ldr	r4, [pc, #104]	; (34f8 <move_thread_to_end_of_prio_q+0x98>)
    3490:	491a      	ldr	r1, [pc, #104]	; (34fc <move_thread_to_end_of_prio_q+0x9c>)
    3492:	481b      	ldr	r0, [pc, #108]	; (3500 <move_thread_to_end_of_prio_q+0xa0>)
    3494:	23bc      	movs	r3, #188	; 0xbc
    3496:	0022      	movs	r2, r4
    3498:	f001 fe7b 	bl	5192 <assert_print>
    349c:	21bc      	movs	r1, #188	; 0xbc
    349e:	0020      	movs	r0, r4
    34a0:	f001 fe73 	bl	518a <assert_post_action>
	return list->head == list;
    34a4:	4a17      	ldr	r2, [pc, #92]	; (3504 <move_thread_to_end_of_prio_q+0xa4>)
    34a6:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34a8:	42ab      	cmp	r3, r5
    34aa:	d100      	bne.n	34ae <move_thread_to_end_of_prio_q+0x4e>
    34ac:	2300      	movs	r3, #0
	return (node == list->tail) ? NULL : node->next;
    34ae:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    34b0:	2b00      	cmp	r3, #0
    34b2:	d104      	bne.n	34be <move_thread_to_end_of_prio_q+0x5e>
	node->next = list;
    34b4:	6025      	str	r5, [r4, #0]
	node->prev = tail;
    34b6:	6061      	str	r1, [r4, #4]
	tail->next = node;
    34b8:	600c      	str	r4, [r1, #0]
	list->tail = node;
    34ba:	61d4      	str	r4, [r2, #28]
}
    34bc:	e00c      	b.n	34d8 <move_thread_to_end_of_prio_q+0x78>
	int32_t b1 = thread_1->base.prio;
    34be:	200e      	movs	r0, #14
	int32_t b2 = thread_2->base.prio;
    34c0:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
    34c2:	5620      	ldrsb	r0, [r4, r0]
	int32_t b2 = thread_2->base.prio;
    34c4:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
    34c6:	42b0      	cmp	r0, r6
    34c8:	d00d      	beq.n	34e6 <move_thread_to_end_of_prio_q+0x86>
		if (z_sched_prio_cmp(thread, t) > 0) {
    34ca:	4286      	cmp	r6, r0
    34cc:	dd0b      	ble.n	34e6 <move_thread_to_end_of_prio_q+0x86>
	sys_dnode_t *const prev = successor->prev;
    34ce:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    34d0:	6023      	str	r3, [r4, #0]
	node->prev = prev;
    34d2:	6061      	str	r1, [r4, #4]
	prev->next = node;
    34d4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    34d6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    34d8:	6890      	ldr	r0, [r2, #8]
    34da:	1b00      	subs	r0, r0, r4
    34dc:	4243      	negs	r3, r0
    34de:	4158      	adcs	r0, r3
    34e0:	f7ff fd4e 	bl	2f80 <update_cache>
}
    34e4:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
    34e6:	4299      	cmp	r1, r3
    34e8:	d0e4      	beq.n	34b4 <move_thread_to_end_of_prio_q+0x54>
    34ea:	681b      	ldr	r3, [r3, #0]
    34ec:	e7e0      	b.n	34b0 <move_thread_to_end_of_prio_q+0x50>
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	20000994 	.word	0x20000994
    34f4:	20000768 	.word	0x20000768
    34f8:	00006891 	.word	0x00006891
    34fc:	00006a76 	.word	0x00006a76
    3500:	00005d0d 	.word	0x00005d0d
    3504:	2000097c 	.word	0x2000097c

00003508 <z_time_slice>:
{
    3508:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    350a:	f3ef 8610 	mrs	r6, PRIMASK
    350e:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3510:	4c25      	ldr	r4, [pc, #148]	; (35a8 <z_time_slice+0xa0>)
    3512:	0020      	movs	r0, r4
    3514:	f7ff fb06 	bl	2b24 <z_spin_lock_valid>
    3518:	2800      	cmp	r0, #0
    351a:	d10e      	bne.n	353a <z_time_slice+0x32>
    351c:	4d23      	ldr	r5, [pc, #140]	; (35ac <z_time_slice+0xa4>)
    351e:	2394      	movs	r3, #148	; 0x94
    3520:	002a      	movs	r2, r5
    3522:	4923      	ldr	r1, [pc, #140]	; (35b0 <z_time_slice+0xa8>)
    3524:	4823      	ldr	r0, [pc, #140]	; (35b4 <z_time_slice+0xac>)
    3526:	f001 fe34 	bl	5192 <assert_print>
    352a:	0021      	movs	r1, r4
    352c:	4822      	ldr	r0, [pc, #136]	; (35b8 <z_time_slice+0xb0>)
    352e:	f001 fe30 	bl	5192 <assert_print>
    3532:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3534:	0028      	movs	r0, r5
    3536:	f001 fe28 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    353a:	0020      	movs	r0, r4
    353c:	f7ff fb10 	bl	2b60 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
    3540:	4a1e      	ldr	r2, [pc, #120]	; (35bc <z_time_slice+0xb4>)
	if (pending_current == curr) {
    3542:	4b1f      	ldr	r3, [pc, #124]	; (35c0 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
    3544:	6895      	ldr	r5, [r2, #8]
	if (pending_current == curr) {
    3546:	6818      	ldr	r0, [r3, #0]
    3548:	42a8      	cmp	r0, r5
    354a:	d113      	bne.n	3574 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
    354c:	f7ff fcf2 	bl	2f34 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3550:	0020      	movs	r0, r4
    3552:	f7ff faf7 	bl	2b44 <z_spin_unlock_valid>
    3556:	2800      	cmp	r0, #0
    3558:	d120      	bne.n	359c <z_time_slice+0x94>
    355a:	4d14      	ldr	r5, [pc, #80]	; (35ac <z_time_slice+0xa4>)
    355c:	23c3      	movs	r3, #195	; 0xc3
    355e:	002a      	movs	r2, r5
    3560:	4918      	ldr	r1, [pc, #96]	; (35c4 <z_time_slice+0xbc>)
    3562:	4814      	ldr	r0, [pc, #80]	; (35b4 <z_time_slice+0xac>)
    3564:	f001 fe15 	bl	5192 <assert_print>
    3568:	0021      	movs	r1, r4
    356a:	4817      	ldr	r0, [pc, #92]	; (35c8 <z_time_slice+0xc0>)
    356c:	f001 fe11 	bl	5192 <assert_print>
    3570:	21c3      	movs	r1, #195	; 0xc3
    3572:	e7df      	b.n	3534 <z_time_slice+0x2c>
	pending_current = NULL;
    3574:	2100      	movs	r1, #0
    3576:	6019      	str	r1, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3578:	7c12      	ldrb	r2, [r2, #16]
    357a:	4b14      	ldr	r3, [pc, #80]	; (35cc <z_time_slice+0xc4>)
    357c:	5c9b      	ldrb	r3, [r3, r2]
    357e:	428b      	cmp	r3, r1
    3580:	d0e6      	beq.n	3550 <z_time_slice+0x48>
    3582:	0028      	movs	r0, r5
    3584:	f7ff fc80 	bl	2e88 <sliceable>
    3588:	2800      	cmp	r0, #0
    358a:	d0e1      	beq.n	3550 <z_time_slice+0x48>
		if (!z_is_thread_prevented_from_running(curr)) {
    358c:	7b6b      	ldrb	r3, [r5, #13]
    358e:	06db      	lsls	r3, r3, #27
    3590:	d102      	bne.n	3598 <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
    3592:	0028      	movs	r0, r5
    3594:	f7ff ff64 	bl	3460 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    3598:	0028      	movs	r0, r5
    359a:	e7d7      	b.n	354c <z_time_slice+0x44>
	if (key != 0U) {
    359c:	2e00      	cmp	r6, #0
    359e:	d102      	bne.n	35a6 <z_time_slice+0x9e>
	__asm__ volatile(
    35a0:	b662      	cpsie	i
    35a2:	f3bf 8f6f 	isb	sy
}
    35a6:	bd70      	pop	{r4, r5, r6, pc}
    35a8:	200009ac 	.word	0x200009ac
    35ac:	000064e1 	.word	0x000064e1
    35b0:	0000650e 	.word	0x0000650e
    35b4:	00005d0d 	.word	0x00005d0d
    35b8:	00006523 	.word	0x00006523
    35bc:	2000097c 	.word	0x2000097c
    35c0:	200009a0 	.word	0x200009a0
    35c4:	0000653b 	.word	0x0000653b
    35c8:	00006552 	.word	0x00006552
    35cc:	200009f5 	.word	0x200009f5

000035d0 <unready_thread>:
	if (z_is_thread_queued(thread)) {
    35d0:	220d      	movs	r2, #13
{
    35d2:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    35d4:	5682      	ldrsb	r2, [r0, r2]
{
    35d6:	0004      	movs	r4, r0
    35d8:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
    35da:	2a00      	cmp	r2, #0
    35dc:	da06      	bge.n	35ec <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    35de:	227f      	movs	r2, #127	; 0x7f
    35e0:	4013      	ands	r3, r2
    35e2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    35e4:	0021      	movs	r1, r4
    35e6:	4805      	ldr	r0, [pc, #20]	; (35fc <unready_thread+0x2c>)
    35e8:	f7ff ff18 	bl	341c <z_priq_dumb_remove>
	update_cache(thread == _current);
    35ec:	4b04      	ldr	r3, [pc, #16]	; (3600 <unready_thread+0x30>)
    35ee:	6898      	ldr	r0, [r3, #8]
    35f0:	1b00      	subs	r0, r0, r4
    35f2:	4243      	negs	r3, r0
    35f4:	4158      	adcs	r0, r3
    35f6:	f7ff fcc3 	bl	2f80 <update_cache>
}
    35fa:	bd10      	pop	{r4, pc}
    35fc:	20000994 	.word	0x20000994
    3600:	2000097c 	.word	0x2000097c

00003604 <add_to_waitq_locked>:
{
    3604:	b570      	push	{r4, r5, r6, lr}
    3606:	0004      	movs	r4, r0
    3608:	000d      	movs	r5, r1
	unready_thread(thread);
    360a:	f7ff ffe1 	bl	35d0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    360e:	2302      	movs	r3, #2
    3610:	7b62      	ldrb	r2, [r4, #13]
    3612:	4313      	orrs	r3, r2
    3614:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3616:	2d00      	cmp	r5, #0
    3618:	d02a      	beq.n	3670 <add_to_waitq_locked+0x6c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    361a:	4b16      	ldr	r3, [pc, #88]	; (3674 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    361c:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    361e:	429c      	cmp	r4, r3
    3620:	d10a      	bne.n	3638 <add_to_waitq_locked+0x34>
    3622:	4c15      	ldr	r4, [pc, #84]	; (3678 <add_to_waitq_locked+0x74>)
    3624:	4915      	ldr	r1, [pc, #84]	; (367c <add_to_waitq_locked+0x78>)
    3626:	4816      	ldr	r0, [pc, #88]	; (3680 <add_to_waitq_locked+0x7c>)
    3628:	23bc      	movs	r3, #188	; 0xbc
    362a:	0022      	movs	r2, r4
    362c:	f001 fdb1 	bl	5192 <assert_print>
    3630:	21bc      	movs	r1, #188	; 0xbc
    3632:	0020      	movs	r0, r4
    3634:	f001 fda9 	bl	518a <assert_post_action>
	return list->head == list;
    3638:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    363a:	429d      	cmp	r5, r3
    363c:	d109      	bne.n	3652 <add_to_waitq_locked+0x4e>
	sys_dnode_t *const tail = list->tail;
    363e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    3640:	6025      	str	r5, [r4, #0]
	node->prev = tail;
    3642:	6063      	str	r3, [r4, #4]
	tail->next = node;
    3644:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3646:	606c      	str	r4, [r5, #4]
}
    3648:	e012      	b.n	3670 <add_to_waitq_locked+0x6c>
	return (node == list->tail) ? NULL : node->next;
    364a:	686a      	ldr	r2, [r5, #4]
    364c:	4293      	cmp	r3, r2
    364e:	d0f6      	beq.n	363e <add_to_waitq_locked+0x3a>
    3650:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3652:	2b00      	cmp	r3, #0
    3654:	d0f3      	beq.n	363e <add_to_waitq_locked+0x3a>
	int32_t b1 = thread_1->base.prio;
    3656:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
    3658:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
    365a:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
    365c:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
    365e:	428a      	cmp	r2, r1
    3660:	d0f3      	beq.n	364a <add_to_waitq_locked+0x46>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3662:	4291      	cmp	r1, r2
    3664:	ddf1      	ble.n	364a <add_to_waitq_locked+0x46>
	sys_dnode_t *const prev = successor->prev;
    3666:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3668:	6023      	str	r3, [r4, #0]
	node->prev = prev;
    366a:	6062      	str	r2, [r4, #4]
	prev->next = node;
    366c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    366e:	605c      	str	r4, [r3, #4]
}
    3670:	bd70      	pop	{r4, r5, r6, pc}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	20000768 	.word	0x20000768
    3678:	00006891 	.word	0x00006891
    367c:	00006a76 	.word	0x00006a76
    3680:	00005d0d 	.word	0x00005d0d

00003684 <pend_locked>:
{
    3684:	b570      	push	{r4, r5, r6, lr}
    3686:	001d      	movs	r5, r3
    3688:	0016      	movs	r6, r2
    368a:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
    368c:	f7ff ffba 	bl	3604 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    3690:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3692:	1c72      	adds	r2, r6, #1
    3694:	d101      	bne.n	369a <pend_locked+0x16>
    3696:	3301      	adds	r3, #1
    3698:	d006      	beq.n	36a8 <pend_locked+0x24>
    369a:	0020      	movs	r0, r4
    369c:	0032      	movs	r2, r6
    369e:	002b      	movs	r3, r5
    36a0:	4902      	ldr	r1, [pc, #8]	; (36ac <pend_locked+0x28>)
    36a2:	3018      	adds	r0, #24
    36a4:	f000 fdb4 	bl	4210 <z_add_timeout>
}
    36a8:	bd70      	pop	{r4, r5, r6, pc}
    36aa:	46c0      	nop			; (mov r8, r8)
    36ac:	000055a7 	.word	0x000055a7

000036b0 <z_pend_curr>:
{
    36b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	pending_current = _current;
    36b2:	4f2e      	ldr	r7, [pc, #184]	; (376c <z_pend_curr+0xbc>)
    36b4:	4b2e      	ldr	r3, [pc, #184]	; (3770 <z_pend_curr+0xc0>)
{
    36b6:	9201      	str	r2, [sp, #4]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    36b8:	4c2e      	ldr	r4, [pc, #184]	; (3774 <z_pend_curr+0xc4>)
	pending_current = _current;
    36ba:	68ba      	ldr	r2, [r7, #8]
{
    36bc:	0005      	movs	r5, r0
    36be:	000e      	movs	r6, r1
	pending_current = _current;
    36c0:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    36c2:	42a0      	cmp	r0, r4
    36c4:	d109      	bne.n	36da <z_pend_curr+0x2a>
    36c6:	4c2c      	ldr	r4, [pc, #176]	; (3778 <z_pend_curr+0xc8>)
    36c8:	492c      	ldr	r1, [pc, #176]	; (377c <z_pend_curr+0xcc>)
    36ca:	0022      	movs	r2, r4
    36cc:	482c      	ldr	r0, [pc, #176]	; (3780 <z_pend_curr+0xd0>)
    36ce:	4b2d      	ldr	r3, [pc, #180]	; (3784 <z_pend_curr+0xd4>)
    36d0:	f001 fd5f 	bl	5192 <assert_print>
    36d4:	492b      	ldr	r1, [pc, #172]	; (3784 <z_pend_curr+0xd4>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    36d6:	0020      	movs	r0, r4
    36d8:	e014      	b.n	3704 <z_pend_curr+0x54>
	__asm__ volatile("mrs %0, PRIMASK;"
    36da:	f3ef 8310 	mrs	r3, PRIMASK
    36de:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    36e0:	0020      	movs	r0, r4
    36e2:	f7ff fa1f 	bl	2b24 <z_spin_lock_valid>
    36e6:	2800      	cmp	r0, #0
    36e8:	d10e      	bne.n	3708 <z_pend_curr+0x58>
    36ea:	4d27      	ldr	r5, [pc, #156]	; (3788 <z_pend_curr+0xd8>)
    36ec:	2394      	movs	r3, #148	; 0x94
    36ee:	002a      	movs	r2, r5
    36f0:	4926      	ldr	r1, [pc, #152]	; (378c <z_pend_curr+0xdc>)
    36f2:	4823      	ldr	r0, [pc, #140]	; (3780 <z_pend_curr+0xd0>)
    36f4:	f001 fd4d 	bl	5192 <assert_print>
    36f8:	0021      	movs	r1, r4
    36fa:	4825      	ldr	r0, [pc, #148]	; (3790 <z_pend_curr+0xe0>)
    36fc:	f001 fd49 	bl	5192 <assert_print>
    3700:	2194      	movs	r1, #148	; 0x94
    3702:	0028      	movs	r0, r5
    3704:	f001 fd41 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    3708:	0020      	movs	r0, r4
    370a:	f7ff fa29 	bl	2b60 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
    370e:	9a08      	ldr	r2, [sp, #32]
    3710:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3712:	68b8      	ldr	r0, [r7, #8]
    3714:	9901      	ldr	r1, [sp, #4]
    3716:	f7ff ffb5 	bl	3684 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    371a:	0028      	movs	r0, r5
    371c:	f7ff fa12 	bl	2b44 <z_spin_unlock_valid>
    3720:	2800      	cmp	r0, #0
    3722:	d10c      	bne.n	373e <z_pend_curr+0x8e>
    3724:	4c18      	ldr	r4, [pc, #96]	; (3788 <z_pend_curr+0xd8>)
    3726:	23e2      	movs	r3, #226	; 0xe2
    3728:	0022      	movs	r2, r4
    372a:	491a      	ldr	r1, [pc, #104]	; (3794 <z_pend_curr+0xe4>)
    372c:	4814      	ldr	r0, [pc, #80]	; (3780 <z_pend_curr+0xd0>)
    372e:	f001 fd30 	bl	5192 <assert_print>
    3732:	0029      	movs	r1, r5
    3734:	4818      	ldr	r0, [pc, #96]	; (3798 <z_pend_curr+0xe8>)
    3736:	f001 fd2c 	bl	5192 <assert_print>
    373a:	21e2      	movs	r1, #226	; 0xe2
    373c:	e7cb      	b.n	36d6 <z_pend_curr+0x26>
    373e:	0020      	movs	r0, r4
    3740:	f7ff fa00 	bl	2b44 <z_spin_unlock_valid>
    3744:	2800      	cmp	r0, #0
    3746:	d10c      	bne.n	3762 <z_pend_curr+0xb2>
    3748:	4d0f      	ldr	r5, [pc, #60]	; (3788 <z_pend_curr+0xd8>)
    374a:	23e2      	movs	r3, #226	; 0xe2
    374c:	002a      	movs	r2, r5
    374e:	4911      	ldr	r1, [pc, #68]	; (3794 <z_pend_curr+0xe4>)
    3750:	480b      	ldr	r0, [pc, #44]	; (3780 <z_pend_curr+0xd0>)
    3752:	f001 fd1e 	bl	5192 <assert_print>
    3756:	0021      	movs	r1, r4
    3758:	480f      	ldr	r0, [pc, #60]	; (3798 <z_pend_curr+0xe8>)
    375a:	f001 fd1a 	bl	5192 <assert_print>
    375e:	21e2      	movs	r1, #226	; 0xe2
    3760:	e7cf      	b.n	3702 <z_pend_curr+0x52>
    3762:	0030      	movs	r0, r6
    3764:	f7fd fc30 	bl	fc8 <arch_swap>
}
    3768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    376a:	46c0      	nop			; (mov r8, r8)
    376c:	2000097c 	.word	0x2000097c
    3770:	200009a0 	.word	0x200009a0
    3774:	200009ac 	.word	0x200009ac
    3778:	00006891 	.word	0x00006891
    377c:	00006b24 	.word	0x00006b24
    3780:	00005d0d 	.word	0x00005d0d
    3784:	00000352 	.word	0x00000352
    3788:	000064e1 	.word	0x000064e1
    378c:	0000650e 	.word	0x0000650e
    3790:	00006523 	.word	0x00006523
    3794:	0000653b 	.word	0x0000653b
    3798:	00006552 	.word	0x00006552

0000379c <z_set_prio>:
{
    379c:	b5f0      	push	{r4, r5, r6, r7, lr}
    379e:	0004      	movs	r4, r0
    37a0:	000e      	movs	r6, r1
    37a2:	b085      	sub	sp, #20
    37a4:	f3ef 8310 	mrs	r3, PRIMASK
    37a8:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    37aa:	4f3e      	ldr	r7, [pc, #248]	; (38a4 <z_set_prio+0x108>)
    37ac:	9303      	str	r3, [sp, #12]
    37ae:	0038      	movs	r0, r7
    37b0:	f7ff f9b8 	bl	2b24 <z_spin_lock_valid>
    37b4:	1e03      	subs	r3, r0, #0
    37b6:	9001      	str	r0, [sp, #4]
    37b8:	d10e      	bne.n	37d8 <z_set_prio+0x3c>
    37ba:	4c3b      	ldr	r4, [pc, #236]	; (38a8 <z_set_prio+0x10c>)
    37bc:	493b      	ldr	r1, [pc, #236]	; (38ac <z_set_prio+0x110>)
    37be:	0022      	movs	r2, r4
    37c0:	483b      	ldr	r0, [pc, #236]	; (38b0 <z_set_prio+0x114>)
    37c2:	3394      	adds	r3, #148	; 0x94
    37c4:	f001 fce5 	bl	5192 <assert_print>
    37c8:	0039      	movs	r1, r7
    37ca:	483a      	ldr	r0, [pc, #232]	; (38b4 <z_set_prio+0x118>)
    37cc:	f001 fce1 	bl	5192 <assert_print>
    37d0:	2194      	movs	r1, #148	; 0x94
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    37d2:	0020      	movs	r0, r4
    37d4:	f001 fcd9 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    37d8:	0038      	movs	r0, r7
    37da:	f7ff f9c1 	bl	2b60 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    37de:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    37e0:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    37e2:	06da      	lsls	r2, r3, #27
    37e4:	d11d      	bne.n	3822 <z_set_prio+0x86>
	return node->next != NULL;
    37e6:	69a5      	ldr	r5, [r4, #24]
    37e8:	2d00      	cmp	r5, #0
    37ea:	d11a      	bne.n	3822 <z_set_prio+0x86>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    37ec:	227f      	movs	r2, #127	; 0x7f
    37ee:	4013      	ands	r3, r2
    37f0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    37f2:	4b31      	ldr	r3, [pc, #196]	; (38b8 <z_set_prio+0x11c>)
    37f4:	0021      	movs	r1, r4
    37f6:	0018      	movs	r0, r3
    37f8:	9302      	str	r3, [sp, #8]
    37fa:	f7ff fe0f 	bl	341c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    37fe:	2380      	movs	r3, #128	; 0x80
    3800:	7b62      	ldrb	r2, [r4, #13]
    3802:	425b      	negs	r3, r3
    3804:	4313      	orrs	r3, r2
    3806:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3808:	4b2c      	ldr	r3, [pc, #176]	; (38bc <z_set_prio+0x120>)
				thread->base.prio = prio;
    380a:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    380c:	429c      	cmp	r4, r3
    380e:	d11d      	bne.n	384c <z_set_prio+0xb0>
    3810:	4c2b      	ldr	r4, [pc, #172]	; (38c0 <z_set_prio+0x124>)
    3812:	492c      	ldr	r1, [pc, #176]	; (38c4 <z_set_prio+0x128>)
    3814:	23bc      	movs	r3, #188	; 0xbc
    3816:	0022      	movs	r2, r4
    3818:	4825      	ldr	r0, [pc, #148]	; (38b0 <z_set_prio+0x114>)
    381a:	f001 fcba 	bl	5192 <assert_print>
    381e:	21bc      	movs	r1, #188	; 0xbc
    3820:	e7d7      	b.n	37d2 <z_set_prio+0x36>
    3822:	2300      	movs	r3, #0
			thread->base.prio = prio;
    3824:	73a6      	strb	r6, [r4, #14]
    3826:	9301      	str	r3, [sp, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3828:	0038      	movs	r0, r7
    382a:	f7ff f98b 	bl	2b44 <z_spin_unlock_valid>
    382e:	2800      	cmp	r0, #0
    3830:	d12e      	bne.n	3890 <z_set_prio+0xf4>
    3832:	4c1d      	ldr	r4, [pc, #116]	; (38a8 <z_set_prio+0x10c>)
    3834:	23c3      	movs	r3, #195	; 0xc3
    3836:	0022      	movs	r2, r4
    3838:	4923      	ldr	r1, [pc, #140]	; (38c8 <z_set_prio+0x12c>)
    383a:	481d      	ldr	r0, [pc, #116]	; (38b0 <z_set_prio+0x114>)
    383c:	f001 fca9 	bl	5192 <assert_print>
    3840:	0039      	movs	r1, r7
    3842:	4822      	ldr	r0, [pc, #136]	; (38cc <z_set_prio+0x130>)
    3844:	f001 fca5 	bl	5192 <assert_print>
    3848:	21c3      	movs	r1, #195	; 0xc3
    384a:	e7c2      	b.n	37d2 <z_set_prio+0x36>
	return list->head == list;
    384c:	4b20      	ldr	r3, [pc, #128]	; (38d0 <z_set_prio+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    384e:	9902      	ldr	r1, [sp, #8]
	return list->head == list;
    3850:	699a      	ldr	r2, [r3, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3852:	428a      	cmp	r2, r1
    3854:	d000      	beq.n	3858 <z_set_prio+0xbc>
    3856:	0015      	movs	r5, r2
	return (node == list->tail) ? NULL : node->next;
    3858:	69da      	ldr	r2, [r3, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    385a:	2d00      	cmp	r5, #0
    385c:	d105      	bne.n	386a <z_set_prio+0xce>
	node->next = list;
    385e:	9902      	ldr	r1, [sp, #8]
	node->prev = tail;
    3860:	6062      	str	r2, [r4, #4]
	node->next = list;
    3862:	6021      	str	r1, [r4, #0]
	tail->next = node;
    3864:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3866:	61dc      	str	r4, [r3, #28]
}
    3868:	e00a      	b.n	3880 <z_set_prio+0xe4>
	int32_t b2 = thread_2->base.prio;
    386a:	210e      	movs	r1, #14
    386c:	5669      	ldrsb	r1, [r5, r1]
	if (b1 != b2) {
    386e:	428e      	cmp	r6, r1
    3870:	d00a      	beq.n	3888 <z_set_prio+0xec>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3872:	42b1      	cmp	r1, r6
    3874:	dd08      	ble.n	3888 <z_set_prio+0xec>
	sys_dnode_t *const prev = successor->prev;
    3876:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    3878:	6025      	str	r5, [r4, #0]
	node->prev = prev;
    387a:	6063      	str	r3, [r4, #4]
	prev->next = node;
    387c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    387e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3880:	2001      	movs	r0, #1
    3882:	f7ff fb7d 	bl	2f80 <update_cache>
    3886:	e7cf      	b.n	3828 <z_set_prio+0x8c>
	return (node == list->tail) ? NULL : node->next;
    3888:	42aa      	cmp	r2, r5
    388a:	d0e8      	beq.n	385e <z_set_prio+0xc2>
    388c:	682d      	ldr	r5, [r5, #0]
    388e:	e7e4      	b.n	385a <z_set_prio+0xbe>
	if (key != 0U) {
    3890:	9b03      	ldr	r3, [sp, #12]
    3892:	2b00      	cmp	r3, #0
    3894:	d102      	bne.n	389c <z_set_prio+0x100>
	__asm__ volatile(
    3896:	b662      	cpsie	i
    3898:	f3bf 8f6f 	isb	sy
}
    389c:	9801      	ldr	r0, [sp, #4]
    389e:	b005      	add	sp, #20
    38a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	200009ac 	.word	0x200009ac
    38a8:	000064e1 	.word	0x000064e1
    38ac:	0000650e 	.word	0x0000650e
    38b0:	00005d0d 	.word	0x00005d0d
    38b4:	00006523 	.word	0x00006523
    38b8:	20000994 	.word	0x20000994
    38bc:	20000768 	.word	0x20000768
    38c0:	00006891 	.word	0x00006891
    38c4:	00006a76 	.word	0x00006a76
    38c8:	0000653b 	.word	0x0000653b
    38cc:	00006552 	.word	0x00006552
    38d0:	2000097c 	.word	0x2000097c

000038d4 <z_impl_k_thread_suspend>:
{
    38d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38d6:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    38d8:	3018      	adds	r0, #24
    38da:	f000 fd57 	bl	438c <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
    38de:	f3ef 8710 	mrs	r7, PRIMASK
    38e2:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    38e4:	4d25      	ldr	r5, [pc, #148]	; (397c <z_impl_k_thread_suspend+0xa8>)
    38e6:	0028      	movs	r0, r5
    38e8:	f7ff f91c 	bl	2b24 <z_spin_lock_valid>
    38ec:	2800      	cmp	r0, #0
    38ee:	d10e      	bne.n	390e <z_impl_k_thread_suspend+0x3a>
    38f0:	4c23      	ldr	r4, [pc, #140]	; (3980 <z_impl_k_thread_suspend+0xac>)
    38f2:	2394      	movs	r3, #148	; 0x94
    38f4:	0022      	movs	r2, r4
    38f6:	4923      	ldr	r1, [pc, #140]	; (3984 <z_impl_k_thread_suspend+0xb0>)
    38f8:	4823      	ldr	r0, [pc, #140]	; (3988 <z_impl_k_thread_suspend+0xb4>)
    38fa:	f001 fc4a 	bl	5192 <assert_print>
    38fe:	0029      	movs	r1, r5
    3900:	4822      	ldr	r0, [pc, #136]	; (398c <z_impl_k_thread_suspend+0xb8>)
    3902:	f001 fc46 	bl	5192 <assert_print>
    3906:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3908:	0020      	movs	r0, r4
    390a:	f001 fc3e 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    390e:	0028      	movs	r0, r5
    3910:	f7ff f926 	bl	2b60 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    3914:	220d      	movs	r2, #13
    3916:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
    3918:	7b63      	ldrb	r3, [r4, #13]
    391a:	2a00      	cmp	r2, #0
    391c:	da06      	bge.n	392c <z_impl_k_thread_suspend+0x58>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    391e:	227f      	movs	r2, #127	; 0x7f
    3920:	4013      	ands	r3, r2
	_priq_run_remove(thread_runq(thread), thread);
    3922:	0021      	movs	r1, r4
    3924:	481a      	ldr	r0, [pc, #104]	; (3990 <z_impl_k_thread_suspend+0xbc>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3926:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3928:	f7ff fd78 	bl	341c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    392c:	2310      	movs	r3, #16
		update_cache(thread == _current);
    392e:	4e19      	ldr	r6, [pc, #100]	; (3994 <z_impl_k_thread_suspend+0xc0>)
    3930:	7b62      	ldrb	r2, [r4, #13]
    3932:	68b0      	ldr	r0, [r6, #8]
    3934:	4313      	orrs	r3, r2
    3936:	1b00      	subs	r0, r0, r4
    3938:	7363      	strb	r3, [r4, #13]
    393a:	4243      	negs	r3, r0
    393c:	4158      	adcs	r0, r3
    393e:	f7ff fb1f 	bl	2f80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3942:	0028      	movs	r0, r5
    3944:	f7ff f8fe 	bl	2b44 <z_spin_unlock_valid>
    3948:	2800      	cmp	r0, #0
    394a:	d10c      	bne.n	3966 <z_impl_k_thread_suspend+0x92>
    394c:	4c0c      	ldr	r4, [pc, #48]	; (3980 <z_impl_k_thread_suspend+0xac>)
    394e:	23c3      	movs	r3, #195	; 0xc3
    3950:	0022      	movs	r2, r4
    3952:	4911      	ldr	r1, [pc, #68]	; (3998 <z_impl_k_thread_suspend+0xc4>)
    3954:	480c      	ldr	r0, [pc, #48]	; (3988 <z_impl_k_thread_suspend+0xb4>)
    3956:	f001 fc1c 	bl	5192 <assert_print>
    395a:	0029      	movs	r1, r5
    395c:	480f      	ldr	r0, [pc, #60]	; (399c <z_impl_k_thread_suspend+0xc8>)
    395e:	f001 fc18 	bl	5192 <assert_print>
    3962:	21c3      	movs	r1, #195	; 0xc3
    3964:	e7d0      	b.n	3908 <z_impl_k_thread_suspend+0x34>
	if (key != 0U) {
    3966:	2f00      	cmp	r7, #0
    3968:	d102      	bne.n	3970 <z_impl_k_thread_suspend+0x9c>
	__asm__ volatile(
    396a:	b662      	cpsie	i
    396c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3970:	68b3      	ldr	r3, [r6, #8]
    3972:	42a3      	cmp	r3, r4
    3974:	d101      	bne.n	397a <z_impl_k_thread_suspend+0xa6>
		z_reschedule_unlocked();
    3976:	f001 fe0f 	bl	5598 <z_reschedule_unlocked>
}
    397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    397c:	200009ac 	.word	0x200009ac
    3980:	000064e1 	.word	0x000064e1
    3984:	0000650e 	.word	0x0000650e
    3988:	00005d0d 	.word	0x00005d0d
    398c:	00006523 	.word	0x00006523
    3990:	20000994 	.word	0x20000994
    3994:	2000097c 	.word	0x2000097c
    3998:	0000653b 	.word	0x0000653b
    399c:	00006552 	.word	0x00006552

000039a0 <unpend_thread_no_timeout>:
{
    39a0:	b510      	push	{r4, lr}
    39a2:	0004      	movs	r4, r0
    39a4:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
    39a6:	2800      	cmp	r0, #0
    39a8:	d10a      	bne.n	39c0 <unpend_thread_no_timeout+0x20>
    39aa:	4c0a      	ldr	r4, [pc, #40]	; (39d4 <unpend_thread_no_timeout+0x34>)
    39ac:	490a      	ldr	r1, [pc, #40]	; (39d8 <unpend_thread_no_timeout+0x38>)
    39ae:	480b      	ldr	r0, [pc, #44]	; (39dc <unpend_thread_no_timeout+0x3c>)
    39b0:	0022      	movs	r2, r4
    39b2:	4b0b      	ldr	r3, [pc, #44]	; (39e0 <unpend_thread_no_timeout+0x40>)
    39b4:	f001 fbed 	bl	5192 <assert_print>
    39b8:	0020      	movs	r0, r4
    39ba:	4909      	ldr	r1, [pc, #36]	; (39e0 <unpend_thread_no_timeout+0x40>)
    39bc:	f001 fbe5 	bl	518a <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    39c0:	0021      	movs	r1, r4
    39c2:	f7ff fd2b 	bl	341c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    39c6:	2202      	movs	r2, #2
    39c8:	7b63      	ldrb	r3, [r4, #13]
    39ca:	4393      	bics	r3, r2
    39cc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    39ce:	2300      	movs	r3, #0
    39d0:	60a3      	str	r3, [r4, #8]
}
    39d2:	bd10      	pop	{r4, pc}
    39d4:	00006891 	.word	0x00006891
    39d8:	00006b5b 	.word	0x00006b5b
    39dc:	00005d0d 	.word	0x00005d0d
    39e0:	000002c5 	.word	0x000002c5

000039e4 <z_sched_wake_thread>:
{
    39e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39e6:	0004      	movs	r4, r0
    39e8:	000f      	movs	r7, r1
	__asm__ volatile("mrs %0, PRIMASK;"
    39ea:	f3ef 8610 	mrs	r6, PRIMASK
    39ee:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    39f0:	4d21      	ldr	r5, [pc, #132]	; (3a78 <z_sched_wake_thread+0x94>)
    39f2:	0028      	movs	r0, r5
    39f4:	f7ff f896 	bl	2b24 <z_spin_lock_valid>
    39f8:	2800      	cmp	r0, #0
    39fa:	d10e      	bne.n	3a1a <z_sched_wake_thread+0x36>
    39fc:	4c1f      	ldr	r4, [pc, #124]	; (3a7c <z_sched_wake_thread+0x98>)
    39fe:	2394      	movs	r3, #148	; 0x94
    3a00:	0022      	movs	r2, r4
    3a02:	491f      	ldr	r1, [pc, #124]	; (3a80 <z_sched_wake_thread+0x9c>)
    3a04:	481f      	ldr	r0, [pc, #124]	; (3a84 <z_sched_wake_thread+0xa0>)
    3a06:	f001 fbc4 	bl	5192 <assert_print>
    3a0a:	0029      	movs	r1, r5
    3a0c:	481e      	ldr	r0, [pc, #120]	; (3a88 <z_sched_wake_thread+0xa4>)
    3a0e:	f001 fbc0 	bl	5192 <assert_print>
    3a12:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3a14:	0020      	movs	r0, r4
    3a16:	f001 fbb8 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    3a1a:	0028      	movs	r0, r5
    3a1c:	f7ff f8a0 	bl	2b60 <z_spin_lock_set_owner>
		if (!killed) {
    3a20:	2328      	movs	r3, #40	; 0x28
    3a22:	7b62      	ldrb	r2, [r4, #13]
    3a24:	421a      	tst	r2, r3
    3a26:	d10f      	bne.n	3a48 <z_sched_wake_thread+0x64>
			if (thread->base.pended_on != NULL) {
    3a28:	68a3      	ldr	r3, [r4, #8]
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d002      	beq.n	3a34 <z_sched_wake_thread+0x50>
				unpend_thread_no_timeout(thread);
    3a2e:	0020      	movs	r0, r4
    3a30:	f7ff ffb6 	bl	39a0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3a34:	2204      	movs	r2, #4
    3a36:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    3a38:	2f00      	cmp	r7, #0
    3a3a:	d000      	beq.n	3a3e <z_sched_wake_thread+0x5a>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3a3c:	2214      	movs	r2, #20
    3a3e:	4393      	bics	r3, r2
			ready_thread(thread);
    3a40:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3a42:	7363      	strb	r3, [r4, #13]
    3a44:	f7ff fad6 	bl	2ff4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3a48:	0028      	movs	r0, r5
    3a4a:	f7ff f87b 	bl	2b44 <z_spin_unlock_valid>
    3a4e:	2800      	cmp	r0, #0
    3a50:	d10c      	bne.n	3a6c <z_sched_wake_thread+0x88>
    3a52:	4c0a      	ldr	r4, [pc, #40]	; (3a7c <z_sched_wake_thread+0x98>)
    3a54:	23c3      	movs	r3, #195	; 0xc3
    3a56:	0022      	movs	r2, r4
    3a58:	490c      	ldr	r1, [pc, #48]	; (3a8c <z_sched_wake_thread+0xa8>)
    3a5a:	480a      	ldr	r0, [pc, #40]	; (3a84 <z_sched_wake_thread+0xa0>)
    3a5c:	f001 fb99 	bl	5192 <assert_print>
    3a60:	0029      	movs	r1, r5
    3a62:	480b      	ldr	r0, [pc, #44]	; (3a90 <z_sched_wake_thread+0xac>)
    3a64:	f001 fb95 	bl	5192 <assert_print>
    3a68:	21c3      	movs	r1, #195	; 0xc3
    3a6a:	e7d3      	b.n	3a14 <z_sched_wake_thread+0x30>
	if (key != 0U) {
    3a6c:	2e00      	cmp	r6, #0
    3a6e:	d102      	bne.n	3a76 <z_sched_wake_thread+0x92>
	__asm__ volatile(
    3a70:	b662      	cpsie	i
    3a72:	f3bf 8f6f 	isb	sy
}
    3a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a78:	200009ac 	.word	0x200009ac
    3a7c:	000064e1 	.word	0x000064e1
    3a80:	0000650e 	.word	0x0000650e
    3a84:	00005d0d 	.word	0x00005d0d
    3a88:	00006523 	.word	0x00006523
    3a8c:	0000653b 	.word	0x0000653b
    3a90:	00006552 	.word	0x00006552

00003a94 <z_unpend_first_thread>:
{
    3a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a96:	0006      	movs	r6, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    3a98:	f3ef 8710 	mrs	r7, PRIMASK
    3a9c:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3a9e:	4d1f      	ldr	r5, [pc, #124]	; (3b1c <z_unpend_first_thread+0x88>)
    3aa0:	0028      	movs	r0, r5
    3aa2:	f7ff f83f 	bl	2b24 <z_spin_lock_valid>
    3aa6:	2800      	cmp	r0, #0
    3aa8:	d10e      	bne.n	3ac8 <z_unpend_first_thread+0x34>
    3aaa:	4c1d      	ldr	r4, [pc, #116]	; (3b20 <z_unpend_first_thread+0x8c>)
    3aac:	2394      	movs	r3, #148	; 0x94
    3aae:	0022      	movs	r2, r4
    3ab0:	491c      	ldr	r1, [pc, #112]	; (3b24 <z_unpend_first_thread+0x90>)
    3ab2:	481d      	ldr	r0, [pc, #116]	; (3b28 <z_unpend_first_thread+0x94>)
    3ab4:	f001 fb6d 	bl	5192 <assert_print>
    3ab8:	0029      	movs	r1, r5
    3aba:	481c      	ldr	r0, [pc, #112]	; (3b2c <z_unpend_first_thread+0x98>)
    3abc:	f001 fb69 	bl	5192 <assert_print>
    3ac0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ac2:	0020      	movs	r0, r4
    3ac4:	f001 fb61 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    3ac8:	0028      	movs	r0, r5
    3aca:	f7ff f849 	bl	2b60 <z_spin_lock_set_owner>
	return list->head == list;
    3ace:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ad0:	42a6      	cmp	r6, r4
    3ad2:	d01a      	beq.n	3b0a <z_unpend_first_thread+0x76>
		if (thread != NULL) {
    3ad4:	2c00      	cmp	r4, #0
    3ad6:	d006      	beq.n	3ae6 <z_unpend_first_thread+0x52>
			unpend_thread_no_timeout(thread);
    3ad8:	0020      	movs	r0, r4
    3ada:	f7ff ff61 	bl	39a0 <unpend_thread_no_timeout>
    3ade:	0020      	movs	r0, r4
    3ae0:	3018      	adds	r0, #24
    3ae2:	f000 fc53 	bl	438c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ae6:	0028      	movs	r0, r5
    3ae8:	f7ff f82c 	bl	2b44 <z_spin_unlock_valid>
    3aec:	2800      	cmp	r0, #0
    3aee:	d10e      	bne.n	3b0e <z_unpend_first_thread+0x7a>
    3af0:	4c0b      	ldr	r4, [pc, #44]	; (3b20 <z_unpend_first_thread+0x8c>)
    3af2:	23c3      	movs	r3, #195	; 0xc3
    3af4:	0022      	movs	r2, r4
    3af6:	490e      	ldr	r1, [pc, #56]	; (3b30 <z_unpend_first_thread+0x9c>)
    3af8:	480b      	ldr	r0, [pc, #44]	; (3b28 <z_unpend_first_thread+0x94>)
    3afa:	f001 fb4a 	bl	5192 <assert_print>
    3afe:	0029      	movs	r1, r5
    3b00:	480c      	ldr	r0, [pc, #48]	; (3b34 <z_unpend_first_thread+0xa0>)
    3b02:	f001 fb46 	bl	5192 <assert_print>
    3b06:	21c3      	movs	r1, #195	; 0xc3
    3b08:	e7db      	b.n	3ac2 <z_unpend_first_thread+0x2e>
    3b0a:	2400      	movs	r4, #0
    3b0c:	e7eb      	b.n	3ae6 <z_unpend_first_thread+0x52>
	if (key != 0U) {
    3b0e:	2f00      	cmp	r7, #0
    3b10:	d102      	bne.n	3b18 <z_unpend_first_thread+0x84>
	__asm__ volatile(
    3b12:	b662      	cpsie	i
    3b14:	f3bf 8f6f 	isb	sy
}
    3b18:	0020      	movs	r0, r4
    3b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b1c:	200009ac 	.word	0x200009ac
    3b20:	000064e1 	.word	0x000064e1
    3b24:	0000650e 	.word	0x0000650e
    3b28:	00005d0d 	.word	0x00005d0d
    3b2c:	00006523 	.word	0x00006523
    3b30:	0000653b 	.word	0x0000653b
    3b34:	00006552 	.word	0x00006552

00003b38 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3b38:	4b02      	ldr	r3, [pc, #8]	; (3b44 <z_sched_init+0xc>)
    3b3a:	4a03      	ldr	r2, [pc, #12]	; (3b48 <z_sched_init+0x10>)
    3b3c:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
    3b3e:	61da      	str	r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    3b40:	4770      	bx	lr
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	2000097c 	.word	0x2000097c
    3b48:	20000994 	.word	0x20000994

00003b4c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    3b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b4e:	f3ef 8705 	mrs	r7, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    3b52:	2f00      	cmp	r7, #0
    3b54:	d00c      	beq.n	3b70 <z_impl_k_yield+0x24>
    3b56:	4c3d      	ldr	r4, [pc, #244]	; (3c4c <z_impl_k_yield+0x100>)
    3b58:	493d      	ldr	r1, [pc, #244]	; (3c50 <z_impl_k_yield+0x104>)
    3b5a:	0022      	movs	r2, r4
    3b5c:	483d      	ldr	r0, [pc, #244]	; (3c54 <z_impl_k_yield+0x108>)
    3b5e:	4b3e      	ldr	r3, [pc, #248]	; (3c58 <z_impl_k_yield+0x10c>)
    3b60:	f001 fb17 	bl	5192 <assert_print>
    3b64:	483d      	ldr	r0, [pc, #244]	; (3c5c <z_impl_k_yield+0x110>)
    3b66:	f001 fb14 	bl	5192 <assert_print>
    3b6a:	493b      	ldr	r1, [pc, #236]	; (3c58 <z_impl_k_yield+0x10c>)
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3b6c:	0020      	movs	r0, r4
    3b6e:	e016      	b.n	3b9e <z_impl_k_yield+0x52>
	__asm__ volatile("mrs %0, PRIMASK;"
    3b70:	f3ef 8310 	mrs	r3, PRIMASK
    3b74:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3b76:	4c3a      	ldr	r4, [pc, #232]	; (3c60 <z_impl_k_yield+0x114>)
    3b78:	9301      	str	r3, [sp, #4]
    3b7a:	0020      	movs	r0, r4
    3b7c:	f7fe ffd2 	bl	2b24 <z_spin_lock_valid>
    3b80:	2800      	cmp	r0, #0
    3b82:	d10e      	bne.n	3ba2 <z_impl_k_yield+0x56>
    3b84:	4d37      	ldr	r5, [pc, #220]	; (3c64 <z_impl_k_yield+0x118>)
    3b86:	2394      	movs	r3, #148	; 0x94
    3b88:	002a      	movs	r2, r5
    3b8a:	4937      	ldr	r1, [pc, #220]	; (3c68 <z_impl_k_yield+0x11c>)
    3b8c:	4831      	ldr	r0, [pc, #196]	; (3c54 <z_impl_k_yield+0x108>)
    3b8e:	f001 fb00 	bl	5192 <assert_print>
    3b92:	0021      	movs	r1, r4
    3b94:	4835      	ldr	r0, [pc, #212]	; (3c6c <z_impl_k_yield+0x120>)
    3b96:	f001 fafc 	bl	5192 <assert_print>
    3b9a:	2194      	movs	r1, #148	; 0x94
    3b9c:	0028      	movs	r0, r5
    3b9e:	f001 faf4 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    3ba2:	0020      	movs	r0, r4
    3ba4:	f7fe ffdc 	bl	2b60 <z_spin_lock_set_owner>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ba8:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3baa:	4d31      	ldr	r5, [pc, #196]	; (3c70 <z_impl_k_yield+0x124>)
	_priq_run_remove(thread_runq(thread), thread);
    3bac:	4e31      	ldr	r6, [pc, #196]	; (3c74 <z_impl_k_yield+0x128>)
		dequeue_thread(_current);
    3bae:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
    3bb0:	0030      	movs	r0, r6
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3bb2:	7b4b      	ldrb	r3, [r1, #13]
    3bb4:	4013      	ands	r3, r2
    3bb6:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3bb8:	f7ff fc30 	bl	341c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3bbc:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
    3bbe:	68ab      	ldr	r3, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3bc0:	4252      	negs	r2, r2
    3bc2:	7b59      	ldrb	r1, [r3, #13]
    3bc4:	430a      	orrs	r2, r1
    3bc6:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    3bc8:	4a2b      	ldr	r2, [pc, #172]	; (3c78 <z_impl_k_yield+0x12c>)
    3bca:	4293      	cmp	r3, r2
    3bcc:	d108      	bne.n	3be0 <z_impl_k_yield+0x94>
    3bce:	4c1f      	ldr	r4, [pc, #124]	; (3c4c <z_impl_k_yield+0x100>)
    3bd0:	492a      	ldr	r1, [pc, #168]	; (3c7c <z_impl_k_yield+0x130>)
    3bd2:	23bc      	movs	r3, #188	; 0xbc
    3bd4:	0022      	movs	r2, r4
    3bd6:	481f      	ldr	r0, [pc, #124]	; (3c54 <z_impl_k_yield+0x108>)
    3bd8:	f001 fadb 	bl	5192 <assert_print>
    3bdc:	21bc      	movs	r1, #188	; 0xbc
    3bde:	e7c5      	b.n	3b6c <z_impl_k_yield+0x20>
	return list->head == list;
    3be0:	69aa      	ldr	r2, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3be2:	42b2      	cmp	r2, r6
    3be4:	d100      	bne.n	3be8 <z_impl_k_yield+0x9c>
    3be6:	003a      	movs	r2, r7
	return (node == list->tail) ? NULL : node->next;
    3be8:	69e9      	ldr	r1, [r5, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3bea:	2a00      	cmp	r2, #0
    3bec:	d104      	bne.n	3bf8 <z_impl_k_yield+0xac>
	node->next = list;
    3bee:	601e      	str	r6, [r3, #0]
	node->prev = tail;
    3bf0:	6059      	str	r1, [r3, #4]
	tail->next = node;
    3bf2:	600b      	str	r3, [r1, #0]
	list->tail = node;
    3bf4:	61eb      	str	r3, [r5, #28]
}
    3bf6:	e00c      	b.n	3c12 <z_impl_k_yield+0xc6>
	int32_t b1 = thread_1->base.prio;
    3bf8:	200e      	movs	r0, #14
	int32_t b2 = thread_2->base.prio;
    3bfa:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
    3bfc:	5618      	ldrsb	r0, [r3, r0]
	int32_t b2 = thread_2->base.prio;
    3bfe:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
    3c00:	42b8      	cmp	r0, r7
    3c02:	d01b      	beq.n	3c3c <z_impl_k_yield+0xf0>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3c04:	4287      	cmp	r7, r0
    3c06:	dd19      	ble.n	3c3c <z_impl_k_yield+0xf0>
	sys_dnode_t *const prev = successor->prev;
    3c08:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3c0a:	601a      	str	r2, [r3, #0]
	node->prev = prev;
    3c0c:	6059      	str	r1, [r3, #4]
	prev->next = node;
    3c0e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3c10:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3c12:	2001      	movs	r0, #1
    3c14:	f7ff f9b4 	bl	2f80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c18:	0020      	movs	r0, r4
    3c1a:	f7fe ff93 	bl	2b44 <z_spin_unlock_valid>
    3c1e:	2800      	cmp	r0, #0
    3c20:	d110      	bne.n	3c44 <z_impl_k_yield+0xf8>
    3c22:	4d10      	ldr	r5, [pc, #64]	; (3c64 <z_impl_k_yield+0x118>)
    3c24:	23e2      	movs	r3, #226	; 0xe2
    3c26:	002a      	movs	r2, r5
    3c28:	4915      	ldr	r1, [pc, #84]	; (3c80 <z_impl_k_yield+0x134>)
    3c2a:	480a      	ldr	r0, [pc, #40]	; (3c54 <z_impl_k_yield+0x108>)
    3c2c:	f001 fab1 	bl	5192 <assert_print>
    3c30:	0021      	movs	r1, r4
    3c32:	4814      	ldr	r0, [pc, #80]	; (3c84 <z_impl_k_yield+0x138>)
    3c34:	f001 faad 	bl	5192 <assert_print>
    3c38:	21e2      	movs	r1, #226	; 0xe2
    3c3a:	e7af      	b.n	3b9c <z_impl_k_yield+0x50>
	return (node == list->tail) ? NULL : node->next;
    3c3c:	428a      	cmp	r2, r1
    3c3e:	d0d6      	beq.n	3bee <z_impl_k_yield+0xa2>
    3c40:	6812      	ldr	r2, [r2, #0]
    3c42:	e7d2      	b.n	3bea <z_impl_k_yield+0x9e>
    3c44:	9801      	ldr	r0, [sp, #4]
    3c46:	f7fd f9bf 	bl	fc8 <arch_swap>
	z_swap(&sched_spinlock, key);
}
    3c4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3c4c:	00006891 	.word	0x00006891
    3c50:	00006786 	.word	0x00006786
    3c54:	00005d0d 	.word	0x00005d0d
    3c58:	00000571 	.word	0x00000571
    3c5c:	00006a73 	.word	0x00006a73
    3c60:	200009ac 	.word	0x200009ac
    3c64:	000064e1 	.word	0x000064e1
    3c68:	0000650e 	.word	0x0000650e
    3c6c:	00006523 	.word	0x00006523
    3c70:	2000097c 	.word	0x2000097c
    3c74:	20000994 	.word	0x20000994
    3c78:	20000768 	.word	0x20000768
    3c7c:	00006a76 	.word	0x00006a76
    3c80:	0000653b 	.word	0x0000653b
    3c84:	00006552 	.word	0x00006552

00003c88 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    3c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c8a:	0004      	movs	r4, r0
    3c8c:	000d      	movs	r5, r1
    3c8e:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    3c92:	2b00      	cmp	r3, #0
    3c94:	d00d      	beq.n	3cb2 <z_tick_sleep+0x2a>
    3c96:	4c42      	ldr	r4, [pc, #264]	; (3da0 <z_tick_sleep+0x118>)
    3c98:	4942      	ldr	r1, [pc, #264]	; (3da4 <z_tick_sleep+0x11c>)
    3c9a:	0022      	movs	r2, r4
    3c9c:	4842      	ldr	r0, [pc, #264]	; (3da8 <z_tick_sleep+0x120>)
    3c9e:	4b43      	ldr	r3, [pc, #268]	; (3dac <z_tick_sleep+0x124>)
    3ca0:	f001 fa77 	bl	5192 <assert_print>
    3ca4:	4842      	ldr	r0, [pc, #264]	; (3db0 <z_tick_sleep+0x128>)
    3ca6:	f001 fa74 	bl	5192 <assert_print>
    3caa:	4940      	ldr	r1, [pc, #256]	; (3dac <z_tick_sleep+0x124>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3cac:	0020      	movs	r0, r4
    3cae:	f001 fa6c 	bl	518a <assert_post_action>

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3cb2:	0003      	movs	r3, r0
    3cb4:	430b      	orrs	r3, r1
    3cb6:	d103      	bne.n	3cc0 <z_tick_sleep+0x38>
	z_impl_k_yield();
    3cb8:	f7ff ff48 	bl	3b4c <z_impl_k_yield>
		k_yield();
		return 0;
    3cbc:	2000      	movs	r0, #0
    3cbe:	e06e      	b.n	3d9e <z_tick_sleep+0x116>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    3cc0:	1c4b      	adds	r3, r1, #1
    3cc2:	db1e      	blt.n	3d02 <z_tick_sleep+0x7a>
    3cc4:	1c4b      	adds	r3, r1, #1
    3cc6:	d101      	bne.n	3ccc <z_tick_sleep+0x44>
    3cc8:	1c83      	adds	r3, r0, #2
    3cca:	d31a      	bcc.n	3d02 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3ccc:	f001 fc71 	bl	55b2 <sys_clock_tick_get_32>
    3cd0:	1823      	adds	r3, r4, r0
	} else {
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3cd2:	9300      	str	r3, [sp, #0]
    3cd4:	f3ef 8310 	mrs	r3, PRIMASK
    3cd8:	b672      	cpsid	i
    3cda:	4e36      	ldr	r6, [pc, #216]	; (3db4 <z_tick_sleep+0x12c>)
    3cdc:	9301      	str	r3, [sp, #4]
    3cde:	0030      	movs	r0, r6
    3ce0:	f7fe ff20 	bl	2b24 <z_spin_lock_valid>
    3ce4:	2800      	cmp	r0, #0
    3ce6:	d110      	bne.n	3d0a <z_tick_sleep+0x82>
    3ce8:	4c33      	ldr	r4, [pc, #204]	; (3db8 <z_tick_sleep+0x130>)
    3cea:	2394      	movs	r3, #148	; 0x94
    3cec:	0022      	movs	r2, r4
    3cee:	4933      	ldr	r1, [pc, #204]	; (3dbc <z_tick_sleep+0x134>)
    3cf0:	482d      	ldr	r0, [pc, #180]	; (3da8 <z_tick_sleep+0x120>)
    3cf2:	f001 fa4e 	bl	5192 <assert_print>
    3cf6:	0031      	movs	r1, r6
    3cf8:	4831      	ldr	r0, [pc, #196]	; (3dc0 <z_tick_sleep+0x138>)
    3cfa:	f001 fa4a 	bl	5192 <assert_print>
    3cfe:	2194      	movs	r1, #148	; 0x94
    3d00:	e7d4      	b.n	3cac <z_tick_sleep+0x24>
    3d02:	2302      	movs	r3, #2
    3d04:	425b      	negs	r3, r3
    3d06:	1b1b      	subs	r3, r3, r4
    3d08:	e7e3      	b.n	3cd2 <z_tick_sleep+0x4a>
	z_spin_lock_set_owner(l);
    3d0a:	0030      	movs	r0, r6
    3d0c:	f7fe ff28 	bl	2b60 <z_spin_lock_set_owner>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3d10:	4f2c      	ldr	r7, [pc, #176]	; (3dc4 <z_tick_sleep+0x13c>)
    3d12:	4b2d      	ldr	r3, [pc, #180]	; (3dc8 <z_tick_sleep+0x140>)
    3d14:	68b8      	ldr	r0, [r7, #8]
    3d16:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3d18:	f7ff fc5a 	bl	35d0 <unready_thread>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3d1c:	0022      	movs	r2, r4
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3d1e:	2410      	movs	r4, #16
	z_add_thread_timeout(_current, timeout);
    3d20:	68b8      	ldr	r0, [r7, #8]
    3d22:	002b      	movs	r3, r5
    3d24:	3018      	adds	r0, #24
    3d26:	4929      	ldr	r1, [pc, #164]	; (3dcc <z_tick_sleep+0x144>)
    3d28:	f000 fa72 	bl	4210 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3d2c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d2e:	0030      	movs	r0, r6
    3d30:	7b53      	ldrb	r3, [r2, #13]
    3d32:	4323      	orrs	r3, r4
    3d34:	7353      	strb	r3, [r2, #13]
    3d36:	f7fe ff05 	bl	2b44 <z_spin_unlock_valid>
    3d3a:	2800      	cmp	r0, #0
    3d3c:	d10c      	bne.n	3d58 <z_tick_sleep+0xd0>
    3d3e:	4c1e      	ldr	r4, [pc, #120]	; (3db8 <z_tick_sleep+0x130>)
    3d40:	23e2      	movs	r3, #226	; 0xe2
    3d42:	0022      	movs	r2, r4
    3d44:	4922      	ldr	r1, [pc, #136]	; (3dd0 <z_tick_sleep+0x148>)
    3d46:	4818      	ldr	r0, [pc, #96]	; (3da8 <z_tick_sleep+0x120>)
    3d48:	f001 fa23 	bl	5192 <assert_print>
    3d4c:	0031      	movs	r1, r6
    3d4e:	4821      	ldr	r0, [pc, #132]	; (3dd4 <z_tick_sleep+0x14c>)
    3d50:	f001 fa1f 	bl	5192 <assert_print>
    3d54:	21e2      	movs	r1, #226	; 0xe2
    3d56:	e7a9      	b.n	3cac <z_tick_sleep+0x24>
    3d58:	9801      	ldr	r0, [sp, #4]
    3d5a:	f7fd f935 	bl	fc8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    3d5e:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    3d60:	7b5b      	ldrb	r3, [r3, #13]
    3d62:	001d      	movs	r5, r3
    3d64:	4025      	ands	r5, r4
    3d66:	4223      	tst	r3, r4
    3d68:	d00b      	beq.n	3d82 <z_tick_sleep+0xfa>
    3d6a:	4c0d      	ldr	r4, [pc, #52]	; (3da0 <z_tick_sleep+0x118>)
    3d6c:	491a      	ldr	r1, [pc, #104]	; (3dd8 <z_tick_sleep+0x150>)
    3d6e:	0022      	movs	r2, r4
    3d70:	480d      	ldr	r0, [pc, #52]	; (3da8 <z_tick_sleep+0x120>)
    3d72:	4b1a      	ldr	r3, [pc, #104]	; (3ddc <z_tick_sleep+0x154>)
    3d74:	f001 fa0d 	bl	5192 <assert_print>
    3d78:	480d      	ldr	r0, [pc, #52]	; (3db0 <z_tick_sleep+0x128>)
    3d7a:	f001 fa0a 	bl	5192 <assert_print>
    3d7e:	4917      	ldr	r1, [pc, #92]	; (3ddc <z_tick_sleep+0x154>)
    3d80:	e794      	b.n	3cac <z_tick_sleep+0x24>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3d82:	f001 fc16 	bl	55b2 <sys_clock_tick_get_32>
    3d86:	002f      	movs	r7, r5
    3d88:	0006      	movs	r6, r0
    3d8a:	002b      	movs	r3, r5
    3d8c:	9a00      	ldr	r2, [sp, #0]
    3d8e:	1b92      	subs	r2, r2, r6
    3d90:	41bb      	sbcs	r3, r7
    3d92:	0010      	movs	r0, r2
	if (ticks > 0) {
    3d94:	2b00      	cmp	r3, #0
    3d96:	dc02      	bgt.n	3d9e <z_tick_sleep+0x116>
    3d98:	d190      	bne.n	3cbc <z_tick_sleep+0x34>
    3d9a:	2a00      	cmp	r2, #0
    3d9c:	d08e      	beq.n	3cbc <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
    3d9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3da0:	00006891 	.word	0x00006891
    3da4:	00006786 	.word	0x00006786
    3da8:	00005d0d 	.word	0x00005d0d
    3dac:	0000058d 	.word	0x0000058d
    3db0:	00006a73 	.word	0x00006a73
    3db4:	200009ac 	.word	0x200009ac
    3db8:	000064e1 	.word	0x000064e1
    3dbc:	0000650e 	.word	0x0000650e
    3dc0:	00006523 	.word	0x00006523
    3dc4:	2000097c 	.word	0x2000097c
    3dc8:	200009a0 	.word	0x200009a0
    3dcc:	000055a7 	.word	0x000055a7
    3dd0:	0000653b 	.word	0x0000653b
    3dd4:	00006552 	.word	0x00006552
    3dd8:	00006b72 	.word	0x00006b72
    3ddc:	000005a9 	.word	0x000005a9

00003de0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    3de0:	b510      	push	{r4, lr}
    3de2:	0002      	movs	r2, r0
    3de4:	000c      	movs	r4, r1
    3de6:	000b      	movs	r3, r1
    3de8:	f3ef 8105 	mrs	r1, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    3dec:	2900      	cmp	r1, #0
    3dee:	d00f      	beq.n	3e10 <z_impl_k_sleep+0x30>
    3df0:	23b7      	movs	r3, #183	; 0xb7
    3df2:	4c11      	ldr	r4, [pc, #68]	; (3e38 <z_impl_k_sleep+0x58>)
    3df4:	4911      	ldr	r1, [pc, #68]	; (3e3c <z_impl_k_sleep+0x5c>)
    3df6:	0022      	movs	r2, r4
    3df8:	4811      	ldr	r0, [pc, #68]	; (3e40 <z_impl_k_sleep+0x60>)
    3dfa:	00db      	lsls	r3, r3, #3
    3dfc:	f001 f9c9 	bl	5192 <assert_print>
    3e00:	4810      	ldr	r0, [pc, #64]	; (3e44 <z_impl_k_sleep+0x64>)
    3e02:	f001 f9c6 	bl	5192 <assert_print>
    3e06:	21b7      	movs	r1, #183	; 0xb7
    3e08:	0020      	movs	r0, r4
    3e0a:	00c9      	lsls	r1, r1, #3
    3e0c:	f001 f9bd 	bl	518a <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3e10:	3201      	adds	r2, #1
    3e12:	d107      	bne.n	3e24 <z_impl_k_sleep+0x44>
    3e14:	3301      	adds	r3, #1
    3e16:	d105      	bne.n	3e24 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    3e18:	4b0b      	ldr	r3, [pc, #44]	; (3e48 <z_impl_k_sleep+0x68>)
    3e1a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3e1c:	f7ff fd5a 	bl	38d4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3e20:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3e22:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    3e24:	0021      	movs	r1, r4
    3e26:	f7ff ff2f 	bl	3c88 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
    3e2a:	220a      	movs	r2, #10
    3e2c:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    3e2e:	17c1      	asrs	r1, r0, #31
    3e30:	f7fc fa14 	bl	25c <__aeabi_uldivmod>
	return ret;
    3e34:	e7f5      	b.n	3e22 <z_impl_k_sleep+0x42>
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	00006891 	.word	0x00006891
    3e3c:	00006786 	.word	0x00006786
    3e40:	00005d0d 	.word	0x00005d0d
    3e44:	00006a73 	.word	0x00006a73
    3e48:	2000097c 	.word	0x2000097c

00003e4c <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    3e4c:	4b01      	ldr	r3, [pc, #4]	; (3e54 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
    3e4e:	6898      	ldr	r0, [r3, #8]
}
    3e50:	4770      	bx	lr
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	2000097c 	.word	0x2000097c

00003e58 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e5a:	0004      	movs	r4, r0
    3e5c:	f3ef 8710 	mrs	r7, PRIMASK
    3e60:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e62:	4d58      	ldr	r5, [pc, #352]	; (3fc4 <z_thread_abort+0x16c>)
    3e64:	0028      	movs	r0, r5
    3e66:	f7fe fe5d 	bl	2b24 <z_spin_lock_valid>
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d10e      	bne.n	3e8c <z_thread_abort+0x34>
    3e6e:	4c56      	ldr	r4, [pc, #344]	; (3fc8 <z_thread_abort+0x170>)
    3e70:	2394      	movs	r3, #148	; 0x94
    3e72:	0022      	movs	r2, r4
    3e74:	4955      	ldr	r1, [pc, #340]	; (3fcc <z_thread_abort+0x174>)
    3e76:	4856      	ldr	r0, [pc, #344]	; (3fd0 <z_thread_abort+0x178>)
    3e78:	f001 f98b 	bl	5192 <assert_print>
    3e7c:	0029      	movs	r1, r5
    3e7e:	4855      	ldr	r0, [pc, #340]	; (3fd4 <z_thread_abort+0x17c>)
    3e80:	f001 f987 	bl	5192 <assert_print>
    3e84:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e86:	0020      	movs	r0, r4
    3e88:	f001 f97f 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    3e8c:	0028      	movs	r0, r5
    3e8e:	f7fe fe67 	bl	2b60 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3e92:	7b23      	ldrb	r3, [r4, #12]
    3e94:	07db      	lsls	r3, r3, #31
    3e96:	d524      	bpl.n	3ee2 <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e98:	0028      	movs	r0, r5
    3e9a:	f7fe fe53 	bl	2b44 <z_spin_unlock_valid>
    3e9e:	2800      	cmp	r0, #0
    3ea0:	d10c      	bne.n	3ebc <z_thread_abort+0x64>
    3ea2:	4c49      	ldr	r4, [pc, #292]	; (3fc8 <z_thread_abort+0x170>)
    3ea4:	23c3      	movs	r3, #195	; 0xc3
    3ea6:	0022      	movs	r2, r4
    3ea8:	494b      	ldr	r1, [pc, #300]	; (3fd8 <z_thread_abort+0x180>)
    3eaa:	4849      	ldr	r0, [pc, #292]	; (3fd0 <z_thread_abort+0x178>)
    3eac:	f001 f971 	bl	5192 <assert_print>
    3eb0:	0029      	movs	r1, r5
    3eb2:	484a      	ldr	r0, [pc, #296]	; (3fdc <z_thread_abort+0x184>)
    3eb4:	f001 f96d 	bl	5192 <assert_print>
    3eb8:	21c3      	movs	r1, #195	; 0xc3
    3eba:	e7e4      	b.n	3e86 <z_thread_abort+0x2e>
	if (key != 0U) {
    3ebc:	2f00      	cmp	r7, #0
    3ebe:	d102      	bne.n	3ec6 <z_thread_abort+0x6e>
	__asm__ volatile(
    3ec0:	b662      	cpsie	i
    3ec2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
    3ec6:	4d46      	ldr	r5, [pc, #280]	; (3fe0 <z_thread_abort+0x188>)
    3ec8:	4946      	ldr	r1, [pc, #280]	; (3fe4 <z_thread_abort+0x18c>)
    3eca:	002a      	movs	r2, r5
    3ecc:	4840      	ldr	r0, [pc, #256]	; (3fd0 <z_thread_abort+0x178>)
    3ece:	4b46      	ldr	r3, [pc, #280]	; (3fe8 <z_thread_abort+0x190>)
    3ed0:	f001 f95f 	bl	5192 <assert_print>
    3ed4:	0021      	movs	r1, r4
    3ed6:	4845      	ldr	r0, [pc, #276]	; (3fec <z_thread_abort+0x194>)
    3ed8:	f001 f95b 	bl	5192 <assert_print>
    3edc:	0028      	movs	r0, r5
    3ede:	4942      	ldr	r1, [pc, #264]	; (3fe8 <z_thread_abort+0x190>)
    3ee0:	e7d2      	b.n	3e88 <z_thread_abort+0x30>
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3ee2:	2308      	movs	r3, #8
    3ee4:	7b62      	ldrb	r2, [r4, #13]
    3ee6:	421a      	tst	r2, r3
    3ee8:	d00a      	beq.n	3f00 <z_thread_abort+0xa8>
    3eea:	0028      	movs	r0, r5
    3eec:	f7fe fe2a 	bl	2b44 <z_spin_unlock_valid>
    3ef0:	2800      	cmp	r0, #0
    3ef2:	d0d6      	beq.n	3ea2 <z_thread_abort+0x4a>
	if (key != 0U) {
    3ef4:	2f00      	cmp	r7, #0
    3ef6:	d102      	bne.n	3efe <z_thread_abort+0xa6>
	__asm__ volatile(
    3ef8:	b662      	cpsie	i
    3efa:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3f00:	2120      	movs	r1, #32
    3f02:	0010      	movs	r0, r2
    3f04:	4388      	bics	r0, r1
    3f06:	0001      	movs	r1, r0
    3f08:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
    3f0a:	b248      	sxtb	r0, r1
    3f0c:	2800      	cmp	r0, #0
    3f0e:	db2f      	blt.n	3f70 <z_thread_abort+0x118>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3f10:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    3f12:	68a3      	ldr	r3, [r4, #8]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d002      	beq.n	3f1e <z_thread_abort+0xc6>
			unpend_thread_no_timeout(thread);
    3f18:	0020      	movs	r0, r4
    3f1a:	f7ff fd41 	bl	39a0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3f1e:	0020      	movs	r0, r4
    3f20:	3018      	adds	r0, #24
    3f22:	f000 fa33 	bl	438c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3f26:	0023      	movs	r3, r4
	return list->head == list;
    3f28:	6da6      	ldr	r6, [r4, #88]	; 0x58
    3f2a:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f2c:	429e      	cmp	r6, r3
    3f2e:	d001      	beq.n	3f34 <z_thread_abort+0xdc>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3f30:	2e00      	cmp	r6, #0
    3f32:	d126      	bne.n	3f82 <z_thread_abort+0x12a>
		update_cache(1);
    3f34:	2001      	movs	r0, #1
    3f36:	f7ff f823 	bl	2f80 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3f3a:	4b2d      	ldr	r3, [pc, #180]	; (3ff0 <z_thread_abort+0x198>)
    3f3c:	689b      	ldr	r3, [r3, #8]
    3f3e:	42a3      	cmp	r3, r4
    3f40:	d1d3      	bne.n	3eea <z_thread_abort+0x92>
    3f42:	f3ef 8305 	mrs	r3, IPSR
    3f46:	2b00      	cmp	r3, #0
    3f48:	d1cf      	bne.n	3eea <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f4a:	0028      	movs	r0, r5
    3f4c:	f7fe fdfa 	bl	2b44 <z_spin_unlock_valid>
    3f50:	4e1f      	ldr	r6, [pc, #124]	; (3fd0 <z_thread_abort+0x178>)
    3f52:	2800      	cmp	r0, #0
    3f54:	d124      	bne.n	3fa0 <z_thread_abort+0x148>
    3f56:	4c1c      	ldr	r4, [pc, #112]	; (3fc8 <z_thread_abort+0x170>)
    3f58:	23e2      	movs	r3, #226	; 0xe2
    3f5a:	0022      	movs	r2, r4
    3f5c:	0030      	movs	r0, r6
    3f5e:	491e      	ldr	r1, [pc, #120]	; (3fd8 <z_thread_abort+0x180>)
    3f60:	f001 f917 	bl	5192 <assert_print>
    3f64:	0029      	movs	r1, r5
    3f66:	481d      	ldr	r0, [pc, #116]	; (3fdc <z_thread_abort+0x184>)
    3f68:	f001 f913 	bl	5192 <assert_print>
    3f6c:	21e2      	movs	r1, #226	; 0xe2
    3f6e:	e78a      	b.n	3e86 <z_thread_abort+0x2e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f70:	215f      	movs	r1, #95	; 0x5f
    3f72:	400a      	ands	r2, r1
    3f74:	4313      	orrs	r3, r2
	_priq_run_remove(thread_runq(thread), thread);
    3f76:	0021      	movs	r1, r4
    3f78:	481e      	ldr	r0, [pc, #120]	; (3ff4 <z_thread_abort+0x19c>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f7a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3f7c:	f7ff fa4e 	bl	341c <z_priq_dumb_remove>
}
    3f80:	e7c7      	b.n	3f12 <z_thread_abort+0xba>
		unpend_thread_no_timeout(thread);
    3f82:	0030      	movs	r0, r6
    3f84:	f7ff fd0c 	bl	39a0 <unpend_thread_no_timeout>
    3f88:	0030      	movs	r0, r6
    3f8a:	3018      	adds	r0, #24
    3f8c:	f000 f9fe 	bl	438c <z_abort_timeout>
    3f90:	0033      	movs	r3, r6
    3f92:	2200      	movs	r2, #0
    3f94:	338c      	adds	r3, #140	; 0x8c
		ready_thread(thread);
    3f96:	0030      	movs	r0, r6
    3f98:	601a      	str	r2, [r3, #0]
    3f9a:	f7ff f82b 	bl	2ff4 <ready_thread>
    3f9e:	e7c2      	b.n	3f26 <z_thread_abort+0xce>
    3fa0:	0038      	movs	r0, r7
    3fa2:	f7fd f811 	bl	fc8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    3fa6:	23e0      	movs	r3, #224	; 0xe0
    3fa8:	4c0d      	ldr	r4, [pc, #52]	; (3fe0 <z_thread_abort+0x188>)
    3faa:	490e      	ldr	r1, [pc, #56]	; (3fe4 <z_thread_abort+0x18c>)
    3fac:	0022      	movs	r2, r4
    3fae:	0030      	movs	r0, r6
    3fb0:	00db      	lsls	r3, r3, #3
    3fb2:	f001 f8ee 	bl	5192 <assert_print>
    3fb6:	4810      	ldr	r0, [pc, #64]	; (3ff8 <z_thread_abort+0x1a0>)
    3fb8:	f001 f8eb 	bl	5192 <assert_print>
    3fbc:	21e0      	movs	r1, #224	; 0xe0
    3fbe:	00c9      	lsls	r1, r1, #3
    3fc0:	e761      	b.n	3e86 <z_thread_abort+0x2e>
    3fc2:	46c0      	nop			; (mov r8, r8)
    3fc4:	200009ac 	.word	0x200009ac
    3fc8:	000064e1 	.word	0x000064e1
    3fcc:	0000650e 	.word	0x0000650e
    3fd0:	00005d0d 	.word	0x00005d0d
    3fd4:	00006523 	.word	0x00006523
    3fd8:	0000653b 	.word	0x0000653b
    3fdc:	00006552 	.word	0x00006552
    3fe0:	00006891 	.word	0x00006891
    3fe4:	00006831 	.word	0x00006831
    3fe8:	000006ca 	.word	0x000006ca
    3fec:	00006bb2 	.word	0x00006bb2
    3ff0:	2000097c 	.word	0x2000097c
    3ff4:	20000994 	.word	0x20000994
    3ff8:	00006bd1 	.word	0x00006bd1

00003ffc <z_impl_k_thread_join>:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, abort, thread);
}
#endif

int z_impl_k_thread_join(struct k_thread *thread, k_timeout_t timeout)
{
    3ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ffe:	b085      	sub	sp, #20
    4000:	0004      	movs	r4, r0
    4002:	9200      	str	r2, [sp, #0]
    4004:	9301      	str	r3, [sp, #4]
	__asm__ volatile("mrs %0, PRIMASK;"
    4006:	f3ef 8610 	mrs	r6, PRIMASK
    400a:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    400c:	4d42      	ldr	r5, [pc, #264]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    400e:	0028      	movs	r0, r5
    4010:	f7fe fd88 	bl	2b24 <z_spin_lock_valid>
    4014:	2800      	cmp	r0, #0
    4016:	d10e      	bne.n	4036 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36>
    4018:	4c40      	ldr	r4, [pc, #256]	; (411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>)
    401a:	2394      	movs	r3, #148	; 0x94
    401c:	0022      	movs	r2, r4
    401e:	4940      	ldr	r1, [pc, #256]	; (4120 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x120>)
    4020:	4840      	ldr	r0, [pc, #256]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    4022:	f001 f8b6 	bl	5192 <assert_print>
    4026:	0029      	movs	r1, r5
    4028:	483f      	ldr	r0, [pc, #252]	; (4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>)
    402a:	f001 f8b2 	bl	5192 <assert_print>
    402e:	2194      	movs	r1, #148	; 0x94
		ret = -EBUSY;
	} else if ((thread == _current) ||
		   (thread->base.pended_on == &_current->join_queue)) {
		ret = -EDEADLK;
	} else {
		__ASSERT(!arch_is_in_isr(), "cannot join in ISR");
    4030:	0020      	movs	r0, r4
    4032:	f001 f8aa 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    4036:	0028      	movs	r0, r5
    4038:	f7fe fd92 	bl	2b60 <z_spin_lock_set_owner>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    403c:	7b63      	ldrb	r3, [r4, #13]
    403e:	071b      	lsls	r3, r3, #28
    4040:	d44c      	bmi.n	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4042:	9b00      	ldr	r3, [sp, #0]
    4044:	9a01      	ldr	r2, [sp, #4]
    4046:	9302      	str	r3, [sp, #8]
    4048:	9b01      	ldr	r3, [sp, #4]
    404a:	9303      	str	r3, [sp, #12]
    404c:	9b00      	ldr	r3, [sp, #0]
    404e:	4313      	orrs	r3, r2
    4050:	d057      	beq.n	4102 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x102>
	} else if ((thread == _current) ||
    4052:	4f36      	ldr	r7, [pc, #216]	; (412c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12c>)
    4054:	68b8      	ldr	r0, [r7, #8]
    4056:	42a0      	cmp	r0, r4
    4058:	d056      	beq.n	4108 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x108>
    405a:	0003      	movs	r3, r0
    405c:	68a2      	ldr	r2, [r4, #8]
    405e:	3358      	adds	r3, #88	; 0x58
    4060:	429a      	cmp	r2, r3
    4062:	d051      	beq.n	4108 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x108>
    4064:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "cannot join in ISR");
    4068:	2b00      	cmp	r3, #0
    406a:	d00d      	beq.n	4088 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88>
    406c:	23e4      	movs	r3, #228	; 0xe4
    406e:	4c30      	ldr	r4, [pc, #192]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    4070:	4930      	ldr	r1, [pc, #192]	; (4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>)
    4072:	0022      	movs	r2, r4
    4074:	482b      	ldr	r0, [pc, #172]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    4076:	00db      	lsls	r3, r3, #3
    4078:	f001 f88b 	bl	5192 <assert_print>
    407c:	482e      	ldr	r0, [pc, #184]	; (4138 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x138>)
    407e:	f001 f888 	bl	5192 <assert_print>
    4082:	21e4      	movs	r1, #228	; 0xe4
    4084:	00c9      	lsls	r1, r1, #3
    4086:	e7d3      	b.n	4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>
		add_to_waitq_locked(_current, &thread->join_queue);
    4088:	0021      	movs	r1, r4
    408a:	3158      	adds	r1, #88	; 0x58
    408c:	f7ff faba 	bl	3604 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4090:	9b02      	ldr	r3, [sp, #8]
    4092:	3301      	adds	r3, #1
    4094:	d102      	bne.n	409c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c>
    4096:	9b03      	ldr	r3, [sp, #12]
    4098:	3301      	adds	r3, #1
    409a:	d006      	beq.n	40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
		add_thread_timeout(_current, timeout);
    409c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    409e:	4927      	ldr	r1, [pc, #156]	; (413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>)
    40a0:	9a00      	ldr	r2, [sp, #0]
    40a2:	9b01      	ldr	r3, [sp, #4]
    40a4:	3018      	adds	r0, #24
    40a6:	f000 f8b3 	bl	4210 <z_add_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    40aa:	0028      	movs	r0, r5
    40ac:	f7fe fd4a 	bl	2b44 <z_spin_unlock_valid>
    40b0:	2800      	cmp	r0, #0
    40b2:	d10c      	bne.n	40ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xce>
    40b4:	4c19      	ldr	r4, [pc, #100]	; (411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>)
    40b6:	23e2      	movs	r3, #226	; 0xe2
    40b8:	0022      	movs	r2, r4
    40ba:	4921      	ldr	r1, [pc, #132]	; (4140 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x140>)
    40bc:	4819      	ldr	r0, [pc, #100]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    40be:	f001 f868 	bl	5192 <assert_print>
    40c2:	0029      	movs	r1, r5
    40c4:	481f      	ldr	r0, [pc, #124]	; (4144 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x144>)
    40c6:	f001 f864 	bl	5192 <assert_print>
    40ca:	21e2      	movs	r1, #226	; 0xe2
    40cc:	e7b0      	b.n	4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>
    40ce:	0030      	movs	r0, r6
    40d0:	f7fc ff7a 	bl	fc8 <arch_swap>
    40d4:	0004      	movs	r4, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, join, thread, timeout, ret);

	k_spin_unlock(&sched_spinlock, key);
	return ret;
}
    40d6:	0020      	movs	r0, r4
    40d8:	b005      	add	sp, #20
    40da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = 0;
    40dc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    40de:	0028      	movs	r0, r5
    40e0:	f7fe fd30 	bl	2b44 <z_spin_unlock_valid>
    40e4:	2800      	cmp	r0, #0
    40e6:	d111      	bne.n	410c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10c>
    40e8:	4c0c      	ldr	r4, [pc, #48]	; (411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>)
    40ea:	23c3      	movs	r3, #195	; 0xc3
    40ec:	0022      	movs	r2, r4
    40ee:	4914      	ldr	r1, [pc, #80]	; (4140 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x140>)
    40f0:	480c      	ldr	r0, [pc, #48]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    40f2:	f001 f84e 	bl	5192 <assert_print>
    40f6:	0029      	movs	r1, r5
    40f8:	4812      	ldr	r0, [pc, #72]	; (4144 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x144>)
    40fa:	f001 f84a 	bl	5192 <assert_print>
    40fe:	21c3      	movs	r1, #195	; 0xc3
    4100:	e796      	b.n	4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>
		ret = -EBUSY;
    4102:	2410      	movs	r4, #16
		ret = -EDEADLK;
    4104:	4264      	negs	r4, r4
    4106:	e7ea      	b.n	40de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xde>
    4108:	242d      	movs	r4, #45	; 0x2d
    410a:	e7fb      	b.n	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
	if (key != 0U) {
    410c:	2e00      	cmp	r6, #0
    410e:	d1e2      	bne.n	40d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd6>
	__asm__ volatile(
    4110:	b662      	cpsie	i
    4112:	f3bf 8f6f 	isb	sy
    4116:	e7de      	b.n	40d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd6>
    4118:	200009ac 	.word	0x200009ac
    411c:	000064e1 	.word	0x000064e1
    4120:	0000650e 	.word	0x0000650e
    4124:	00005d0d 	.word	0x00005d0d
    4128:	00006523 	.word	0x00006523
    412c:	2000097c 	.word	0x2000097c
    4130:	00006891 	.word	0x00006891
    4134:	00006786 	.word	0x00006786
    4138:	00006bf3 	.word	0x00006bf3
    413c:	000055a7 	.word	0x000055a7
    4140:	0000653b 	.word	0x0000653b
    4144:	00006552 	.word	0x00006552

00004148 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4148:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    414a:	4806      	ldr	r0, [pc, #24]	; (4164 <z_data_copy+0x1c>)
    414c:	4a06      	ldr	r2, [pc, #24]	; (4168 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    414e:	4907      	ldr	r1, [pc, #28]	; (416c <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
    4150:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4152:	f001 f9fe 	bl	5552 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4156:	4a06      	ldr	r2, [pc, #24]	; (4170 <z_data_copy+0x28>)
    4158:	4906      	ldr	r1, [pc, #24]	; (4174 <z_data_copy+0x2c>)
    415a:	4807      	ldr	r0, [pc, #28]	; (4178 <z_data_copy+0x30>)
    415c:	f001 f9f9 	bl	5552 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4160:	bd10      	pop	{r4, pc}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	20000000 	.word	0x20000000
    4168:	200006d8 	.word	0x200006d8
    416c:	00006c90 	.word	0x00006c90
    4170:	00000000 	.word	0x00000000
    4174:	00006c90 	.word	0x00006c90
    4178:	20000000 	.word	0x20000000

0000417c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    417c:	2000      	movs	r0, #0
{
    417e:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4180:	4b03      	ldr	r3, [pc, #12]	; (4190 <elapsed+0x14>)
    4182:	681b      	ldr	r3, [r3, #0]
    4184:	4283      	cmp	r3, r0
    4186:	d101      	bne.n	418c <elapsed+0x10>
    4188:	f7fe f998 	bl	24bc <sys_clock_elapsed>
}
    418c:	bd10      	pop	{r4, pc}
    418e:	46c0      	nop			; (mov r8, r8)
    4190:	200009b0 	.word	0x200009b0

00004194 <next_timeout>:

static int32_t next_timeout(void)
{
    4194:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
    4196:	4b0e      	ldr	r3, [pc, #56]	; (41d0 <next_timeout+0x3c>)
    4198:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    419a:	429e      	cmp	r6, r3
    419c:	d103      	bne.n	41a6 <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    419e:	f7ff ffed 	bl	417c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    41a2:	480c      	ldr	r0, [pc, #48]	; (41d4 <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    41a4:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
    41a6:	f7ff ffe9 	bl	417c <elapsed>
	if ((to == NULL) ||
    41aa:	2e00      	cmp	r6, #0
    41ac:	d0f9      	beq.n	41a2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    41ae:	6932      	ldr	r2, [r6, #16]
    41b0:	6973      	ldr	r3, [r6, #20]
    41b2:	0004      	movs	r4, r0
    41b4:	17c5      	asrs	r5, r0, #31
    41b6:	1b12      	subs	r2, r2, r4
    41b8:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
    41ba:	2b00      	cmp	r3, #0
    41bc:	dcf1      	bgt.n	41a2 <next_timeout+0xe>
    41be:	d103      	bne.n	41c8 <next_timeout+0x34>
    41c0:	2180      	movs	r1, #128	; 0x80
    41c2:	0609      	lsls	r1, r1, #24
    41c4:	428a      	cmp	r2, r1
    41c6:	d2ec      	bcs.n	41a2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    41c8:	43d8      	mvns	r0, r3
    41ca:	17c0      	asrs	r0, r0, #31
    41cc:	4010      	ands	r0, r2
	return ret;
    41ce:	e7e9      	b.n	41a4 <next_timeout+0x10>
    41d0:	200006a0 	.word	0x200006a0
    41d4:	7fffffff 	.word	0x7fffffff

000041d8 <remove_timeout>:
{
    41d8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    41da:	2800      	cmp	r0, #0
    41dc:	d00e      	beq.n	41fc <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
    41de:	4b0b      	ldr	r3, [pc, #44]	; (420c <remove_timeout+0x34>)
    41e0:	685b      	ldr	r3, [r3, #4]
    41e2:	4298      	cmp	r0, r3
    41e4:	d00a      	beq.n	41fc <remove_timeout+0x24>
    41e6:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
    41e8:	2900      	cmp	r1, #0
    41ea:	d007      	beq.n	41fc <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
    41ec:	690a      	ldr	r2, [r1, #16]
    41ee:	694b      	ldr	r3, [r1, #20]
    41f0:	6904      	ldr	r4, [r0, #16]
    41f2:	6945      	ldr	r5, [r0, #20]
    41f4:	1912      	adds	r2, r2, r4
    41f6:	416b      	adcs	r3, r5
    41f8:	610a      	str	r2, [r1, #16]
    41fa:	614b      	str	r3, [r1, #20]
	sys_dnode_t *const next = node->next;
    41fc:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
    41fe:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    4200:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4202:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4204:	2300      	movs	r3, #0
    4206:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    4208:	6043      	str	r3, [r0, #4]
}
    420a:	bd30      	pop	{r4, r5, pc}
    420c:	200006a0 	.word	0x200006a0

00004210 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    4210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4212:	0004      	movs	r4, r0
    4214:	0016      	movs	r6, r2
    4216:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4218:	1c53      	adds	r3, r2, #1
    421a:	d102      	bne.n	4222 <z_add_timeout+0x12>
    421c:	1c7b      	adds	r3, r7, #1
    421e:	d100      	bne.n	4222 <z_add_timeout+0x12>
    4220:	e09a      	b.n	4358 <z_add_timeout+0x148>
	return node->next != NULL;
    4222:	6825      	ldr	r5, [r4, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    4224:	2d00      	cmp	r5, #0
    4226:	d00d      	beq.n	4244 <z_add_timeout+0x34>
    4228:	4c4c      	ldr	r4, [pc, #304]	; (435c <z_add_timeout+0x14c>)
    422a:	494d      	ldr	r1, [pc, #308]	; (4360 <z_add_timeout+0x150>)
    422c:	235e      	movs	r3, #94	; 0x5e
    422e:	0022      	movs	r2, r4
    4230:	484c      	ldr	r0, [pc, #304]	; (4364 <z_add_timeout+0x154>)
    4232:	f000 ffae 	bl	5192 <assert_print>
    4236:	484c      	ldr	r0, [pc, #304]	; (4368 <z_add_timeout+0x158>)
    4238:	f000 ffab 	bl	5192 <assert_print>
    423c:	215e      	movs	r1, #94	; 0x5e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    423e:	0020      	movs	r0, r4
    4240:	f000 ffa3 	bl	518a <assert_post_action>
	to->fn = fn;
    4244:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
    4246:	f3ef 8310 	mrs	r3, PRIMASK
    424a:	b672      	cpsid	i
    424c:	9301      	str	r3, [sp, #4]
    424e:	4b47      	ldr	r3, [pc, #284]	; (436c <z_add_timeout+0x15c>)
    4250:	0018      	movs	r0, r3
    4252:	9300      	str	r3, [sp, #0]
    4254:	f7fe fc66 	bl	2b24 <z_spin_lock_valid>
    4258:	2800      	cmp	r0, #0
    425a:	d10c      	bne.n	4276 <z_add_timeout+0x66>
    425c:	4c44      	ldr	r4, [pc, #272]	; (4370 <z_add_timeout+0x160>)
    425e:	2394      	movs	r3, #148	; 0x94
    4260:	0022      	movs	r2, r4
    4262:	4944      	ldr	r1, [pc, #272]	; (4374 <z_add_timeout+0x164>)
    4264:	483f      	ldr	r0, [pc, #252]	; (4364 <z_add_timeout+0x154>)
    4266:	f000 ff94 	bl	5192 <assert_print>
    426a:	9900      	ldr	r1, [sp, #0]
    426c:	4842      	ldr	r0, [pc, #264]	; (4378 <z_add_timeout+0x168>)
    426e:	f000 ff90 	bl	5192 <assert_print>
    4272:	2194      	movs	r1, #148	; 0x94
    4274:	e7e3      	b.n	423e <z_add_timeout+0x2e>
	z_spin_lock_set_owner(l);
    4276:	9800      	ldr	r0, [sp, #0]
    4278:	f7fe fc72 	bl	2b60 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    427c:	2f00      	cmp	r7, #0
    427e:	da23      	bge.n	42c8 <z_add_timeout+0xb8>
    4280:	1c7b      	adds	r3, r7, #1
    4282:	d101      	bne.n	4288 <z_add_timeout+0x78>
    4284:	1cb3      	adds	r3, r6, #2
    4286:	d81f      	bhi.n	42c8 <z_add_timeout+0xb8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4288:	4b3c      	ldr	r3, [pc, #240]	; (437c <z_add_timeout+0x16c>)
    428a:	6818      	ldr	r0, [r3, #0]
    428c:	6859      	ldr	r1, [r3, #4]
    428e:	2202      	movs	r2, #2
    4290:	4252      	negs	r2, r2
    4292:	17d3      	asrs	r3, r2, #31
    4294:	1a12      	subs	r2, r2, r0
    4296:	418b      	sbcs	r3, r1
    4298:	1b92      	subs	r2, r2, r6
    429a:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
    429c:	2b00      	cmp	r3, #0
    429e:	dc04      	bgt.n	42aa <z_add_timeout+0x9a>
    42a0:	d101      	bne.n	42a6 <z_add_timeout+0x96>
    42a2:	2a00      	cmp	r2, #0
    42a4:	d101      	bne.n	42aa <z_add_timeout+0x9a>
    42a6:	2201      	movs	r2, #1
    42a8:	2300      	movs	r3, #0
	return list->head == list;
    42aa:	4f35      	ldr	r7, [pc, #212]	; (4380 <z_add_timeout+0x170>)
    42ac:	6122      	str	r2, [r4, #16]
    42ae:	6163      	str	r3, [r4, #20]
    42b0:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42b2:	42bb      	cmp	r3, r7
    42b4:	d000      	beq.n	42b8 <z_add_timeout+0xa8>
    42b6:	001d      	movs	r5, r3
	return (node == list->tail) ? NULL : node->next;
    42b8:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    42ba:	2d00      	cmp	r5, #0
    42bc:	d10f      	bne.n	42de <z_add_timeout+0xce>
	node->next = list;
    42be:	6027      	str	r7, [r4, #0]
	node->prev = tail;
    42c0:	6066      	str	r6, [r4, #4]
	tail->next = node;
    42c2:	6034      	str	r4, [r6, #0]
	list->tail = node;
    42c4:	607c      	str	r4, [r7, #4]
}
    42c6:	e01c      	b.n	4302 <z_add_timeout+0xf2>
			to->dticks = timeout.ticks + 1 + elapsed();
    42c8:	f7ff ff58 	bl	417c <elapsed>
    42cc:	2201      	movs	r2, #1
    42ce:	2300      	movs	r3, #0
    42d0:	1992      	adds	r2, r2, r6
    42d2:	417b      	adcs	r3, r7
    42d4:	0006      	movs	r6, r0
    42d6:	17c7      	asrs	r7, r0, #31
    42d8:	1992      	adds	r2, r2, r6
    42da:	417b      	adcs	r3, r7
    42dc:	e7e5      	b.n	42aa <z_add_timeout+0x9a>
			if (t->dticks > to->dticks) {
    42de:	6928      	ldr	r0, [r5, #16]
    42e0:	6969      	ldr	r1, [r5, #20]
    42e2:	6922      	ldr	r2, [r4, #16]
    42e4:	6963      	ldr	r3, [r4, #20]
    42e6:	4299      	cmp	r1, r3
    42e8:	dc02      	bgt.n	42f0 <z_add_timeout+0xe0>
    42ea:	d127      	bne.n	433c <z_add_timeout+0x12c>
    42ec:	4290      	cmp	r0, r2
    42ee:	d925      	bls.n	433c <z_add_timeout+0x12c>
				t->dticks -= to->dticks;
    42f0:	1a80      	subs	r0, r0, r2
    42f2:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
    42f4:	686b      	ldr	r3, [r5, #4]
    42f6:	6128      	str	r0, [r5, #16]
    42f8:	6169      	str	r1, [r5, #20]
	node->prev = prev;
    42fa:	6063      	str	r3, [r4, #4]
	node->next = successor;
    42fc:	6025      	str	r5, [r4, #0]
	prev->next = node;
    42fe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4300:	606c      	str	r4, [r5, #4]
	return list->head == list;
    4302:	4a1f      	ldr	r2, [pc, #124]	; (4380 <z_add_timeout+0x170>)
    4304:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4306:	4293      	cmp	r3, r2
    4308:	d006      	beq.n	4318 <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    430a:	429c      	cmp	r4, r3
    430c:	d104      	bne.n	4318 <z_add_timeout+0x108>
			sys_clock_set_timeout(next_timeout(), false);
    430e:	f7ff ff41 	bl	4194 <next_timeout>
    4312:	2100      	movs	r1, #0
    4314:	f7fe f820 	bl	2358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4318:	9800      	ldr	r0, [sp, #0]
    431a:	f7fe fc13 	bl	2b44 <z_spin_unlock_valid>
    431e:	2800      	cmp	r0, #0
    4320:	d114      	bne.n	434c <z_add_timeout+0x13c>
    4322:	4c13      	ldr	r4, [pc, #76]	; (4370 <z_add_timeout+0x160>)
    4324:	23c3      	movs	r3, #195	; 0xc3
    4326:	0022      	movs	r2, r4
    4328:	4916      	ldr	r1, [pc, #88]	; (4384 <z_add_timeout+0x174>)
    432a:	480e      	ldr	r0, [pc, #56]	; (4364 <z_add_timeout+0x154>)
    432c:	f000 ff31 	bl	5192 <assert_print>
    4330:	9900      	ldr	r1, [sp, #0]
    4332:	4815      	ldr	r0, [pc, #84]	; (4388 <z_add_timeout+0x178>)
    4334:	f000 ff2d 	bl	5192 <assert_print>
    4338:	21c3      	movs	r1, #195	; 0xc3
    433a:	e780      	b.n	423e <z_add_timeout+0x2e>
			to->dticks -= t->dticks;
    433c:	1a12      	subs	r2, r2, r0
    433e:	418b      	sbcs	r3, r1
    4340:	6122      	str	r2, [r4, #16]
    4342:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
    4344:	42b5      	cmp	r5, r6
    4346:	d0ba      	beq.n	42be <z_add_timeout+0xae>
    4348:	682d      	ldr	r5, [r5, #0]
    434a:	e7b6      	b.n	42ba <z_add_timeout+0xaa>
	if (key != 0U) {
    434c:	9b01      	ldr	r3, [sp, #4]
    434e:	2b00      	cmp	r3, #0
    4350:	d102      	bne.n	4358 <z_add_timeout+0x148>
	__asm__ volatile(
    4352:	b662      	cpsie	i
    4354:	f3bf 8f6f 	isb	sy
		}
	}
}
    4358:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	00006c08 	.word	0x00006c08
    4360:	00006c2c 	.word	0x00006c2c
    4364:	00005d0d 	.word	0x00005d0d
    4368:	00006a73 	.word	0x00006a73
    436c:	200009b4 	.word	0x200009b4
    4370:	000064e1 	.word	0x000064e1
    4374:	0000650e 	.word	0x0000650e
    4378:	00006523 	.word	0x00006523
    437c:	200008a0 	.word	0x200008a0
    4380:	200006a0 	.word	0x200006a0
    4384:	0000653b 	.word	0x0000653b
    4388:	00006552 	.word	0x00006552

0000438c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    438c:	b570      	push	{r4, r5, r6, lr}
    438e:	0005      	movs	r5, r0
	__asm__ volatile("mrs %0, PRIMASK;"
    4390:	f3ef 8610 	mrs	r6, PRIMASK
    4394:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4396:	4c1d      	ldr	r4, [pc, #116]	; (440c <z_abort_timeout+0x80>)
    4398:	0020      	movs	r0, r4
    439a:	f7fe fbc3 	bl	2b24 <z_spin_lock_valid>
    439e:	2800      	cmp	r0, #0
    43a0:	d10e      	bne.n	43c0 <z_abort_timeout+0x34>
    43a2:	4d1b      	ldr	r5, [pc, #108]	; (4410 <z_abort_timeout+0x84>)
    43a4:	2394      	movs	r3, #148	; 0x94
    43a6:	002a      	movs	r2, r5
    43a8:	491a      	ldr	r1, [pc, #104]	; (4414 <z_abort_timeout+0x88>)
    43aa:	481b      	ldr	r0, [pc, #108]	; (4418 <z_abort_timeout+0x8c>)
    43ac:	f000 fef1 	bl	5192 <assert_print>
    43b0:	0021      	movs	r1, r4
    43b2:	481a      	ldr	r0, [pc, #104]	; (441c <z_abort_timeout+0x90>)
    43b4:	f000 feed 	bl	5192 <assert_print>
    43b8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    43ba:	0028      	movs	r0, r5
    43bc:	f000 fee5 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    43c0:	0020      	movs	r0, r4
    43c2:	f7fe fbcd 	bl	2b60 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    43c6:	682b      	ldr	r3, [r5, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d015      	beq.n	43f8 <z_abort_timeout+0x6c>
			remove_timeout(to);
    43cc:	0028      	movs	r0, r5
    43ce:	f7ff ff03 	bl	41d8 <remove_timeout>
			ret = 0;
    43d2:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    43d4:	0020      	movs	r0, r4
    43d6:	f7fe fbb5 	bl	2b44 <z_spin_unlock_valid>
    43da:	2800      	cmp	r0, #0
    43dc:	d10f      	bne.n	43fe <z_abort_timeout+0x72>
    43de:	4d0c      	ldr	r5, [pc, #48]	; (4410 <z_abort_timeout+0x84>)
    43e0:	23c3      	movs	r3, #195	; 0xc3
    43e2:	002a      	movs	r2, r5
    43e4:	490e      	ldr	r1, [pc, #56]	; (4420 <z_abort_timeout+0x94>)
    43e6:	480c      	ldr	r0, [pc, #48]	; (4418 <z_abort_timeout+0x8c>)
    43e8:	f000 fed3 	bl	5192 <assert_print>
    43ec:	0021      	movs	r1, r4
    43ee:	480d      	ldr	r0, [pc, #52]	; (4424 <z_abort_timeout+0x98>)
    43f0:	f000 fecf 	bl	5192 <assert_print>
    43f4:	21c3      	movs	r1, #195	; 0xc3
    43f6:	e7e0      	b.n	43ba <z_abort_timeout+0x2e>
	int ret = -EINVAL;
    43f8:	2516      	movs	r5, #22
    43fa:	426d      	negs	r5, r5
    43fc:	e7ea      	b.n	43d4 <z_abort_timeout+0x48>
	if (key != 0U) {
    43fe:	2e00      	cmp	r6, #0
    4400:	d102      	bne.n	4408 <z_abort_timeout+0x7c>
	__asm__ volatile(
    4402:	b662      	cpsie	i
    4404:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    4408:	0028      	movs	r0, r5
    440a:	bd70      	pop	{r4, r5, r6, pc}
    440c:	200009b4 	.word	0x200009b4
    4410:	000064e1 	.word	0x000064e1
    4414:	0000650e 	.word	0x0000650e
    4418:	00005d0d 	.word	0x00005d0d
    441c:	00006523 	.word	0x00006523
    4420:	0000653b 	.word	0x0000653b
    4424:	00006552 	.word	0x00006552

00004428 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    4428:	b5f0      	push	{r4, r5, r6, r7, lr}
    442a:	0004      	movs	r4, r0
    442c:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
    442e:	f3ef 8310 	mrs	r3, PRIMASK
    4432:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4434:	4d4d      	ldr	r5, [pc, #308]	; (456c <sys_clock_announce+0x144>)
	k.key = arch_irq_lock();
    4436:	9301      	str	r3, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4438:	0028      	movs	r0, r5
    443a:	f7fe fb73 	bl	2b24 <z_spin_lock_valid>
    443e:	2800      	cmp	r0, #0
    4440:	d10e      	bne.n	4460 <sys_clock_announce+0x38>
    4442:	4c4b      	ldr	r4, [pc, #300]	; (4570 <sys_clock_announce+0x148>)
    4444:	2394      	movs	r3, #148	; 0x94
    4446:	0022      	movs	r2, r4
    4448:	494a      	ldr	r1, [pc, #296]	; (4574 <sys_clock_announce+0x14c>)
    444a:	484b      	ldr	r0, [pc, #300]	; (4578 <sys_clock_announce+0x150>)
    444c:	f000 fea1 	bl	5192 <assert_print>
    4450:	4946      	ldr	r1, [pc, #280]	; (456c <sys_clock_announce+0x144>)
    4452:	484a      	ldr	r0, [pc, #296]	; (457c <sys_clock_announce+0x154>)
    4454:	f000 fe9d 	bl	5192 <assert_print>
    4458:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    445a:	0020      	movs	r0, r4
    445c:	f000 fe95 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    4460:	0028      	movs	r0, r5
    4462:	f7fe fb7d 	bl	2b60 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4466:	4b46      	ldr	r3, [pc, #280]	; (4580 <sys_clock_announce+0x158>)
    4468:	601c      	str	r4, [r3, #0]
	return list->head == list;
    446a:	4b46      	ldr	r3, [pc, #280]	; (4584 <sys_clock_announce+0x15c>)
    446c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    446e:	429c      	cmp	r4, r3
    4470:	d100      	bne.n	4474 <sys_clock_announce+0x4c>
    4472:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    4474:	4b44      	ldr	r3, [pc, #272]	; (4588 <sys_clock_announce+0x160>)
    4476:	9304      	str	r3, [sp, #16]
    4478:	6818      	ldr	r0, [r3, #0]
    447a:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
    447c:	4b40      	ldr	r3, [pc, #256]	; (4580 <sys_clock_announce+0x158>)
    447e:	681f      	ldr	r7, [r3, #0]
    4480:	9305      	str	r3, [sp, #20]
    4482:	2c00      	cmp	r4, #0
    4484:	d054      	beq.n	4530 <sys_clock_announce+0x108>
    4486:	6962      	ldr	r2, [r4, #20]
    4488:	6926      	ldr	r6, [r4, #16]
    448a:	17fb      	asrs	r3, r7, #31
    448c:	429a      	cmp	r2, r3
    448e:	dc02      	bgt.n	4496 <sys_clock_announce+0x6e>
    4490:	d10a      	bne.n	44a8 <sys_clock_announce+0x80>
    4492:	42be      	cmp	r6, r7
    4494:	d908      	bls.n	44a8 <sys_clock_announce+0x80>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    4496:	001e      	movs	r6, r3
    4498:	6922      	ldr	r2, [r4, #16]
    449a:	6963      	ldr	r3, [r4, #20]
    449c:	003d      	movs	r5, r7
    449e:	1b52      	subs	r2, r2, r5
    44a0:	41b3      	sbcs	r3, r6
    44a2:	6122      	str	r2, [r4, #16]
    44a4:	6163      	str	r3, [r4, #20]
    44a6:	e043      	b.n	4530 <sys_clock_announce+0x108>
		curr_tick += dt;
    44a8:	17f3      	asrs	r3, r6, #31
    44aa:	9602      	str	r6, [sp, #8]
    44ac:	9303      	str	r3, [sp, #12]
    44ae:	9a02      	ldr	r2, [sp, #8]
    44b0:	9b03      	ldr	r3, [sp, #12]
    44b2:	1880      	adds	r0, r0, r2
    44b4:	4159      	adcs	r1, r3
		t->dticks = 0;
    44b6:	2200      	movs	r2, #0
    44b8:	2300      	movs	r3, #0
		curr_tick += dt;
    44ba:	4d33      	ldr	r5, [pc, #204]	; (4588 <sys_clock_announce+0x160>)
		t->dticks = 0;
    44bc:	6122      	str	r2, [r4, #16]
    44be:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
    44c0:	6028      	str	r0, [r5, #0]
    44c2:	6069      	str	r1, [r5, #4]
		remove_timeout(t);
    44c4:	0020      	movs	r0, r4
    44c6:	f7ff fe87 	bl	41d8 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    44ca:	4f28      	ldr	r7, [pc, #160]	; (456c <sys_clock_announce+0x144>)
    44cc:	0038      	movs	r0, r7
    44ce:	f7fe fb39 	bl	2b44 <z_spin_unlock_valid>
    44d2:	2800      	cmp	r0, #0
    44d4:	d10c      	bne.n	44f0 <sys_clock_announce+0xc8>
    44d6:	4c26      	ldr	r4, [pc, #152]	; (4570 <sys_clock_announce+0x148>)
    44d8:	23c3      	movs	r3, #195	; 0xc3
    44da:	0022      	movs	r2, r4
    44dc:	492b      	ldr	r1, [pc, #172]	; (458c <sys_clock_announce+0x164>)
    44de:	4826      	ldr	r0, [pc, #152]	; (4578 <sys_clock_announce+0x150>)
    44e0:	f000 fe57 	bl	5192 <assert_print>
    44e4:	4921      	ldr	r1, [pc, #132]	; (456c <sys_clock_announce+0x144>)
    44e6:	482a      	ldr	r0, [pc, #168]	; (4590 <sys_clock_announce+0x168>)
    44e8:	f000 fe53 	bl	5192 <assert_print>
    44ec:	21c3      	movs	r1, #195	; 0xc3
    44ee:	e7b4      	b.n	445a <sys_clock_announce+0x32>
	if (key != 0U) {
    44f0:	9b01      	ldr	r3, [sp, #4]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d102      	bne.n	44fc <sys_clock_announce+0xd4>
	__asm__ volatile(
    44f6:	b662      	cpsie	i
    44f8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    44fc:	0020      	movs	r0, r4
    44fe:	68a3      	ldr	r3, [r4, #8]
    4500:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
    4502:	f3ef 8310 	mrs	r3, PRIMASK
    4506:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4508:	0038      	movs	r0, r7
	k.key = arch_irq_lock();
    450a:	9301      	str	r3, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    450c:	f7fe fb0a 	bl	2b24 <z_spin_lock_valid>
    4510:	2800      	cmp	r0, #0
    4512:	d096      	beq.n	4442 <sys_clock_announce+0x1a>
	z_spin_lock_set_owner(l);
    4514:	0038      	movs	r0, r7
    4516:	f7fe fb23 	bl	2b60 <z_spin_lock_set_owner>
		announce_remaining -= dt;
    451a:	4b19      	ldr	r3, [pc, #100]	; (4580 <sys_clock_announce+0x158>)
    451c:	681f      	ldr	r7, [r3, #0]
    451e:	1bbf      	subs	r7, r7, r6
    4520:	601f      	str	r7, [r3, #0]
	return list->head == list;
    4522:	4b18      	ldr	r3, [pc, #96]	; (4584 <sys_clock_announce+0x15c>)
    4524:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4526:	429c      	cmp	r4, r3
    4528:	d1a4      	bne.n	4474 <sys_clock_announce+0x4c>
		curr_tick += dt;
    452a:	4b17      	ldr	r3, [pc, #92]	; (4588 <sys_clock_announce+0x160>)
    452c:	6818      	ldr	r0, [r3, #0]
    452e:	6859      	ldr	r1, [r3, #4]
	}

	curr_tick += announce_remaining;
    4530:	003a      	movs	r2, r7
    4532:	17fb      	asrs	r3, r7, #31
    4534:	1812      	adds	r2, r2, r0
    4536:	414b      	adcs	r3, r1
	announce_remaining = 0;
    4538:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    453a:	9904      	ldr	r1, [sp, #16]
    453c:	600a      	str	r2, [r1, #0]
    453e:	604b      	str	r3, [r1, #4]
	announce_remaining = 0;
    4540:	9b05      	ldr	r3, [sp, #20]
    4542:	601c      	str	r4, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4544:	f7ff fe26 	bl	4194 <next_timeout>
    4548:	0021      	movs	r1, r4
    454a:	f7fd ff05 	bl	2358 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    454e:	4807      	ldr	r0, [pc, #28]	; (456c <sys_clock_announce+0x144>)
    4550:	f7fe faf8 	bl	2b44 <z_spin_unlock_valid>
    4554:	42a0      	cmp	r0, r4
    4556:	d0be      	beq.n	44d6 <sys_clock_announce+0xae>
	if (key != 0U) {
    4558:	9b01      	ldr	r3, [sp, #4]
    455a:	42a3      	cmp	r3, r4
    455c:	d102      	bne.n	4564 <sys_clock_announce+0x13c>
	__asm__ volatile(
    455e:	b662      	cpsie	i
    4560:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
    4564:	f7fe ffd0 	bl	3508 <z_time_slice>
#endif
}
    4568:	b007      	add	sp, #28
    456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    456c:	200009b4 	.word	0x200009b4
    4570:	000064e1 	.word	0x000064e1
    4574:	0000650e 	.word	0x0000650e
    4578:	00005d0d 	.word	0x00005d0d
    457c:	00006523 	.word	0x00006523
    4580:	200009b0 	.word	0x200009b0
    4584:	200006a0 	.word	0x200006a0
    4588:	200008a0 	.word	0x200008a0
    458c:	0000653b 	.word	0x0000653b
    4590:	00006552 	.word	0x00006552

00004594 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    4596:	f3ef 8510 	mrs	r5, PRIMASK
    459a:	b672      	cpsid	i
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    459c:	4c1d      	ldr	r4, [pc, #116]	; (4614 <sys_clock_tick_get+0x80>)
    459e:	0020      	movs	r0, r4
    45a0:	f7fe fac0 	bl	2b24 <z_spin_lock_valid>
    45a4:	2800      	cmp	r0, #0
    45a6:	d10e      	bne.n	45c6 <sys_clock_tick_get+0x32>
    45a8:	4d1b      	ldr	r5, [pc, #108]	; (4618 <sys_clock_tick_get+0x84>)
    45aa:	2394      	movs	r3, #148	; 0x94
    45ac:	002a      	movs	r2, r5
    45ae:	491b      	ldr	r1, [pc, #108]	; (461c <sys_clock_tick_get+0x88>)
    45b0:	481b      	ldr	r0, [pc, #108]	; (4620 <sys_clock_tick_get+0x8c>)
    45b2:	f000 fdee 	bl	5192 <assert_print>
    45b6:	0021      	movs	r1, r4
    45b8:	481a      	ldr	r0, [pc, #104]	; (4624 <sys_clock_tick_get+0x90>)
    45ba:	f000 fdea 	bl	5192 <assert_print>
    45be:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45c0:	0028      	movs	r0, r5
    45c2:	f000 fde2 	bl	518a <assert_post_action>
	z_spin_lock_set_owner(l);
    45c6:	0020      	movs	r0, r4
    45c8:	f7fe faca 	bl	2b60 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    45cc:	f7ff fdd6 	bl	417c <elapsed>
    45d0:	0002      	movs	r2, r0
    45d2:	4915      	ldr	r1, [pc, #84]	; (4628 <sys_clock_tick_get+0x94>)
    45d4:	17c3      	asrs	r3, r0, #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45d6:	0020      	movs	r0, r4
    45d8:	680e      	ldr	r6, [r1, #0]
    45da:	684f      	ldr	r7, [r1, #4]
    45dc:	18b6      	adds	r6, r6, r2
    45de:	415f      	adcs	r7, r3
    45e0:	f7fe fab0 	bl	2b44 <z_spin_unlock_valid>
    45e4:	2800      	cmp	r0, #0
    45e6:	d10c      	bne.n	4602 <sys_clock_tick_get+0x6e>
    45e8:	4d0b      	ldr	r5, [pc, #44]	; (4618 <sys_clock_tick_get+0x84>)
    45ea:	23c3      	movs	r3, #195	; 0xc3
    45ec:	002a      	movs	r2, r5
    45ee:	490f      	ldr	r1, [pc, #60]	; (462c <sys_clock_tick_get+0x98>)
    45f0:	480b      	ldr	r0, [pc, #44]	; (4620 <sys_clock_tick_get+0x8c>)
    45f2:	f000 fdce 	bl	5192 <assert_print>
    45f6:	0021      	movs	r1, r4
    45f8:	480d      	ldr	r0, [pc, #52]	; (4630 <sys_clock_tick_get+0x9c>)
    45fa:	f000 fdca 	bl	5192 <assert_print>
    45fe:	21c3      	movs	r1, #195	; 0xc3
    4600:	e7de      	b.n	45c0 <sys_clock_tick_get+0x2c>
	if (key != 0U) {
    4602:	2d00      	cmp	r5, #0
    4604:	d102      	bne.n	460c <sys_clock_tick_get+0x78>
	__asm__ volatile(
    4606:	b662      	cpsie	i
    4608:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    460c:	0030      	movs	r0, r6
    460e:	0039      	movs	r1, r7
    4610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	200009b4 	.word	0x200009b4
    4618:	000064e1 	.word	0x000064e1
    461c:	0000650e 	.word	0x0000650e
    4620:	00005d0d 	.word	0x00005d0d
    4624:	00006523 	.word	0x00006523
    4628:	200008a0 	.word	0x200008a0
    462c:	0000653b 	.word	0x0000653b
    4630:	00006552 	.word	0x00006552

00004634 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    4634:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4636:	4802      	ldr	r0, [pc, #8]	; (4640 <boot_banner+0xc>)
    4638:	f000 fd7c 	bl	5134 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    463c:	bd10      	pop	{r4, pc}
    463e:	46c0      	nop			; (mov r8, r8)
    4640:	00006c4c 	.word	0x00006c4c

00004644 <malloc>:
    4644:	b510      	push	{r4, lr}
    4646:	4b03      	ldr	r3, [pc, #12]	; (4654 <malloc+0x10>)
    4648:	0001      	movs	r1, r0
    464a:	6818      	ldr	r0, [r3, #0]
    464c:	f000 f80e 	bl	466c <_malloc_r>
    4650:	bd10      	pop	{r4, pc}
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	200006b0 	.word	0x200006b0

00004658 <free>:
    4658:	b510      	push	{r4, lr}
    465a:	4b03      	ldr	r3, [pc, #12]	; (4668 <free+0x10>)
    465c:	0001      	movs	r1, r0
    465e:	6818      	ldr	r0, [r3, #0]
    4660:	f000 fc2a 	bl	4eb8 <_free_r>
    4664:	bd10      	pop	{r4, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	200006b0 	.word	0x200006b0

0000466c <_malloc_r>:
    466c:	b5f0      	push	{r4, r5, r6, r7, lr}
    466e:	4645      	mov	r5, r8
    4670:	46de      	mov	lr, fp
    4672:	4657      	mov	r7, sl
    4674:	464e      	mov	r6, r9
    4676:	b5e0      	push	{r5, r6, r7, lr}
    4678:	000d      	movs	r5, r1
    467a:	b083      	sub	sp, #12
    467c:	350b      	adds	r5, #11
    467e:	9000      	str	r0, [sp, #0]
    4680:	2d16      	cmp	r5, #22
    4682:	d827      	bhi.n	46d4 <_malloc_r+0x68>
    4684:	2910      	cmp	r1, #16
    4686:	d900      	bls.n	468a <_malloc_r+0x1e>
    4688:	e0c8      	b.n	481c <_malloc_r+0x1b0>
    468a:	f000 fb2f 	bl	4cec <__malloc_lock>
    468e:	2510      	movs	r5, #16
    4690:	2318      	movs	r3, #24
    4692:	2102      	movs	r1, #2
    4694:	4fc5      	ldr	r7, [pc, #788]	; (49ac <_malloc_r+0x340>)
    4696:	18fb      	adds	r3, r7, r3
    4698:	001a      	movs	r2, r3
    469a:	685c      	ldr	r4, [r3, #4]
    469c:	3a08      	subs	r2, #8
    469e:	4294      	cmp	r4, r2
    46a0:	d100      	bne.n	46a4 <_malloc_r+0x38>
    46a2:	e123      	b.n	48ec <_malloc_r+0x280>
    46a4:	2203      	movs	r2, #3
    46a6:	6863      	ldr	r3, [r4, #4]
    46a8:	4393      	bics	r3, r2
    46aa:	68e2      	ldr	r2, [r4, #12]
    46ac:	68a1      	ldr	r1, [r4, #8]
    46ae:	60ca      	str	r2, [r1, #12]
    46b0:	6091      	str	r1, [r2, #8]
    46b2:	2101      	movs	r1, #1
    46b4:	18e3      	adds	r3, r4, r3
    46b6:	685a      	ldr	r2, [r3, #4]
    46b8:	9800      	ldr	r0, [sp, #0]
    46ba:	430a      	orrs	r2, r1
    46bc:	605a      	str	r2, [r3, #4]
    46be:	f000 fb1d 	bl	4cfc <__malloc_unlock>
    46c2:	0020      	movs	r0, r4
    46c4:	3008      	adds	r0, #8
    46c6:	b003      	add	sp, #12
    46c8:	bcf0      	pop	{r4, r5, r6, r7}
    46ca:	46bb      	mov	fp, r7
    46cc:	46b2      	mov	sl, r6
    46ce:	46a9      	mov	r9, r5
    46d0:	46a0      	mov	r8, r4
    46d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46d4:	2307      	movs	r3, #7
    46d6:	439d      	bics	r5, r3
    46d8:	d500      	bpl.n	46dc <_malloc_r+0x70>
    46da:	e09f      	b.n	481c <_malloc_r+0x1b0>
    46dc:	42a9      	cmp	r1, r5
    46de:	d900      	bls.n	46e2 <_malloc_r+0x76>
    46e0:	e09c      	b.n	481c <_malloc_r+0x1b0>
    46e2:	9800      	ldr	r0, [sp, #0]
    46e4:	f000 fb02 	bl	4cec <__malloc_lock>
    46e8:	23fc      	movs	r3, #252	; 0xfc
    46ea:	005b      	lsls	r3, r3, #1
    46ec:	429d      	cmp	r5, r3
    46ee:	d200      	bcs.n	46f2 <_malloc_r+0x86>
    46f0:	e157      	b.n	49a2 <_malloc_r+0x336>
    46f2:	0a69      	lsrs	r1, r5, #9
    46f4:	d100      	bne.n	46f8 <_malloc_r+0x8c>
    46f6:	e096      	b.n	4826 <_malloc_r+0x1ba>
    46f8:	2904      	cmp	r1, #4
    46fa:	d900      	bls.n	46fe <_malloc_r+0x92>
    46fc:	e122      	b.n	4944 <_malloc_r+0x2d8>
    46fe:	2338      	movs	r3, #56	; 0x38
    4700:	469c      	mov	ip, r3
    4702:	09a9      	lsrs	r1, r5, #6
    4704:	448c      	add	ip, r1
    4706:	3139      	adds	r1, #57	; 0x39
    4708:	00c8      	lsls	r0, r1, #3
    470a:	4fa8      	ldr	r7, [pc, #672]	; (49ac <_malloc_r+0x340>)
    470c:	1838      	adds	r0, r7, r0
    470e:	6844      	ldr	r4, [r0, #4]
    4710:	3808      	subs	r0, #8
    4712:	42a0      	cmp	r0, r4
    4714:	d00c      	beq.n	4730 <_malloc_r+0xc4>
    4716:	2603      	movs	r6, #3
    4718:	e004      	b.n	4724 <_malloc_r+0xb8>
    471a:	2a00      	cmp	r2, #0
    471c:	dac5      	bge.n	46aa <_malloc_r+0x3e>
    471e:	68e4      	ldr	r4, [r4, #12]
    4720:	42a0      	cmp	r0, r4
    4722:	d005      	beq.n	4730 <_malloc_r+0xc4>
    4724:	6863      	ldr	r3, [r4, #4]
    4726:	43b3      	bics	r3, r6
    4728:	1b5a      	subs	r2, r3, r5
    472a:	2a0f      	cmp	r2, #15
    472c:	ddf5      	ble.n	471a <_malloc_r+0xae>
    472e:	4661      	mov	r1, ip
    4730:	003a      	movs	r2, r7
    4732:	693c      	ldr	r4, [r7, #16]
    4734:	3208      	adds	r2, #8
    4736:	4294      	cmp	r4, r2
    4738:	d100      	bne.n	473c <_malloc_r+0xd0>
    473a:	e0c6      	b.n	48ca <_malloc_r+0x25e>
    473c:	2003      	movs	r0, #3
    473e:	6863      	ldr	r3, [r4, #4]
    4740:	4383      	bics	r3, r0
    4742:	1b58      	subs	r0, r3, r5
    4744:	280f      	cmp	r0, #15
    4746:	dd00      	ble.n	474a <_malloc_r+0xde>
    4748:	e13e      	b.n	49c8 <_malloc_r+0x35c>
    474a:	613a      	str	r2, [r7, #16]
    474c:	617a      	str	r2, [r7, #20]
    474e:	2800      	cmp	r0, #0
    4750:	daaf      	bge.n	46b2 <_malloc_r+0x46>
    4752:	687a      	ldr	r2, [r7, #4]
    4754:	4690      	mov	r8, r2
    4756:	2280      	movs	r2, #128	; 0x80
    4758:	0092      	lsls	r2, r2, #2
    475a:	4293      	cmp	r3, r2
    475c:	d300      	bcc.n	4760 <_malloc_r+0xf4>
    475e:	e0cb      	b.n	48f8 <_malloc_r+0x28c>
    4760:	08da      	lsrs	r2, r3, #3
    4762:	0958      	lsrs	r0, r3, #5
    4764:	2301      	movs	r3, #1
    4766:	4083      	lsls	r3, r0
    4768:	4640      	mov	r0, r8
    476a:	4318      	orrs	r0, r3
    476c:	4680      	mov	r8, r0
    476e:	00d3      	lsls	r3, r2, #3
    4770:	19db      	adds	r3, r3, r7
    4772:	689a      	ldr	r2, [r3, #8]
    4774:	6078      	str	r0, [r7, #4]
    4776:	60e3      	str	r3, [r4, #12]
    4778:	60a2      	str	r2, [r4, #8]
    477a:	609c      	str	r4, [r3, #8]
    477c:	60d4      	str	r4, [r2, #12]
    477e:	2001      	movs	r0, #1
    4780:	108b      	asrs	r3, r1, #2
    4782:	4098      	lsls	r0, r3
    4784:	4540      	cmp	r0, r8
    4786:	d854      	bhi.n	4832 <_malloc_r+0x1c6>
    4788:	4643      	mov	r3, r8
    478a:	4203      	tst	r3, r0
    478c:	d106      	bne.n	479c <_malloc_r+0x130>
    478e:	2303      	movs	r3, #3
    4790:	4399      	bics	r1, r3
    4792:	4643      	mov	r3, r8
    4794:	0040      	lsls	r0, r0, #1
    4796:	3104      	adds	r1, #4
    4798:	4203      	tst	r3, r0
    479a:	d0fa      	beq.n	4792 <_malloc_r+0x126>
    479c:	2303      	movs	r3, #3
    479e:	4698      	mov	r8, r3
    47a0:	00cb      	lsls	r3, r1, #3
    47a2:	4699      	mov	r9, r3
    47a4:	44b9      	add	r9, r7
    47a6:	46cc      	mov	ip, r9
    47a8:	468a      	mov	sl, r1
    47aa:	4663      	mov	r3, ip
    47ac:	68db      	ldr	r3, [r3, #12]
    47ae:	e00b      	b.n	47c8 <_malloc_r+0x15c>
    47b0:	4644      	mov	r4, r8
    47b2:	685a      	ldr	r2, [r3, #4]
    47b4:	43a2      	bics	r2, r4
    47b6:	1b56      	subs	r6, r2, r5
    47b8:	001c      	movs	r4, r3
    47ba:	68db      	ldr	r3, [r3, #12]
    47bc:	2e0f      	cmp	r6, #15
    47be:	dd00      	ble.n	47c2 <_malloc_r+0x156>
    47c0:	e0cc      	b.n	495c <_malloc_r+0x2f0>
    47c2:	2e00      	cmp	r6, #0
    47c4:	db00      	blt.n	47c8 <_malloc_r+0x15c>
    47c6:	e0de      	b.n	4986 <_malloc_r+0x31a>
    47c8:	459c      	cmp	ip, r3
    47ca:	d1f1      	bne.n	47b0 <_malloc_r+0x144>
    47cc:	2308      	movs	r3, #8
    47ce:	469b      	mov	fp, r3
    47d0:	3b07      	subs	r3, #7
    47d2:	44dc      	add	ip, fp
    47d4:	469b      	mov	fp, r3
    47d6:	44da      	add	sl, fp
    47d8:	4653      	mov	r3, sl
    47da:	079b      	lsls	r3, r3, #30
    47dc:	d1e5      	bne.n	47aa <_malloc_r+0x13e>
    47de:	2203      	movs	r2, #3
    47e0:	e009      	b.n	47f6 <_malloc_r+0x18a>
    47e2:	2308      	movs	r3, #8
    47e4:	425b      	negs	r3, r3
    47e6:	469c      	mov	ip, r3
    47e8:	44e1      	add	r9, ip
    47ea:	464b      	mov	r3, r9
    47ec:	689b      	ldr	r3, [r3, #8]
    47ee:	3901      	subs	r1, #1
    47f0:	454b      	cmp	r3, r9
    47f2:	d000      	beq.n	47f6 <_malloc_r+0x18a>
    47f4:	e1d6      	b.n	4ba4 <_malloc_r+0x538>
    47f6:	420a      	tst	r2, r1
    47f8:	d1f3      	bne.n	47e2 <_malloc_r+0x176>
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	4383      	bics	r3, r0
    47fe:	607b      	str	r3, [r7, #4]
    4800:	0040      	lsls	r0, r0, #1
    4802:	4298      	cmp	r0, r3
    4804:	d815      	bhi.n	4832 <_malloc_r+0x1c6>
    4806:	2800      	cmp	r0, #0
    4808:	d104      	bne.n	4814 <_malloc_r+0x1a8>
    480a:	e012      	b.n	4832 <_malloc_r+0x1c6>
    480c:	2204      	movs	r2, #4
    480e:	4694      	mov	ip, r2
    4810:	0040      	lsls	r0, r0, #1
    4812:	44e2      	add	sl, ip
    4814:	4203      	tst	r3, r0
    4816:	d0f9      	beq.n	480c <_malloc_r+0x1a0>
    4818:	4651      	mov	r1, sl
    481a:	e7c1      	b.n	47a0 <_malloc_r+0x134>
    481c:	230c      	movs	r3, #12
    481e:	9a00      	ldr	r2, [sp, #0]
    4820:	2000      	movs	r0, #0
    4822:	6013      	str	r3, [r2, #0]
    4824:	e74f      	b.n	46c6 <_malloc_r+0x5a>
    4826:	2080      	movs	r0, #128	; 0x80
    4828:	233f      	movs	r3, #63	; 0x3f
    482a:	2140      	movs	r1, #64	; 0x40
    482c:	469c      	mov	ip, r3
    482e:	0080      	lsls	r0, r0, #2
    4830:	e76b      	b.n	470a <_malloc_r+0x9e>
    4832:	2203      	movs	r2, #3
    4834:	68bc      	ldr	r4, [r7, #8]
    4836:	6863      	ldr	r3, [r4, #4]
    4838:	4393      	bics	r3, r2
    483a:	4699      	mov	r9, r3
    483c:	42ab      	cmp	r3, r5
    483e:	d302      	bcc.n	4846 <_malloc_r+0x1da>
    4840:	1b5b      	subs	r3, r3, r5
    4842:	2b0f      	cmp	r3, #15
    4844:	dc44      	bgt.n	48d0 <_malloc_r+0x264>
    4846:	0023      	movs	r3, r4
    4848:	444b      	add	r3, r9
    484a:	4a59      	ldr	r2, [pc, #356]	; (49b0 <_malloc_r+0x344>)
    484c:	9301      	str	r3, [sp, #4]
    484e:	4b59      	ldr	r3, [pc, #356]	; (49b4 <_malloc_r+0x348>)
    4850:	4693      	mov	fp, r2
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	6812      	ldr	r2, [r2, #0]
    4856:	18eb      	adds	r3, r5, r3
    4858:	3201      	adds	r2, #1
    485a:	d100      	bne.n	485e <_malloc_r+0x1f2>
    485c:	e132      	b.n	4ac4 <_malloc_r+0x458>
    485e:	4a56      	ldr	r2, [pc, #344]	; (49b8 <_malloc_r+0x34c>)
    4860:	4694      	mov	ip, r2
    4862:	4463      	add	r3, ip
    4864:	0b1b      	lsrs	r3, r3, #12
    4866:	031b      	lsls	r3, r3, #12
    4868:	001e      	movs	r6, r3
    486a:	0031      	movs	r1, r6
    486c:	9800      	ldr	r0, [sp, #0]
    486e:	f000 fa4d 	bl	4d0c <_sbrk_r>
    4872:	0003      	movs	r3, r0
    4874:	4680      	mov	r8, r0
    4876:	3301      	adds	r3, #1
    4878:	d100      	bne.n	487c <_malloc_r+0x210>
    487a:	e0bf      	b.n	49fc <_malloc_r+0x390>
    487c:	9b01      	ldr	r3, [sp, #4]
    487e:	4283      	cmp	r3, r0
    4880:	d900      	bls.n	4884 <_malloc_r+0x218>
    4882:	e0b9      	b.n	49f8 <_malloc_r+0x38c>
    4884:	46b4      	mov	ip, r6
    4886:	4b4d      	ldr	r3, [pc, #308]	; (49bc <_malloc_r+0x350>)
    4888:	6819      	ldr	r1, [r3, #0]
    488a:	469a      	mov	sl, r3
    488c:	4461      	add	r1, ip
    488e:	6019      	str	r1, [r3, #0]
    4890:	9b01      	ldr	r3, [sp, #4]
    4892:	000a      	movs	r2, r1
    4894:	4283      	cmp	r3, r0
    4896:	d000      	beq.n	489a <_malloc_r+0x22e>
    4898:	e0cb      	b.n	4a32 <_malloc_r+0x3c6>
    489a:	4643      	mov	r3, r8
    489c:	051b      	lsls	r3, r3, #20
    489e:	d000      	beq.n	48a2 <_malloc_r+0x236>
    48a0:	e0c7      	b.n	4a32 <_malloc_r+0x3c6>
    48a2:	68bb      	ldr	r3, [r7, #8]
    48a4:	0032      	movs	r2, r6
    48a6:	4698      	mov	r8, r3
    48a8:	2301      	movs	r3, #1
    48aa:	444a      	add	r2, r9
    48ac:	431a      	orrs	r2, r3
    48ae:	4643      	mov	r3, r8
    48b0:	605a      	str	r2, [r3, #4]
    48b2:	4b43      	ldr	r3, [pc, #268]	; (49c0 <_malloc_r+0x354>)
    48b4:	6818      	ldr	r0, [r3, #0]
    48b6:	4288      	cmp	r0, r1
    48b8:	d200      	bcs.n	48bc <_malloc_r+0x250>
    48ba:	6019      	str	r1, [r3, #0]
    48bc:	4b41      	ldr	r3, [pc, #260]	; (49c4 <_malloc_r+0x358>)
    48be:	6818      	ldr	r0, [r3, #0]
    48c0:	4288      	cmp	r0, r1
    48c2:	d200      	bcs.n	48c6 <_malloc_r+0x25a>
    48c4:	6019      	str	r1, [r3, #0]
    48c6:	4644      	mov	r4, r8
    48c8:	e09a      	b.n	4a00 <_malloc_r+0x394>
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	4698      	mov	r8, r3
    48ce:	e756      	b.n	477e <_malloc_r+0x112>
    48d0:	2201      	movs	r2, #1
    48d2:	0029      	movs	r1, r5
    48d4:	4313      	orrs	r3, r2
    48d6:	4311      	orrs	r1, r2
    48d8:	1965      	adds	r5, r4, r5
    48da:	6061      	str	r1, [r4, #4]
    48dc:	9800      	ldr	r0, [sp, #0]
    48de:	60bd      	str	r5, [r7, #8]
    48e0:	606b      	str	r3, [r5, #4]
    48e2:	f000 fa0b 	bl	4cfc <__malloc_unlock>
    48e6:	0020      	movs	r0, r4
    48e8:	3008      	adds	r0, #8
    48ea:	e6ec      	b.n	46c6 <_malloc_r+0x5a>
    48ec:	68dc      	ldr	r4, [r3, #12]
    48ee:	3102      	adds	r1, #2
    48f0:	42a3      	cmp	r3, r4
    48f2:	d100      	bne.n	48f6 <_malloc_r+0x28a>
    48f4:	e71c      	b.n	4730 <_malloc_r+0xc4>
    48f6:	e6d5      	b.n	46a4 <_malloc_r+0x38>
    48f8:	0a5a      	lsrs	r2, r3, #9
    48fa:	2a04      	cmp	r2, #4
    48fc:	d976      	bls.n	49ec <_malloc_r+0x380>
    48fe:	2a14      	cmp	r2, #20
    4900:	d900      	bls.n	4904 <_malloc_r+0x298>
    4902:	e0f9      	b.n	4af8 <_malloc_r+0x48c>
    4904:	0010      	movs	r0, r2
    4906:	325c      	adds	r2, #92	; 0x5c
    4908:	305b      	adds	r0, #91	; 0x5b
    490a:	00d2      	lsls	r2, r2, #3
    490c:	2608      	movs	r6, #8
    490e:	4276      	negs	r6, r6
    4910:	46b4      	mov	ip, r6
    4912:	18ba      	adds	r2, r7, r2
    4914:	4494      	add	ip, r2
    4916:	4662      	mov	r2, ip
    4918:	6892      	ldr	r2, [r2, #8]
    491a:	360b      	adds	r6, #11
    491c:	46b1      	mov	r9, r6
    491e:	4594      	cmp	ip, r2
    4920:	d103      	bne.n	492a <_malloc_r+0x2be>
    4922:	e0d2      	b.n	4aca <_malloc_r+0x45e>
    4924:	6892      	ldr	r2, [r2, #8]
    4926:	4594      	cmp	ip, r2
    4928:	d004      	beq.n	4934 <_malloc_r+0x2c8>
    492a:	464e      	mov	r6, r9
    492c:	6850      	ldr	r0, [r2, #4]
    492e:	43b0      	bics	r0, r6
    4930:	4298      	cmp	r0, r3
    4932:	d8f7      	bhi.n	4924 <_malloc_r+0x2b8>
    4934:	68d3      	ldr	r3, [r2, #12]
    4936:	469c      	mov	ip, r3
    4938:	4663      	mov	r3, ip
    493a:	60a2      	str	r2, [r4, #8]
    493c:	60e3      	str	r3, [r4, #12]
    493e:	609c      	str	r4, [r3, #8]
    4940:	60d4      	str	r4, [r2, #12]
    4942:	e71c      	b.n	477e <_malloc_r+0x112>
    4944:	2914      	cmp	r1, #20
    4946:	d968      	bls.n	4a1a <_malloc_r+0x3ae>
    4948:	2954      	cmp	r1, #84	; 0x54
    494a:	d900      	bls.n	494e <_malloc_r+0x2e2>
    494c:	e0dc      	b.n	4b08 <_malloc_r+0x49c>
    494e:	236e      	movs	r3, #110	; 0x6e
    4950:	469c      	mov	ip, r3
    4952:	0b29      	lsrs	r1, r5, #12
    4954:	448c      	add	ip, r1
    4956:	316f      	adds	r1, #111	; 0x6f
    4958:	00c8      	lsls	r0, r1, #3
    495a:	e6d6      	b.n	470a <_malloc_r+0x9e>
    495c:	2001      	movs	r0, #1
    495e:	1961      	adds	r1, r4, r5
    4960:	4305      	orrs	r5, r0
    4962:	6065      	str	r5, [r4, #4]
    4964:	68a5      	ldr	r5, [r4, #8]
    4966:	3708      	adds	r7, #8
    4968:	60eb      	str	r3, [r5, #12]
    496a:	4330      	orrs	r0, r6
    496c:	609d      	str	r5, [r3, #8]
    496e:	60b9      	str	r1, [r7, #8]
    4970:	60f9      	str	r1, [r7, #12]
    4972:	6048      	str	r0, [r1, #4]
    4974:	60cf      	str	r7, [r1, #12]
    4976:	9800      	ldr	r0, [sp, #0]
    4978:	608f      	str	r7, [r1, #8]
    497a:	50a6      	str	r6, [r4, r2]
    497c:	f000 f9be 	bl	4cfc <__malloc_unlock>
    4980:	0020      	movs	r0, r4
    4982:	3008      	adds	r0, #8
    4984:	e69f      	b.n	46c6 <_malloc_r+0x5a>
    4986:	2001      	movs	r0, #1
    4988:	18a2      	adds	r2, r4, r2
    498a:	6851      	ldr	r1, [r2, #4]
    498c:	4301      	orrs	r1, r0
    498e:	6051      	str	r1, [r2, #4]
    4990:	68a2      	ldr	r2, [r4, #8]
    4992:	9800      	ldr	r0, [sp, #0]
    4994:	60d3      	str	r3, [r2, #12]
    4996:	609a      	str	r2, [r3, #8]
    4998:	f000 f9b0 	bl	4cfc <__malloc_unlock>
    499c:	0020      	movs	r0, r4
    499e:	3008      	adds	r0, #8
    49a0:	e691      	b.n	46c6 <_malloc_r+0x5a>
    49a2:	002b      	movs	r3, r5
    49a4:	08e9      	lsrs	r1, r5, #3
    49a6:	3308      	adds	r3, #8
    49a8:	e674      	b.n	4694 <_malloc_r+0x28>
    49aa:	46c0      	nop			; (mov r8, r8)
    49ac:	20000000 	.word	0x20000000
    49b0:	200006a8 	.word	0x200006a8
    49b4:	200009e8 	.word	0x200009e8
    49b8:	0000100f 	.word	0x0000100f
    49bc:	200009b8 	.word	0x200009b8
    49c0:	200009e4 	.word	0x200009e4
    49c4:	200009e0 	.word	0x200009e0
    49c8:	2601      	movs	r6, #1
    49ca:	1961      	adds	r1, r4, r5
    49cc:	4335      	orrs	r5, r6
    49ce:	6065      	str	r5, [r4, #4]
    49d0:	6139      	str	r1, [r7, #16]
    49d2:	6179      	str	r1, [r7, #20]
    49d4:	60ca      	str	r2, [r1, #12]
    49d6:	608a      	str	r2, [r1, #8]
    49d8:	0032      	movs	r2, r6
    49da:	4302      	orrs	r2, r0
    49dc:	604a      	str	r2, [r1, #4]
    49de:	50e0      	str	r0, [r4, r3]
    49e0:	9800      	ldr	r0, [sp, #0]
    49e2:	f000 f98b 	bl	4cfc <__malloc_unlock>
    49e6:	0020      	movs	r0, r4
    49e8:	3008      	adds	r0, #8
    49ea:	e66c      	b.n	46c6 <_malloc_r+0x5a>
    49ec:	099a      	lsrs	r2, r3, #6
    49ee:	0010      	movs	r0, r2
    49f0:	3239      	adds	r2, #57	; 0x39
    49f2:	3038      	adds	r0, #56	; 0x38
    49f4:	00d2      	lsls	r2, r2, #3
    49f6:	e789      	b.n	490c <_malloc_r+0x2a0>
    49f8:	42bc      	cmp	r4, r7
    49fa:	d014      	beq.n	4a26 <_malloc_r+0x3ba>
    49fc:	68bc      	ldr	r4, [r7, #8]
    49fe:	6862      	ldr	r2, [r4, #4]
    4a00:	2303      	movs	r3, #3
    4a02:	439a      	bics	r2, r3
    4a04:	1b53      	subs	r3, r2, r5
    4a06:	42aa      	cmp	r2, r5
    4a08:	d302      	bcc.n	4a10 <_malloc_r+0x3a4>
    4a0a:	2b0f      	cmp	r3, #15
    4a0c:	dd00      	ble.n	4a10 <_malloc_r+0x3a4>
    4a0e:	e75f      	b.n	48d0 <_malloc_r+0x264>
    4a10:	9800      	ldr	r0, [sp, #0]
    4a12:	f000 f973 	bl	4cfc <__malloc_unlock>
    4a16:	2000      	movs	r0, #0
    4a18:	e655      	b.n	46c6 <_malloc_r+0x5a>
    4a1a:	235b      	movs	r3, #91	; 0x5b
    4a1c:	469c      	mov	ip, r3
    4a1e:	448c      	add	ip, r1
    4a20:	315c      	adds	r1, #92	; 0x5c
    4a22:	00c8      	lsls	r0, r1, #3
    4a24:	e671      	b.n	470a <_malloc_r+0x9e>
    4a26:	4b60      	ldr	r3, [pc, #384]	; (4ba8 <_malloc_r+0x53c>)
    4a28:	46b4      	mov	ip, r6
    4a2a:	469a      	mov	sl, r3
    4a2c:	681a      	ldr	r2, [r3, #0]
    4a2e:	4462      	add	r2, ip
    4a30:	601a      	str	r2, [r3, #0]
    4a32:	465b      	mov	r3, fp
    4a34:	681b      	ldr	r3, [r3, #0]
    4a36:	3301      	adds	r3, #1
    4a38:	d071      	beq.n	4b1e <_malloc_r+0x4b2>
    4a3a:	4643      	mov	r3, r8
    4a3c:	9901      	ldr	r1, [sp, #4]
    4a3e:	1a5b      	subs	r3, r3, r1
    4a40:	189b      	adds	r3, r3, r2
    4a42:	4652      	mov	r2, sl
    4a44:	6013      	str	r3, [r2, #0]
    4a46:	2307      	movs	r3, #7
    4a48:	4642      	mov	r2, r8
    4a4a:	4641      	mov	r1, r8
    4a4c:	401a      	ands	r2, r3
    4a4e:	9201      	str	r2, [sp, #4]
    4a50:	4219      	tst	r1, r3
    4a52:	d042      	beq.n	4ada <_malloc_r+0x46e>
    4a54:	1a8b      	subs	r3, r1, r2
    4a56:	2108      	movs	r1, #8
    4a58:	4688      	mov	r8, r1
    4a5a:	0031      	movs	r1, r6
    4a5c:	4498      	add	r8, r3
    4a5e:	4b53      	ldr	r3, [pc, #332]	; (4bac <_malloc_r+0x540>)
    4a60:	4441      	add	r1, r8
    4a62:	1a9b      	subs	r3, r3, r2
    4a64:	1a5b      	subs	r3, r3, r1
    4a66:	051b      	lsls	r3, r3, #20
    4a68:	0d1b      	lsrs	r3, r3, #20
    4a6a:	000e      	movs	r6, r1
    4a6c:	9800      	ldr	r0, [sp, #0]
    4a6e:	0019      	movs	r1, r3
    4a70:	469b      	mov	fp, r3
    4a72:	f000 f94b 	bl	4d0c <_sbrk_r>
    4a76:	1c43      	adds	r3, r0, #1
    4a78:	d06c      	beq.n	4b54 <_malloc_r+0x4e8>
    4a7a:	4643      	mov	r3, r8
    4a7c:	1ac0      	subs	r0, r0, r3
    4a7e:	0003      	movs	r3, r0
    4a80:	445b      	add	r3, fp
    4a82:	001e      	movs	r6, r3
    4a84:	4653      	mov	r3, sl
    4a86:	6819      	ldr	r1, [r3, #0]
    4a88:	2001      	movs	r0, #1
    4a8a:	0032      	movs	r2, r6
    4a8c:	4459      	add	r1, fp
    4a8e:	6019      	str	r1, [r3, #0]
    4a90:	4643      	mov	r3, r8
    4a92:	4302      	orrs	r2, r0
    4a94:	60bb      	str	r3, [r7, #8]
    4a96:	605a      	str	r2, [r3, #4]
    4a98:	42bc      	cmp	r4, r7
    4a9a:	d100      	bne.n	4a9e <_malloc_r+0x432>
    4a9c:	e709      	b.n	48b2 <_malloc_r+0x246>
    4a9e:	464b      	mov	r3, r9
    4aa0:	2b0f      	cmp	r3, #15
    4aa2:	d940      	bls.n	4b26 <_malloc_r+0x4ba>
    4aa4:	2207      	movs	r2, #7
    4aa6:	3b0c      	subs	r3, #12
    4aa8:	4393      	bics	r3, r2
    4aaa:	6862      	ldr	r2, [r4, #4]
    4aac:	4002      	ands	r2, r0
    4aae:	2005      	movs	r0, #5
    4ab0:	431a      	orrs	r2, r3
    4ab2:	6062      	str	r2, [r4, #4]
    4ab4:	18e2      	adds	r2, r4, r3
    4ab6:	6050      	str	r0, [r2, #4]
    4ab8:	6090      	str	r0, [r2, #8]
    4aba:	2b0f      	cmp	r3, #15
    4abc:	d854      	bhi.n	4b68 <_malloc_r+0x4fc>
    4abe:	4643      	mov	r3, r8
    4ac0:	685a      	ldr	r2, [r3, #4]
    4ac2:	e6f6      	b.n	48b2 <_malloc_r+0x246>
    4ac4:	3310      	adds	r3, #16
    4ac6:	001e      	movs	r6, r3
    4ac8:	e6cf      	b.n	486a <_malloc_r+0x1fe>
    4aca:	2301      	movs	r3, #1
    4acc:	1080      	asrs	r0, r0, #2
    4ace:	4083      	lsls	r3, r0
    4ad0:	4640      	mov	r0, r8
    4ad2:	4318      	orrs	r0, r3
    4ad4:	4680      	mov	r8, r0
    4ad6:	6078      	str	r0, [r7, #4]
    4ad8:	e72e      	b.n	4938 <_malloc_r+0x2cc>
    4ada:	0033      	movs	r3, r6
    4adc:	4443      	add	r3, r8
    4ade:	425b      	negs	r3, r3
    4ae0:	051b      	lsls	r3, r3, #20
    4ae2:	0d1b      	lsrs	r3, r3, #20
    4ae4:	0019      	movs	r1, r3
    4ae6:	9800      	ldr	r0, [sp, #0]
    4ae8:	469b      	mov	fp, r3
    4aea:	f000 f90f 	bl	4d0c <_sbrk_r>
    4aee:	1c43      	adds	r3, r0, #1
    4af0:	d1c3      	bne.n	4a7a <_malloc_r+0x40e>
    4af2:	2300      	movs	r3, #0
    4af4:	469b      	mov	fp, r3
    4af6:	e7c5      	b.n	4a84 <_malloc_r+0x418>
    4af8:	2a54      	cmp	r2, #84	; 0x54
    4afa:	d817      	bhi.n	4b2c <_malloc_r+0x4c0>
    4afc:	0b1a      	lsrs	r2, r3, #12
    4afe:	0010      	movs	r0, r2
    4b00:	326f      	adds	r2, #111	; 0x6f
    4b02:	306e      	adds	r0, #110	; 0x6e
    4b04:	00d2      	lsls	r2, r2, #3
    4b06:	e701      	b.n	490c <_malloc_r+0x2a0>
    4b08:	23aa      	movs	r3, #170	; 0xaa
    4b0a:	005b      	lsls	r3, r3, #1
    4b0c:	4299      	cmp	r1, r3
    4b0e:	d817      	bhi.n	4b40 <_malloc_r+0x4d4>
    4b10:	3bdd      	subs	r3, #221	; 0xdd
    4b12:	469c      	mov	ip, r3
    4b14:	0be9      	lsrs	r1, r5, #15
    4b16:	448c      	add	ip, r1
    4b18:	3178      	adds	r1, #120	; 0x78
    4b1a:	00c8      	lsls	r0, r1, #3
    4b1c:	e5f5      	b.n	470a <_malloc_r+0x9e>
    4b1e:	465b      	mov	r3, fp
    4b20:	4642      	mov	r2, r8
    4b22:	601a      	str	r2, [r3, #0]
    4b24:	e78f      	b.n	4a46 <_malloc_r+0x3da>
    4b26:	4643      	mov	r3, r8
    4b28:	6058      	str	r0, [r3, #4]
    4b2a:	e771      	b.n	4a10 <_malloc_r+0x3a4>
    4b2c:	20aa      	movs	r0, #170	; 0xaa
    4b2e:	0040      	lsls	r0, r0, #1
    4b30:	4282      	cmp	r2, r0
    4b32:	d824      	bhi.n	4b7e <_malloc_r+0x512>
    4b34:	0bda      	lsrs	r2, r3, #15
    4b36:	0010      	movs	r0, r2
    4b38:	3278      	adds	r2, #120	; 0x78
    4b3a:	3077      	adds	r0, #119	; 0x77
    4b3c:	00d2      	lsls	r2, r2, #3
    4b3e:	e6e5      	b.n	490c <_malloc_r+0x2a0>
    4b40:	4b1b      	ldr	r3, [pc, #108]	; (4bb0 <_malloc_r+0x544>)
    4b42:	4299      	cmp	r1, r3
    4b44:	d824      	bhi.n	4b90 <_malloc_r+0x524>
    4b46:	237c      	movs	r3, #124	; 0x7c
    4b48:	469c      	mov	ip, r3
    4b4a:	0ca9      	lsrs	r1, r5, #18
    4b4c:	448c      	add	ip, r1
    4b4e:	317d      	adds	r1, #125	; 0x7d
    4b50:	00c8      	lsls	r0, r1, #3
    4b52:	e5da      	b.n	470a <_malloc_r+0x9e>
    4b54:	46b4      	mov	ip, r6
    4b56:	4642      	mov	r2, r8
    4b58:	9b01      	ldr	r3, [sp, #4]
    4b5a:	3b08      	subs	r3, #8
    4b5c:	4463      	add	r3, ip
    4b5e:	1a9b      	subs	r3, r3, r2
    4b60:	001e      	movs	r6, r3
    4b62:	2300      	movs	r3, #0
    4b64:	469b      	mov	fp, r3
    4b66:	e78d      	b.n	4a84 <_malloc_r+0x418>
    4b68:	0021      	movs	r1, r4
    4b6a:	9800      	ldr	r0, [sp, #0]
    4b6c:	3108      	adds	r1, #8
    4b6e:	f000 f9a3 	bl	4eb8 <_free_r>
    4b72:	4653      	mov	r3, sl
    4b74:	6819      	ldr	r1, [r3, #0]
    4b76:	68bb      	ldr	r3, [r7, #8]
    4b78:	4698      	mov	r8, r3
    4b7a:	685a      	ldr	r2, [r3, #4]
    4b7c:	e699      	b.n	48b2 <_malloc_r+0x246>
    4b7e:	480c      	ldr	r0, [pc, #48]	; (4bb0 <_malloc_r+0x544>)
    4b80:	4282      	cmp	r2, r0
    4b82:	d80b      	bhi.n	4b9c <_malloc_r+0x530>
    4b84:	0c9a      	lsrs	r2, r3, #18
    4b86:	0010      	movs	r0, r2
    4b88:	327d      	adds	r2, #125	; 0x7d
    4b8a:	307c      	adds	r0, #124	; 0x7c
    4b8c:	00d2      	lsls	r2, r2, #3
    4b8e:	e6bd      	b.n	490c <_malloc_r+0x2a0>
    4b90:	20fe      	movs	r0, #254	; 0xfe
    4b92:	237e      	movs	r3, #126	; 0x7e
    4b94:	217f      	movs	r1, #127	; 0x7f
    4b96:	469c      	mov	ip, r3
    4b98:	0080      	lsls	r0, r0, #2
    4b9a:	e5b6      	b.n	470a <_malloc_r+0x9e>
    4b9c:	22fe      	movs	r2, #254	; 0xfe
    4b9e:	207e      	movs	r0, #126	; 0x7e
    4ba0:	0092      	lsls	r2, r2, #2
    4ba2:	e6b3      	b.n	490c <_malloc_r+0x2a0>
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	e62b      	b.n	4800 <_malloc_r+0x194>
    4ba8:	200009b8 	.word	0x200009b8
    4bac:	00001008 	.word	0x00001008
    4bb0:	00000554 	.word	0x00000554

00004bb4 <memcpy>:
    4bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bb6:	0005      	movs	r5, r0
    4bb8:	2a0f      	cmp	r2, #15
    4bba:	d933      	bls.n	4c24 <memcpy+0x70>
    4bbc:	2403      	movs	r4, #3
    4bbe:	0003      	movs	r3, r0
    4bc0:	0026      	movs	r6, r4
    4bc2:	430b      	orrs	r3, r1
    4bc4:	401e      	ands	r6, r3
    4bc6:	421c      	tst	r4, r3
    4bc8:	d137      	bne.n	4c3a <memcpy+0x86>
    4bca:	0015      	movs	r5, r2
    4bcc:	3d10      	subs	r5, #16
    4bce:	092d      	lsrs	r5, r5, #4
    4bd0:	0003      	movs	r3, r0
    4bd2:	000c      	movs	r4, r1
    4bd4:	46ac      	mov	ip, r5
    4bd6:	012f      	lsls	r7, r5, #4
    4bd8:	183f      	adds	r7, r7, r0
    4bda:	6865      	ldr	r5, [r4, #4]
    4bdc:	605d      	str	r5, [r3, #4]
    4bde:	68a5      	ldr	r5, [r4, #8]
    4be0:	609d      	str	r5, [r3, #8]
    4be2:	68e5      	ldr	r5, [r4, #12]
    4be4:	60dd      	str	r5, [r3, #12]
    4be6:	6825      	ldr	r5, [r4, #0]
    4be8:	3410      	adds	r4, #16
    4bea:	601d      	str	r5, [r3, #0]
    4bec:	001d      	movs	r5, r3
    4bee:	3310      	adds	r3, #16
    4bf0:	42bd      	cmp	r5, r7
    4bf2:	d1f2      	bne.n	4bda <memcpy+0x26>
    4bf4:	4665      	mov	r5, ip
    4bf6:	230f      	movs	r3, #15
    4bf8:	240c      	movs	r4, #12
    4bfa:	3501      	adds	r5, #1
    4bfc:	012d      	lsls	r5, r5, #4
    4bfe:	1949      	adds	r1, r1, r5
    4c00:	4013      	ands	r3, r2
    4c02:	1945      	adds	r5, r0, r5
    4c04:	4214      	tst	r4, r2
    4c06:	d01a      	beq.n	4c3e <memcpy+0x8a>
    4c08:	598c      	ldr	r4, [r1, r6]
    4c0a:	51ac      	str	r4, [r5, r6]
    4c0c:	3604      	adds	r6, #4
    4c0e:	1b9c      	subs	r4, r3, r6
    4c10:	2c03      	cmp	r4, #3
    4c12:	d8f9      	bhi.n	4c08 <memcpy+0x54>
    4c14:	3b04      	subs	r3, #4
    4c16:	089b      	lsrs	r3, r3, #2
    4c18:	3301      	adds	r3, #1
    4c1a:	009b      	lsls	r3, r3, #2
    4c1c:	18ed      	adds	r5, r5, r3
    4c1e:	18c9      	adds	r1, r1, r3
    4c20:	2303      	movs	r3, #3
    4c22:	401a      	ands	r2, r3
    4c24:	1e56      	subs	r6, r2, #1
    4c26:	2a00      	cmp	r2, #0
    4c28:	d006      	beq.n	4c38 <memcpy+0x84>
    4c2a:	2300      	movs	r3, #0
    4c2c:	5ccc      	ldrb	r4, [r1, r3]
    4c2e:	001a      	movs	r2, r3
    4c30:	54ec      	strb	r4, [r5, r3]
    4c32:	3301      	adds	r3, #1
    4c34:	4296      	cmp	r6, r2
    4c36:	d1f9      	bne.n	4c2c <memcpy+0x78>
    4c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c3a:	1e56      	subs	r6, r2, #1
    4c3c:	e7f5      	b.n	4c2a <memcpy+0x76>
    4c3e:	001a      	movs	r2, r3
    4c40:	e7f0      	b.n	4c24 <memcpy+0x70>
    4c42:	46c0      	nop			; (mov r8, r8)

00004c44 <memset>:
    4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c46:	0005      	movs	r5, r0
    4c48:	0783      	lsls	r3, r0, #30
    4c4a:	d049      	beq.n	4ce0 <memset+0x9c>
    4c4c:	1e54      	subs	r4, r2, #1
    4c4e:	2a00      	cmp	r2, #0
    4c50:	d045      	beq.n	4cde <memset+0x9a>
    4c52:	0003      	movs	r3, r0
    4c54:	2603      	movs	r6, #3
    4c56:	b2ca      	uxtb	r2, r1
    4c58:	e002      	b.n	4c60 <memset+0x1c>
    4c5a:	3501      	adds	r5, #1
    4c5c:	3c01      	subs	r4, #1
    4c5e:	d33e      	bcc.n	4cde <memset+0x9a>
    4c60:	3301      	adds	r3, #1
    4c62:	702a      	strb	r2, [r5, #0]
    4c64:	4233      	tst	r3, r6
    4c66:	d1f8      	bne.n	4c5a <memset+0x16>
    4c68:	2c03      	cmp	r4, #3
    4c6a:	d930      	bls.n	4cce <memset+0x8a>
    4c6c:	22ff      	movs	r2, #255	; 0xff
    4c6e:	400a      	ands	r2, r1
    4c70:	0215      	lsls	r5, r2, #8
    4c72:	18ad      	adds	r5, r5, r2
    4c74:	042a      	lsls	r2, r5, #16
    4c76:	18ad      	adds	r5, r5, r2
    4c78:	2c0f      	cmp	r4, #15
    4c7a:	d934      	bls.n	4ce6 <memset+0xa2>
    4c7c:	0027      	movs	r7, r4
    4c7e:	3f10      	subs	r7, #16
    4c80:	093f      	lsrs	r7, r7, #4
    4c82:	013e      	lsls	r6, r7, #4
    4c84:	46b4      	mov	ip, r6
    4c86:	001e      	movs	r6, r3
    4c88:	001a      	movs	r2, r3
    4c8a:	3610      	adds	r6, #16
    4c8c:	4466      	add	r6, ip
    4c8e:	6015      	str	r5, [r2, #0]
    4c90:	6055      	str	r5, [r2, #4]
    4c92:	6095      	str	r5, [r2, #8]
    4c94:	60d5      	str	r5, [r2, #12]
    4c96:	3210      	adds	r2, #16
    4c98:	4296      	cmp	r6, r2
    4c9a:	d1f8      	bne.n	4c8e <memset+0x4a>
    4c9c:	3701      	adds	r7, #1
    4c9e:	013f      	lsls	r7, r7, #4
    4ca0:	19db      	adds	r3, r3, r7
    4ca2:	270f      	movs	r7, #15
    4ca4:	220c      	movs	r2, #12
    4ca6:	4027      	ands	r7, r4
    4ca8:	4022      	ands	r2, r4
    4caa:	003c      	movs	r4, r7
    4cac:	2a00      	cmp	r2, #0
    4cae:	d00e      	beq.n	4cce <memset+0x8a>
    4cb0:	1f3e      	subs	r6, r7, #4
    4cb2:	08b6      	lsrs	r6, r6, #2
    4cb4:	00b4      	lsls	r4, r6, #2
    4cb6:	46a4      	mov	ip, r4
    4cb8:	001a      	movs	r2, r3
    4cba:	1d1c      	adds	r4, r3, #4
    4cbc:	4464      	add	r4, ip
    4cbe:	c220      	stmia	r2!, {r5}
    4cc0:	42a2      	cmp	r2, r4
    4cc2:	d1fc      	bne.n	4cbe <memset+0x7a>
    4cc4:	2403      	movs	r4, #3
    4cc6:	3601      	adds	r6, #1
    4cc8:	00b6      	lsls	r6, r6, #2
    4cca:	199b      	adds	r3, r3, r6
    4ccc:	403c      	ands	r4, r7
    4cce:	2c00      	cmp	r4, #0
    4cd0:	d005      	beq.n	4cde <memset+0x9a>
    4cd2:	b2c9      	uxtb	r1, r1
    4cd4:	191c      	adds	r4, r3, r4
    4cd6:	7019      	strb	r1, [r3, #0]
    4cd8:	3301      	adds	r3, #1
    4cda:	429c      	cmp	r4, r3
    4cdc:	d1fb      	bne.n	4cd6 <memset+0x92>
    4cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ce0:	0003      	movs	r3, r0
    4ce2:	0014      	movs	r4, r2
    4ce4:	e7c0      	b.n	4c68 <memset+0x24>
    4ce6:	0027      	movs	r7, r4
    4ce8:	e7e2      	b.n	4cb0 <memset+0x6c>
    4cea:	46c0      	nop			; (mov r8, r8)

00004cec <__malloc_lock>:
    4cec:	b510      	push	{r4, lr}
    4cee:	4802      	ldr	r0, [pc, #8]	; (4cf8 <__malloc_lock+0xc>)
    4cf0:	f7fc fb28 	bl	1344 <__retarget_lock_acquire_recursive>
    4cf4:	bd10      	pop	{r4, pc}
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	200006c4 	.word	0x200006c4

00004cfc <__malloc_unlock>:
    4cfc:	b510      	push	{r4, lr}
    4cfe:	4802      	ldr	r0, [pc, #8]	; (4d08 <__malloc_unlock+0xc>)
    4d00:	f7fc fb3c 	bl	137c <__retarget_lock_release_recursive>
    4d04:	bd10      	pop	{r4, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	200006c4 	.word	0x200006c4

00004d0c <_sbrk_r>:
    4d0c:	2300      	movs	r3, #0
    4d0e:	b570      	push	{r4, r5, r6, lr}
    4d10:	4c06      	ldr	r4, [pc, #24]	; (4d2c <_sbrk_r+0x20>)
    4d12:	0005      	movs	r5, r0
    4d14:	0008      	movs	r0, r1
    4d16:	6023      	str	r3, [r4, #0]
    4d18:	f7fc fafe 	bl	1318 <_sbrk>
    4d1c:	1c43      	adds	r3, r0, #1
    4d1e:	d000      	beq.n	4d22 <_sbrk_r+0x16>
    4d20:	bd70      	pop	{r4, r5, r6, pc}
    4d22:	6823      	ldr	r3, [r4, #0]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d0fb      	beq.n	4d20 <_sbrk_r+0x14>
    4d28:	602b      	str	r3, [r5, #0]
    4d2a:	e7f9      	b.n	4d20 <_sbrk_r+0x14>
    4d2c:	200009ec 	.word	0x200009ec

00004d30 <strlen>:
    4d30:	b510      	push	{r4, lr}
    4d32:	0783      	lsls	r3, r0, #30
    4d34:	d00a      	beq.n	4d4c <strlen+0x1c>
    4d36:	0003      	movs	r3, r0
    4d38:	2103      	movs	r1, #3
    4d3a:	e002      	b.n	4d42 <strlen+0x12>
    4d3c:	3301      	adds	r3, #1
    4d3e:	420b      	tst	r3, r1
    4d40:	d005      	beq.n	4d4e <strlen+0x1e>
    4d42:	781a      	ldrb	r2, [r3, #0]
    4d44:	2a00      	cmp	r2, #0
    4d46:	d1f9      	bne.n	4d3c <strlen+0xc>
    4d48:	1a18      	subs	r0, r3, r0
    4d4a:	bd10      	pop	{r4, pc}
    4d4c:	0003      	movs	r3, r0
    4d4e:	6819      	ldr	r1, [r3, #0]
    4d50:	4a0c      	ldr	r2, [pc, #48]	; (4d84 <strlen+0x54>)
    4d52:	4c0d      	ldr	r4, [pc, #52]	; (4d88 <strlen+0x58>)
    4d54:	188a      	adds	r2, r1, r2
    4d56:	438a      	bics	r2, r1
    4d58:	4222      	tst	r2, r4
    4d5a:	d10f      	bne.n	4d7c <strlen+0x4c>
    4d5c:	6859      	ldr	r1, [r3, #4]
    4d5e:	4a09      	ldr	r2, [pc, #36]	; (4d84 <strlen+0x54>)
    4d60:	3304      	adds	r3, #4
    4d62:	188a      	adds	r2, r1, r2
    4d64:	438a      	bics	r2, r1
    4d66:	4222      	tst	r2, r4
    4d68:	d108      	bne.n	4d7c <strlen+0x4c>
    4d6a:	6859      	ldr	r1, [r3, #4]
    4d6c:	4a05      	ldr	r2, [pc, #20]	; (4d84 <strlen+0x54>)
    4d6e:	3304      	adds	r3, #4
    4d70:	188a      	adds	r2, r1, r2
    4d72:	438a      	bics	r2, r1
    4d74:	4222      	tst	r2, r4
    4d76:	d0f1      	beq.n	4d5c <strlen+0x2c>
    4d78:	e000      	b.n	4d7c <strlen+0x4c>
    4d7a:	3301      	adds	r3, #1
    4d7c:	781a      	ldrb	r2, [r3, #0]
    4d7e:	2a00      	cmp	r2, #0
    4d80:	d1fb      	bne.n	4d7a <strlen+0x4a>
    4d82:	e7e1      	b.n	4d48 <strlen+0x18>
    4d84:	fefefeff 	.word	0xfefefeff
    4d88:	80808080 	.word	0x80808080

00004d8c <strncpy>:
    4d8c:	0003      	movs	r3, r0
    4d8e:	430b      	orrs	r3, r1
    4d90:	b570      	push	{r4, r5, r6, lr}
    4d92:	0006      	movs	r6, r0
    4d94:	079b      	lsls	r3, r3, #30
    4d96:	d10e      	bne.n	4db6 <strncpy+0x2a>
    4d98:	2a03      	cmp	r2, #3
    4d9a:	d90c      	bls.n	4db6 <strncpy+0x2a>
    4d9c:	4d11      	ldr	r5, [pc, #68]	; (4de4 <strncpy+0x58>)
    4d9e:	e004      	b.n	4daa <strncpy+0x1e>
    4da0:	3a04      	subs	r2, #4
    4da2:	3104      	adds	r1, #4
    4da4:	c610      	stmia	r6!, {r4}
    4da6:	2a03      	cmp	r2, #3
    4da8:	d905      	bls.n	4db6 <strncpy+0x2a>
    4daa:	680c      	ldr	r4, [r1, #0]
    4dac:	4b0e      	ldr	r3, [pc, #56]	; (4de8 <strncpy+0x5c>)
    4dae:	18e3      	adds	r3, r4, r3
    4db0:	43a3      	bics	r3, r4
    4db2:	422b      	tst	r3, r5
    4db4:	d0f4      	beq.n	4da0 <strncpy+0x14>
    4db6:	0033      	movs	r3, r6
    4db8:	2400      	movs	r4, #0
    4dba:	e006      	b.n	4dca <strncpy+0x3e>
    4dbc:	5d0d      	ldrb	r5, [r1, r4]
    4dbe:	3a01      	subs	r2, #1
    4dc0:	5535      	strb	r5, [r6, r4]
    4dc2:	3301      	adds	r3, #1
    4dc4:	3401      	adds	r4, #1
    4dc6:	2d00      	cmp	r5, #0
    4dc8:	d002      	beq.n	4dd0 <strncpy+0x44>
    4dca:	2a00      	cmp	r2, #0
    4dcc:	d1f6      	bne.n	4dbc <strncpy+0x30>
    4dce:	bd70      	pop	{r4, r5, r6, pc}
    4dd0:	2100      	movs	r1, #0
    4dd2:	189c      	adds	r4, r3, r2
    4dd4:	2a00      	cmp	r2, #0
    4dd6:	d0fa      	beq.n	4dce <strncpy+0x42>
    4dd8:	7019      	strb	r1, [r3, #0]
    4dda:	3301      	adds	r3, #1
    4ddc:	42a3      	cmp	r3, r4
    4dde:	d1fb      	bne.n	4dd8 <strncpy+0x4c>
    4de0:	e7f5      	b.n	4dce <strncpy+0x42>
    4de2:	46c0      	nop			; (mov r8, r8)
    4de4:	80808080 	.word	0x80808080
    4de8:	fefefeff 	.word	0xfefefeff

00004dec <strnlen>:
    4dec:	b510      	push	{r4, lr}
    4dee:	0003      	movs	r3, r0
    4df0:	1844      	adds	r4, r0, r1
    4df2:	2900      	cmp	r1, #0
    4df4:	d103      	bne.n	4dfe <strnlen+0x12>
    4df6:	e009      	b.n	4e0c <strnlen+0x20>
    4df8:	3301      	adds	r3, #1
    4dfa:	429c      	cmp	r4, r3
    4dfc:	d004      	beq.n	4e08 <strnlen+0x1c>
    4dfe:	781a      	ldrb	r2, [r3, #0]
    4e00:	2a00      	cmp	r2, #0
    4e02:	d1f9      	bne.n	4df8 <strnlen+0xc>
    4e04:	1a18      	subs	r0, r3, r0
    4e06:	bd10      	pop	{r4, pc}
    4e08:	1a20      	subs	r0, r4, r0
    4e0a:	e7fc      	b.n	4e06 <strnlen+0x1a>
    4e0c:	2000      	movs	r0, #0
    4e0e:	e7fa      	b.n	4e06 <strnlen+0x1a>

00004e10 <_malloc_trim_r>:
    4e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e12:	46c6      	mov	lr, r8
    4e14:	b500      	push	{lr}
    4e16:	4688      	mov	r8, r1
    4e18:	0005      	movs	r5, r0
    4e1a:	f7ff ff67 	bl	4cec <__malloc_lock>
    4e1e:	4f22      	ldr	r7, [pc, #136]	; (4ea8 <_malloc_trim_r+0x98>)
    4e20:	68bb      	ldr	r3, [r7, #8]
    4e22:	685e      	ldr	r6, [r3, #4]
    4e24:	2303      	movs	r3, #3
    4e26:	439e      	bics	r6, r3
    4e28:	4b20      	ldr	r3, [pc, #128]	; (4eac <_malloc_trim_r+0x9c>)
    4e2a:	18f4      	adds	r4, r6, r3
    4e2c:	4643      	mov	r3, r8
    4e2e:	1ae4      	subs	r4, r4, r3
    4e30:	2380      	movs	r3, #128	; 0x80
    4e32:	0b24      	lsrs	r4, r4, #12
    4e34:	3c01      	subs	r4, #1
    4e36:	0324      	lsls	r4, r4, #12
    4e38:	015b      	lsls	r3, r3, #5
    4e3a:	429c      	cmp	r4, r3
    4e3c:	db07      	blt.n	4e4e <_malloc_trim_r+0x3e>
    4e3e:	2100      	movs	r1, #0
    4e40:	0028      	movs	r0, r5
    4e42:	f7ff ff63 	bl	4d0c <_sbrk_r>
    4e46:	68bb      	ldr	r3, [r7, #8]
    4e48:	199b      	adds	r3, r3, r6
    4e4a:	4298      	cmp	r0, r3
    4e4c:	d006      	beq.n	4e5c <_malloc_trim_r+0x4c>
    4e4e:	0028      	movs	r0, r5
    4e50:	f7ff ff54 	bl	4cfc <__malloc_unlock>
    4e54:	2000      	movs	r0, #0
    4e56:	bc80      	pop	{r7}
    4e58:	46b8      	mov	r8, r7
    4e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e5c:	0028      	movs	r0, r5
    4e5e:	4261      	negs	r1, r4
    4e60:	f7ff ff54 	bl	4d0c <_sbrk_r>
    4e64:	3001      	adds	r0, #1
    4e66:	d00d      	beq.n	4e84 <_malloc_trim_r+0x74>
    4e68:	2201      	movs	r2, #1
    4e6a:	1b36      	subs	r6, r6, r4
    4e6c:	68bb      	ldr	r3, [r7, #8]
    4e6e:	4316      	orrs	r6, r2
    4e70:	4a0f      	ldr	r2, [pc, #60]	; (4eb0 <_malloc_trim_r+0xa0>)
    4e72:	605e      	str	r6, [r3, #4]
    4e74:	6813      	ldr	r3, [r2, #0]
    4e76:	0028      	movs	r0, r5
    4e78:	1b1b      	subs	r3, r3, r4
    4e7a:	6013      	str	r3, [r2, #0]
    4e7c:	f7ff ff3e 	bl	4cfc <__malloc_unlock>
    4e80:	2001      	movs	r0, #1
    4e82:	e7e8      	b.n	4e56 <_malloc_trim_r+0x46>
    4e84:	2100      	movs	r1, #0
    4e86:	0028      	movs	r0, r5
    4e88:	f7ff ff40 	bl	4d0c <_sbrk_r>
    4e8c:	68ba      	ldr	r2, [r7, #8]
    4e8e:	1a83      	subs	r3, r0, r2
    4e90:	2b0f      	cmp	r3, #15
    4e92:	dddc      	ble.n	4e4e <_malloc_trim_r+0x3e>
    4e94:	4c07      	ldr	r4, [pc, #28]	; (4eb4 <_malloc_trim_r+0xa4>)
    4e96:	4906      	ldr	r1, [pc, #24]	; (4eb0 <_malloc_trim_r+0xa0>)
    4e98:	6824      	ldr	r4, [r4, #0]
    4e9a:	1b00      	subs	r0, r0, r4
    4e9c:	6008      	str	r0, [r1, #0]
    4e9e:	2101      	movs	r1, #1
    4ea0:	430b      	orrs	r3, r1
    4ea2:	6053      	str	r3, [r2, #4]
    4ea4:	e7d3      	b.n	4e4e <_malloc_trim_r+0x3e>
    4ea6:	46c0      	nop			; (mov r8, r8)
    4ea8:	20000000 	.word	0x20000000
    4eac:	00000fef 	.word	0x00000fef
    4eb0:	200009b8 	.word	0x200009b8
    4eb4:	200006a8 	.word	0x200006a8

00004eb8 <_free_r>:
    4eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eba:	46ce      	mov	lr, r9
    4ebc:	4647      	mov	r7, r8
    4ebe:	0005      	movs	r5, r0
    4ec0:	000c      	movs	r4, r1
    4ec2:	b580      	push	{r7, lr}
    4ec4:	2900      	cmp	r1, #0
    4ec6:	d057      	beq.n	4f78 <_free_r+0xc0>
    4ec8:	f7ff ff10 	bl	4cec <__malloc_lock>
    4ecc:	2301      	movs	r3, #1
    4ece:	0021      	movs	r1, r4
    4ed0:	469c      	mov	ip, r3
    4ed2:	3908      	subs	r1, #8
    4ed4:	6848      	ldr	r0, [r1, #4]
    4ed6:	4662      	mov	r2, ip
    4ed8:	0003      	movs	r3, r0
    4eda:	2403      	movs	r4, #3
    4edc:	4393      	bics	r3, r2
    4ede:	18cf      	adds	r7, r1, r3
    4ee0:	687a      	ldr	r2, [r7, #4]
    4ee2:	4e65      	ldr	r6, [pc, #404]	; (5078 <_free_r+0x1c0>)
    4ee4:	43a2      	bics	r2, r4
    4ee6:	68b4      	ldr	r4, [r6, #8]
    4ee8:	42bc      	cmp	r4, r7
    4eea:	d100      	bne.n	4eee <_free_r+0x36>
    4eec:	e070      	b.n	4fd0 <_free_r+0x118>
    4eee:	18bc      	adds	r4, r7, r2
    4ef0:	46a1      	mov	r9, r4
    4ef2:	4664      	mov	r4, ip
    4ef4:	607a      	str	r2, [r7, #4]
    4ef6:	4204      	tst	r4, r0
    4ef8:	d121      	bne.n	4f3e <_free_r+0x86>
    4efa:	6808      	ldr	r0, [r1, #0]
    4efc:	1a09      	subs	r1, r1, r0
    4efe:	181b      	adds	r3, r3, r0
    4f00:	6888      	ldr	r0, [r1, #8]
    4f02:	4680      	mov	r8, r0
    4f04:	4648      	mov	r0, r9
    4f06:	6840      	ldr	r0, [r0, #4]
    4f08:	4020      	ands	r0, r4
    4f0a:	0034      	movs	r4, r6
    4f0c:	3408      	adds	r4, #8
    4f0e:	4681      	mov	r9, r0
    4f10:	45a0      	cmp	r8, r4
    4f12:	d051      	beq.n	4fb8 <_free_r+0x100>
    4f14:	4640      	mov	r0, r8
    4f16:	68cc      	ldr	r4, [r1, #12]
    4f18:	60c4      	str	r4, [r0, #12]
    4f1a:	60a0      	str	r0, [r4, #8]
    4f1c:	4648      	mov	r0, r9
    4f1e:	2800      	cmp	r0, #0
    4f20:	d111      	bne.n	4f46 <_free_r+0x8e>
    4f22:	189b      	adds	r3, r3, r2
    4f24:	4855      	ldr	r0, [pc, #340]	; (507c <_free_r+0x1c4>)
    4f26:	68ba      	ldr	r2, [r7, #8]
    4f28:	4282      	cmp	r2, r0
    4f2a:	d100      	bne.n	4f2e <_free_r+0x76>
    4f2c:	e07f      	b.n	502e <_free_r+0x176>
    4f2e:	68f8      	ldr	r0, [r7, #12]
    4f30:	60d0      	str	r0, [r2, #12]
    4f32:	6082      	str	r2, [r0, #8]
    4f34:	2201      	movs	r2, #1
    4f36:	431a      	orrs	r2, r3
    4f38:	604a      	str	r2, [r1, #4]
    4f3a:	50cb      	str	r3, [r1, r3]
    4f3c:	e007      	b.n	4f4e <_free_r+0x96>
    4f3e:	4648      	mov	r0, r9
    4f40:	6840      	ldr	r0, [r0, #4]
    4f42:	4220      	tst	r0, r4
    4f44:	d0ed      	beq.n	4f22 <_free_r+0x6a>
    4f46:	4662      	mov	r2, ip
    4f48:	431a      	orrs	r2, r3
    4f4a:	604a      	str	r2, [r1, #4]
    4f4c:	603b      	str	r3, [r7, #0]
    4f4e:	2280      	movs	r2, #128	; 0x80
    4f50:	0092      	lsls	r2, r2, #2
    4f52:	4293      	cmp	r3, r2
    4f54:	d214      	bcs.n	4f80 <_free_r+0xc8>
    4f56:	08da      	lsrs	r2, r3, #3
    4f58:	0958      	lsrs	r0, r3, #5
    4f5a:	2301      	movs	r3, #1
    4f5c:	4083      	lsls	r3, r0
    4f5e:	6870      	ldr	r0, [r6, #4]
    4f60:	4303      	orrs	r3, r0
    4f62:	6073      	str	r3, [r6, #4]
    4f64:	00d3      	lsls	r3, r2, #3
    4f66:	199b      	adds	r3, r3, r6
    4f68:	689a      	ldr	r2, [r3, #8]
    4f6a:	60cb      	str	r3, [r1, #12]
    4f6c:	608a      	str	r2, [r1, #8]
    4f6e:	6099      	str	r1, [r3, #8]
    4f70:	60d1      	str	r1, [r2, #12]
    4f72:	0028      	movs	r0, r5
    4f74:	f7ff fec2 	bl	4cfc <__malloc_unlock>
    4f78:	bcc0      	pop	{r6, r7}
    4f7a:	46b9      	mov	r9, r7
    4f7c:	46b0      	mov	r8, r6
    4f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f80:	0a5c      	lsrs	r4, r3, #9
    4f82:	2c04      	cmp	r4, #4
    4f84:	d83d      	bhi.n	5002 <_free_r+0x14a>
    4f86:	099c      	lsrs	r4, r3, #6
    4f88:	0020      	movs	r0, r4
    4f8a:	3439      	adds	r4, #57	; 0x39
    4f8c:	3038      	adds	r0, #56	; 0x38
    4f8e:	00e4      	lsls	r4, r4, #3
    4f90:	1934      	adds	r4, r6, r4
    4f92:	6822      	ldr	r2, [r4, #0]
    4f94:	3c08      	subs	r4, #8
    4f96:	2703      	movs	r7, #3
    4f98:	4294      	cmp	r4, r2
    4f9a:	d103      	bne.n	4fa4 <_free_r+0xec>
    4f9c:	e040      	b.n	5020 <_free_r+0x168>
    4f9e:	6892      	ldr	r2, [r2, #8]
    4fa0:	4294      	cmp	r4, r2
    4fa2:	d003      	beq.n	4fac <_free_r+0xf4>
    4fa4:	6850      	ldr	r0, [r2, #4]
    4fa6:	43b8      	bics	r0, r7
    4fa8:	4298      	cmp	r0, r3
    4faa:	d8f8      	bhi.n	4f9e <_free_r+0xe6>
    4fac:	68d4      	ldr	r4, [r2, #12]
    4fae:	60cc      	str	r4, [r1, #12]
    4fb0:	608a      	str	r2, [r1, #8]
    4fb2:	60a1      	str	r1, [r4, #8]
    4fb4:	60d1      	str	r1, [r2, #12]
    4fb6:	e7dc      	b.n	4f72 <_free_r+0xba>
    4fb8:	2800      	cmp	r0, #0
    4fba:	d158      	bne.n	506e <_free_r+0x1b6>
    4fbc:	68b8      	ldr	r0, [r7, #8]
    4fbe:	18d2      	adds	r2, r2, r3
    4fc0:	68fb      	ldr	r3, [r7, #12]
    4fc2:	60c3      	str	r3, [r0, #12]
    4fc4:	6098      	str	r0, [r3, #8]
    4fc6:	4663      	mov	r3, ip
    4fc8:	4313      	orrs	r3, r2
    4fca:	604b      	str	r3, [r1, #4]
    4fcc:	508a      	str	r2, [r1, r2]
    4fce:	e7d0      	b.n	4f72 <_free_r+0xba>
    4fd0:	189a      	adds	r2, r3, r2
    4fd2:	4663      	mov	r3, ip
    4fd4:	4203      	tst	r3, r0
    4fd6:	d106      	bne.n	4fe6 <_free_r+0x12e>
    4fd8:	680b      	ldr	r3, [r1, #0]
    4fda:	1ac9      	subs	r1, r1, r3
    4fdc:	6888      	ldr	r0, [r1, #8]
    4fde:	18d2      	adds	r2, r2, r3
    4fe0:	68cb      	ldr	r3, [r1, #12]
    4fe2:	60c3      	str	r3, [r0, #12]
    4fe4:	6098      	str	r0, [r3, #8]
    4fe6:	2301      	movs	r3, #1
    4fe8:	4313      	orrs	r3, r2
    4fea:	604b      	str	r3, [r1, #4]
    4fec:	4b24      	ldr	r3, [pc, #144]	; (5080 <_free_r+0x1c8>)
    4fee:	60b1      	str	r1, [r6, #8]
    4ff0:	681b      	ldr	r3, [r3, #0]
    4ff2:	4293      	cmp	r3, r2
    4ff4:	d8bd      	bhi.n	4f72 <_free_r+0xba>
    4ff6:	4b23      	ldr	r3, [pc, #140]	; (5084 <_free_r+0x1cc>)
    4ff8:	0028      	movs	r0, r5
    4ffa:	6819      	ldr	r1, [r3, #0]
    4ffc:	f7ff ff08 	bl	4e10 <_malloc_trim_r>
    5000:	e7b7      	b.n	4f72 <_free_r+0xba>
    5002:	2c14      	cmp	r4, #20
    5004:	d907      	bls.n	5016 <_free_r+0x15e>
    5006:	2c54      	cmp	r4, #84	; 0x54
    5008:	d81a      	bhi.n	5040 <_free_r+0x188>
    500a:	0b1c      	lsrs	r4, r3, #12
    500c:	0020      	movs	r0, r4
    500e:	346f      	adds	r4, #111	; 0x6f
    5010:	306e      	adds	r0, #110	; 0x6e
    5012:	00e4      	lsls	r4, r4, #3
    5014:	e7bc      	b.n	4f90 <_free_r+0xd8>
    5016:	0020      	movs	r0, r4
    5018:	345c      	adds	r4, #92	; 0x5c
    501a:	305b      	adds	r0, #91	; 0x5b
    501c:	00e4      	lsls	r4, r4, #3
    501e:	e7b7      	b.n	4f90 <_free_r+0xd8>
    5020:	2301      	movs	r3, #1
    5022:	1080      	asrs	r0, r0, #2
    5024:	4083      	lsls	r3, r0
    5026:	6870      	ldr	r0, [r6, #4]
    5028:	4303      	orrs	r3, r0
    502a:	6073      	str	r3, [r6, #4]
    502c:	e7bf      	b.n	4fae <_free_r+0xf6>
    502e:	60d1      	str	r1, [r2, #12]
    5030:	6091      	str	r1, [r2, #8]
    5032:	60ca      	str	r2, [r1, #12]
    5034:	608a      	str	r2, [r1, #8]
    5036:	2201      	movs	r2, #1
    5038:	431a      	orrs	r2, r3
    503a:	604a      	str	r2, [r1, #4]
    503c:	50cb      	str	r3, [r1, r3]
    503e:	e798      	b.n	4f72 <_free_r+0xba>
    5040:	22aa      	movs	r2, #170	; 0xaa
    5042:	0052      	lsls	r2, r2, #1
    5044:	4294      	cmp	r4, r2
    5046:	d805      	bhi.n	5054 <_free_r+0x19c>
    5048:	0bdc      	lsrs	r4, r3, #15
    504a:	0020      	movs	r0, r4
    504c:	3478      	adds	r4, #120	; 0x78
    504e:	3077      	adds	r0, #119	; 0x77
    5050:	00e4      	lsls	r4, r4, #3
    5052:	e79d      	b.n	4f90 <_free_r+0xd8>
    5054:	4a0c      	ldr	r2, [pc, #48]	; (5088 <_free_r+0x1d0>)
    5056:	4294      	cmp	r4, r2
    5058:	d805      	bhi.n	5066 <_free_r+0x1ae>
    505a:	0c9c      	lsrs	r4, r3, #18
    505c:	0020      	movs	r0, r4
    505e:	347d      	adds	r4, #125	; 0x7d
    5060:	307c      	adds	r0, #124	; 0x7c
    5062:	00e4      	lsls	r4, r4, #3
    5064:	e794      	b.n	4f90 <_free_r+0xd8>
    5066:	24fe      	movs	r4, #254	; 0xfe
    5068:	207e      	movs	r0, #126	; 0x7e
    506a:	00a4      	lsls	r4, r4, #2
    506c:	e790      	b.n	4f90 <_free_r+0xd8>
    506e:	4662      	mov	r2, ip
    5070:	431a      	orrs	r2, r3
    5072:	604a      	str	r2, [r1, #4]
    5074:	603b      	str	r3, [r7, #0]
    5076:	e77c      	b.n	4f72 <_free_r+0xba>
    5078:	20000000 	.word	0x20000000
    507c:	20000008 	.word	0x20000008
    5080:	200006ac 	.word	0x200006ac
    5084:	200009e8 	.word	0x200009e8
    5088:	00000554 	.word	0x00000554

0000508c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    508c:	4770      	bx	lr

0000508e <_Z9cpp_setupv>:
{
    508e:	b510      	push	{r4, lr}
	auto fixture = new struct cpp_fixture;
    5090:	2004      	movs	r0, #4
    5092:	f000 f830 	bl	50f6 <_Znwj>
	fixture->x = 5;
    5096:	2305      	movs	r3, #5
    5098:	6003      	str	r3, [r0, #0]
}
    509a:	bd10      	pop	{r4, pc}

0000509c <_Z12cpp_teardownPv>:
{
    509c:	b510      	push	{r4, lr}
	delete static_cast<struct cpp_fixture *>(fixture);
    509e:	2800      	cmp	r0, #0
    50a0:	d001      	beq.n	50a6 <_Z12cpp_teardownPv+0xa>
    50a2:	f000 f82c 	bl	50fe <_ZdlPv>
}
    50a6:	bd10      	pop	{r4, pc}

000050a8 <semihost_open>:
	/* WRITEC takes a pointer directly to the character */
	(void)semihost_exec(SEMIHOST_WRITEC, &c);
}

long semihost_open(const char *path, long mode)
{
    50a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct semihost_open_args args = {
    50aa:	9001      	str	r0, [sp, #4]
    50ac:	9102      	str	r1, [sp, #8]
		.path = path,
		.mode = mode,
		.path_len = strlen(path)
    50ae:	f7ff fe3f 	bl	4d30 <strlen>
	struct semihost_open_args args = {
    50b2:	9003      	str	r0, [sp, #12]
	return z_impl_k_sleep(timeout);
    50b4:	2100      	movs	r1, #0
    50b6:	200a      	movs	r0, #10
    50b8:	f7fe fe92 	bl	3de0 <z_impl_k_sleep>
	};

	k_sleep(K_MSEC(1));
	return semihost_exec(SEMIHOST_OPEN, &args);
    50bc:	a901      	add	r1, sp, #4
    50be:	2001      	movs	r0, #1
    50c0:	f000 f8e1 	bl	5286 <semihost_exec>
}
    50c4:	b005      	add	sp, #20
    50c6:	bd00      	pop	{pc}

000050c8 <semihost_close>:

long semihost_close(long fd)
{
    50c8:	b507      	push	{r0, r1, r2, lr}
	struct semihost_close_args args = {
    50ca:	9001      	str	r0, [sp, #4]
		.fd = fd
	};

	return semihost_exec(SEMIHOST_CLOSE, &args);
    50cc:	a901      	add	r1, sp, #4
    50ce:	2002      	movs	r0, #2
    50d0:	f000 f8d9 	bl	5286 <semihost_exec>
}
    50d4:	bd0e      	pop	{r1, r2, r3, pc}

000050d6 <semihost_write>:
	}
	return ret;
}

long semihost_write(long fd, const void *buf, long len)
{
    50d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct semihost_write_args args = {
    50d8:	9001      	str	r0, [sp, #4]
    50da:	9102      	str	r1, [sp, #8]
		.fd = fd,
		.buf = buf,
		.len = len
	};

	return semihost_exec(SEMIHOST_WRITE, &args);
    50dc:	2005      	movs	r0, #5
    50de:	a901      	add	r1, sp, #4
	struct semihost_write_args args = {
    50e0:	9203      	str	r2, [sp, #12]
	return semihost_exec(SEMIHOST_WRITE, &args);
    50e2:	f000 f8d0 	bl	5286 <semihost_exec>
}
    50e6:	b005      	add	sp, #20
    50e8:	bd00      	pop	{pc}

000050ea <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    50ea:	b510      	push	{r4, lr}
	__do_global_ctors_aux();
    50ec:	f7fb fa22 	bl	534 <__do_global_ctors_aux>
	__do_init_array_aux();
    50f0:	f7fb fa12 	bl	518 <__do_init_array_aux>
}
    50f4:	bd10      	pop	{r4, pc}

000050f6 <_Znwj>:
#else
#define NODISCARD [[nodiscard]]
#endif /* __cplusplus */

NODISCARD void* operator new(size_t size)
{
    50f6:	b510      	push	{r4, lr}
	return malloc(size);
    50f8:	f7ff faa4 	bl	4644 <malloc>
}
    50fc:	bd10      	pop	{r4, pc}

000050fe <_ZdlPv>:
	return aligned_alloc(static_cast<size_t>(al), size);
}
#endif /* __cplusplus >= 201703L */

void operator delete(void* ptr) NOEXCEPT
{
    50fe:	b510      	push	{r4, lr}
	free(ptr);
    5100:	f7ff faaa 	bl	4658 <free>
}
    5104:	bd10      	pop	{r4, pc}

00005106 <arch_printk_char_out>:
}
    5106:	2000      	movs	r0, #0
    5108:	4770      	bx	lr

0000510a <str_out>:
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    510a:	688a      	ldr	r2, [r1, #8]
    510c:	680b      	ldr	r3, [r1, #0]
{
    510e:	b530      	push	{r4, r5, lr}
		ctx->str[ctx->count++] = '\0';
    5110:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5112:	2b00      	cmp	r3, #0
    5114:	d002      	beq.n	511c <str_out+0x12>
    5116:	684c      	ldr	r4, [r1, #4]
    5118:	4294      	cmp	r4, r2
    511a:	dc01      	bgt.n	5120 <str_out+0x16>
		ctx->count++;
    511c:	608d      	str	r5, [r1, #8]
}
    511e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    5120:	3c01      	subs	r4, #1
		ctx->str[ctx->count++] = '\0';
    5122:	189b      	adds	r3, r3, r2
    5124:	608d      	str	r5, [r1, #8]
	if (ctx->count == ctx->max - 1) {
    5126:	4294      	cmp	r4, r2
    5128:	d102      	bne.n	5130 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
    512a:	2200      	movs	r2, #0
    512c:	701a      	strb	r2, [r3, #0]
    512e:	e7f6      	b.n	511e <str_out+0x14>
		ctx->str[ctx->count++] = c;
    5130:	7018      	strb	r0, [r3, #0]
    5132:	e7f4      	b.n	511e <str_out+0x14>

00005134 <printk>:
{
    5134:	b40f      	push	{r0, r1, r2, r3}
    5136:	b507      	push	{r0, r1, r2, lr}
    5138:	a904      	add	r1, sp, #16
    513a:	c901      	ldmia	r1!, {r0}
	va_start(ap, fmt);
    513c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    513e:	f7fb fa17 	bl	570 <vprintk>
}
    5142:	b003      	add	sp, #12
    5144:	bc08      	pop	{r3}
    5146:	b004      	add	sp, #16
    5148:	4718      	bx	r3

0000514a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    514a:	b510      	push	{r4, lr}
    514c:	0004      	movs	r4, r0
    514e:	0008      	movs	r0, r1
    5150:	0011      	movs	r1, r2
    5152:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5154:	47a0      	blx	r4
	return z_impl_z_current_get();
    5156:	f7fe fe79 	bl	3e4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    515a:	f7fc f897 	bl	128c <z_impl_k_thread_abort>

0000515e <outs>:
{
    515e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5160:	0007      	movs	r7, r0
    5162:	0015      	movs	r5, r2
    5164:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5166:	0014      	movs	r4, r2
{
    5168:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    516a:	42a6      	cmp	r6, r4
    516c:	d806      	bhi.n	517c <outs+0x1e>
    516e:	2e00      	cmp	r6, #0
    5170:	d001      	beq.n	5176 <outs+0x18>
	return (int)count;
    5172:	1b60      	subs	r0, r4, r5
    5174:	e008      	b.n	5188 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5176:	7823      	ldrb	r3, [r4, #0]
    5178:	2b00      	cmp	r3, #0
    517a:	d0fa      	beq.n	5172 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    517c:	7820      	ldrb	r0, [r4, #0]
    517e:	9901      	ldr	r1, [sp, #4]
    5180:	47b8      	blx	r7
		if (rc < 0) {
    5182:	3401      	adds	r4, #1
    5184:	2800      	cmp	r0, #0
    5186:	daf0      	bge.n	516a <outs+0xc>
}
    5188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000518a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    518a:	2004      	movs	r0, #4
    518c:	b662      	cpsie	i
    518e:	df02      	svc	2
}
    5190:	4770      	bx	lr

00005192 <assert_print>:

void assert_print(const char *fmt, ...)
{
    5192:	b40f      	push	{r0, r1, r2, r3}
    5194:	b507      	push	{r0, r1, r2, lr}
    5196:	a904      	add	r1, sp, #16
    5198:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
    519a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    519c:	f7fb f9e8 	bl	570 <vprintk>

	va_end(ap);
}
    51a0:	b003      	add	sp, #12
    51a2:	bc08      	pop	{r3}
    51a4:	b004      	add	sp, #16
    51a6:	4718      	bx	r3

000051a8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    51a8:	4770      	bx	lr

000051aa <soc_port_pinmux_set>:
#include <stdbool.h>

#include "soc_port.h"

int soc_port_pinmux_set(PortGroup *pg, uint32_t pin, uint32_t func)
{
    51aa:	b570      	push	{r4, r5, r6, lr}
	/* Each pinmux register holds the config for two pins.  The
	 * even numbered pin goes in the bits 0..3 and the odd
	 * numbered pin in bits 4..7.
	 */
	if (is_odd) {
		pg->PMUX[idx].bit.PMUXO = func;
    51ac:	250f      	movs	r5, #15
	int idx = pin / 2U;
    51ae:	084b      	lsrs	r3, r1, #1
	if (is_odd) {
    51b0:	18c3      	adds	r3, r0, r3
		pg->PMUX[idx].bit.PMUXO = func;
    51b2:	402a      	ands	r2, r5
    51b4:	3330      	adds	r3, #48	; 0x30
	if (is_odd) {
    51b6:	07cc      	lsls	r4, r1, #31
    51b8:	d50d      	bpl.n	51d6 <soc_port_pinmux_set+0x2c>
		pg->PMUX[idx].bit.PMUXO = func;
    51ba:	781c      	ldrb	r4, [r3, #0]
    51bc:	0116      	lsls	r6, r2, #4
    51be:	0022      	movs	r2, r4
    51c0:	402a      	ands	r2, r5
    51c2:	4332      	orrs	r2, r6
	} else {
		pg->PMUX[idx].bit.PMUXE = func;
    51c4:	701a      	strb	r2, [r3, #0]
	}
	pg->PINCFG[pin].bit.PMUXEN = 1;
    51c6:	2301      	movs	r3, #1
    51c8:	1840      	adds	r0, r0, r1
    51ca:	3040      	adds	r0, #64	; 0x40
    51cc:	7802      	ldrb	r2, [r0, #0]
    51ce:	4313      	orrs	r3, r2
    51d0:	7003      	strb	r3, [r0, #0]

	return 0;
}
    51d2:	2000      	movs	r0, #0
    51d4:	bd70      	pop	{r4, r5, r6, pc}
		pg->PMUX[idx].bit.PMUXE = func;
    51d6:	781c      	ldrb	r4, [r3, #0]
    51d8:	43ac      	bics	r4, r5
    51da:	4322      	orrs	r2, r4
    51dc:	e7f2      	b.n	51c4 <soc_port_pinmux_set+0x1a>

000051de <soc_port_configure>:

void soc_port_configure(const struct soc_port_pin *pin)
{
    51de:	0003      	movs	r3, r0
	PortGroup *pg = pin->regs;
	uint32_t flags = pin->flags;
	uint32_t func = (pin->flags & SOC_PORT_FUNC_MASK) >> SOC_PORT_FUNC_POS;
	PORT_PINCFG_Type pincfg = { .reg = 0 };
    51e0:	2100      	movs	r1, #0
{
    51e2:	b570      	push	{r4, r5, r6, lr}
	PortGroup *pg = pin->regs;
    51e4:	6800      	ldr	r0, [r0, #0]

	/* Reset or analog I/O: all digital disabled */
	pg->PINCFG[pin->pinum] = pincfg;
    51e6:	685c      	ldr	r4, [r3, #4]
	uint32_t flags = pin->flags;
    51e8:	689a      	ldr	r2, [r3, #8]
	pg->PINCFG[pin->pinum] = pincfg;
    51ea:	1904      	adds	r4, r0, r4
    51ec:	3440      	adds	r4, #64	; 0x40
    51ee:	7021      	strb	r1, [r4, #0]
	PORT_PINCFG_Type pincfg = { .reg = 0 };
    51f0:	1c0d      	adds	r5, r1, #0
	pg->DIRCLR.reg = (1 << pin->pinum);
    51f2:	3101      	adds	r1, #1
    51f4:	000e      	movs	r6, r1
    51f6:	685c      	ldr	r4, [r3, #4]
    51f8:	40a6      	lsls	r6, r4
    51fa:	6046      	str	r6, [r0, #4]
	pg->OUTCLR.reg = (1 << pin->pinum);
    51fc:	000e      	movs	r6, r1
    51fe:	685c      	ldr	r4, [r3, #4]
    5200:	40a6      	lsls	r6, r4
    5202:	6146      	str	r6, [r0, #20]

	if (flags & SOC_PORT_PMUXEN_ENABLE) {
    5204:	0654      	lsls	r4, r2, #25
    5206:	d505      	bpl.n	5214 <soc_port_configure+0x36>
	uint32_t func = (pin->flags & SOC_PORT_FUNC_MASK) >> SOC_PORT_FUNC_POS;
    5208:	0312      	lsls	r2, r2, #12
		soc_port_pinmux_set(pg, pin->pinum, func);
    520a:	6859      	ldr	r1, [r3, #4]
	uint32_t func = (pin->flags & SOC_PORT_FUNC_MASK) >> SOC_PORT_FUNC_POS;
    520c:	0f12      	lsrs	r2, r2, #28
		soc_port_pinmux_set(pg, pin->pinum, func);
    520e:	f7ff ffcc 	bl	51aa <soc_port_pinmux_set>
	if (flags & SOC_PORT_STRENGTH_STRONGER) {
		pincfg.bit.DRVSTR = 1;
	}

	pg->PINCFG[pin->pinum] = pincfg;
}
    5212:	bd70      	pop	{r4, r5, r6, pc}
	if (flags & (SOC_PORT_PULLUP | SOC_PORT_PULLDOWN)) {
    5214:	0794      	lsls	r4, r2, #30
    5216:	d005      	beq.n	5224 <soc_port_configure+0x46>
		if (flags & SOC_PORT_PULLUP) {
    5218:	420a      	tst	r2, r1
    521a:	d002      	beq.n	5222 <soc_port_configure+0x44>
			pg->OUTSET.reg = (1 << pin->pinum);
    521c:	685c      	ldr	r4, [r3, #4]
    521e:	40a1      	lsls	r1, r4
    5220:	6181      	str	r1, [r0, #24]
		pincfg.bit.PULLEN = 1;
    5222:	2504      	movs	r5, #4
	if (flags & SOC_PORT_INPUT_ENABLE) {
    5224:	2401      	movs	r4, #1
    5226:	08d1      	lsrs	r1, r2, #3
    5228:	4021      	ands	r1, r4
    522a:	40a1      	lsls	r1, r4
    522c:	4329      	orrs	r1, r5
	if (flags & SOC_PORT_OUTPUT_ENABLE) {
    522e:	06d5      	lsls	r5, r2, #27
    5230:	d502      	bpl.n	5238 <soc_port_configure+0x5a>
		pg->DIRSET.reg = (1 << pin->pinum);
    5232:	685d      	ldr	r5, [r3, #4]
    5234:	40ac      	lsls	r4, r5
    5236:	6084      	str	r4, [r0, #8]
	pg->PINCFG[pin->pinum] = pincfg;
    5238:	685b      	ldr	r3, [r3, #4]
	if (flags & SOC_PORT_STRENGTH_STRONGER) {
    523a:	0692      	lsls	r2, r2, #26
    523c:	0fd2      	lsrs	r2, r2, #31
    523e:	0192      	lsls	r2, r2, #6
	pg->PINCFG[pin->pinum] = pincfg;
    5240:	18c0      	adds	r0, r0, r3
    5242:	4311      	orrs	r1, r2
    5244:	3040      	adds	r0, #64	; 0x40
    5246:	7001      	strb	r1, [r0, #0]
    5248:	e7e3      	b.n	5212 <soc_port_configure+0x34>

0000524a <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    524a:	b40f      	push	{r0, r1, r2, r3}
    524c:	b507      	push	{r0, r1, r2, lr}
    524e:	a904      	add	r1, sp, #16
    5250:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
    5252:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    5254:	f7fb f98c 	bl	570 <vprintk>
	va_end(ap);
}
    5258:	b003      	add	sp, #12
    525a:	bc08      	pop	{r3}
    525c:	b004      	add	sp, #16
    525e:	4718      	bx	r3

00005260 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5260:	b510      	push	{r4, lr}
    5262:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5264:	6800      	ldr	r0, [r0, #0]
    5266:	f7fb fe1b 	bl	ea0 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    526a:	bd10      	pop	{r4, pc}

0000526c <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    526c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    526e:	2100      	movs	r1, #0
    5270:	2001      	movs	r0, #1
    5272:	f7fb fe15 	bl	ea0 <z_arm_fatal_error>
}
    5276:	bd10      	pop	{r4, pc}

00005278 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5278:	b510      	push	{r4, lr}
	handler();
    527a:	f7fb fe8d 	bl	f98 <z_SysNmiOnReset>
	z_arm_int_exit();
    527e:	f7fb ff41 	bl	1104 <z_arm_exc_exit>
}
    5282:	bd10      	pop	{r4, pc}

00005284 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    5284:	4770      	bx	lr

00005286 <semihost_exec>:
{
	register unsigned int r0 __asm__ ("r0") = instr;
	register void *r1 __asm__ ("r1") = args;
	register int ret __asm__ ("r0");

	__asm__ __volatile__ ("bkpt 0xab"
    5286:	beab      	bkpt	0x00ab
			      : "=r" (ret) : "r" (r0), "r" (r1) : "memory");
	return ret;
}
    5288:	4770      	bx	lr

0000528a <_stdout_hook_default>:
	return EOF;
    528a:	2001      	movs	r0, #1
}
    528c:	4240      	negs	r0, r0
    528e:	4770      	bx	lr

00005290 <test_main>:
{
    5290:	b510      	push	{r4, lr}
	ztest_run_all(NULL);
    5292:	2000      	movs	r0, #0
    5294:	f7fc fb22 	bl	18dc <ztest_run_all>
	ztest_verify_all_test_suites_ran();
    5298:	f7fc fad0 	bl	183c <ztest_verify_all_test_suites_ran>
}
    529c:	bd10      	pop	{r4, pc}

0000529e <z_ztest_should_suite_run>:
 * @param suite Pointer to ztest_suite_node
 * @return true
 * @return false
 */
bool z_ztest_should_suite_run(const void *state, struct ztest_suite_node *suite)
{
    529e:	b510      	push	{r4, lr}
	bool run_suite = true;

	if (suite->predicate != NULL) {
    52a0:	694a      	ldr	r2, [r1, #20]
	bool run_suite = true;
    52a2:	2301      	movs	r3, #1
	if (suite->predicate != NULL) {
    52a4:	2a00      	cmp	r2, #0
    52a6:	d001      	beq.n	52ac <z_ztest_should_suite_run+0xe>
		run_suite = suite->predicate(state);
    52a8:	4790      	blx	r2
    52aa:	0003      	movs	r3, r0
	}

	return run_suite;
}
    52ac:	0018      	movs	r0, r3
    52ae:	bd10      	pop	{r4, pc}

000052b0 <z_ztest_should_test_run>:
 * @return false
 */
bool z_ztest_should_test_run(const char *suite, const char *test)
{
	return true;
}
    52b0:	2001      	movs	r0, #1
    52b2:	4770      	bx	lr

000052b4 <z_ztest_run_all>:
{
    52b4:	b510      	push	{r4, lr}
		union { uintptr_t x; const void * val; } parm0 = { .val = state };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_ZTEST_RUN_TEST_SUITES);
	}
#endif
	compiler_barrier();
	return z_impl_ztest_run_test_suites(state);
    52b6:	f7fc fa7b 	bl	17b0 <z_impl_ztest_run_test_suites>
}
    52ba:	bd10      	pop	{r4, pc}

000052bc <ztest_relative_filename>:
}
    52bc:	4770      	bx	lr

000052be <gpio_sam0_config>:
{
    52be:	b5f0      	push	{r4, r5, r6, r7, lr}
	PortGroup *regs = config->regs;
    52c0:	6843      	ldr	r3, [r0, #4]
	struct gpio_sam0_data *data = dev->data;
    52c2:	6906      	ldr	r6, [r0, #16]
	PortGroup *regs = config->regs;
    52c4:	685b      	ldr	r3, [r3, #4]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    52c6:	0790      	lsls	r0, r2, #30
    52c8:	d502      	bpl.n	52d0 <gpio_sam0_config+0x12>
		return -ENOTSUP;
    52ca:	2086      	movs	r0, #134	; 0x86
    52cc:	4240      	negs	r0, r0
}
    52ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((flags & GPIO_INPUT) != 0) {
    52d0:	2001      	movs	r0, #1
    52d2:	0c14      	lsrs	r4, r2, #16
    52d4:	4004      	ands	r4, r0
    52d6:	4084      	lsls	r4, r0
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    52d8:	2730      	movs	r7, #48	; 0x30
	if ((flags & GPIO_INPUT) != 0) {
    52da:	4684      	mov	ip, r0
    52dc:	1c25      	adds	r5, r4, #0
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    52de:	4017      	ands	r7, r2
	if ((flags & GPIO_OUTPUT) != 0) {
    52e0:	0390      	lsls	r0, r2, #14
    52e2:	d519      	bpl.n	5318 <gpio_sam0_config+0x5a>
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    52e4:	2f00      	cmp	r7, #0
    52e6:	d1f0      	bne.n	52ca <gpio_sam0_config+0xc>
			regs->OUTCLR.reg = BIT(pin);
    52e8:	4660      	mov	r0, ip
    52ea:	4088      	lsls	r0, r1
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    52ec:	0354      	lsls	r4, r2, #13
    52ee:	d50f      	bpl.n	5310 <gpio_sam0_config+0x52>
			regs->OUTCLR.reg = BIT(pin);
    52f0:	6158      	str	r0, [r3, #20]
		regs->DIRSET.reg = BIT(pin);
    52f2:	6098      	str	r0, [r3, #8]
	WRITE_BIT(data->debounce, pin,
    52f4:	2401      	movs	r4, #1
    52f6:	68b0      	ldr	r0, [r6, #8]
    52f8:	408c      	lsls	r4, r1
    52fa:	05d2      	lsls	r2, r2, #23
    52fc:	d519      	bpl.n	5332 <gpio_sam0_config+0x74>
    52fe:	07aa      	lsls	r2, r5, #30
    5300:	d517      	bpl.n	5332 <gpio_sam0_config+0x74>
    5302:	4320      	orrs	r0, r4
	regs->PINCFG[pin] = pincfg;
    5304:	185b      	adds	r3, r3, r1
    5306:	3340      	adds	r3, #64	; 0x40
	WRITE_BIT(data->debounce, pin,
    5308:	60b0      	str	r0, [r6, #8]
	return 0;
    530a:	2000      	movs	r0, #0
	regs->PINCFG[pin] = pincfg;
    530c:	701d      	strb	r5, [r3, #0]
	return 0;
    530e:	e7de      	b.n	52ce <gpio_sam0_config+0x10>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    5310:	0314      	lsls	r4, r2, #12
    5312:	d5ee      	bpl.n	52f2 <gpio_sam0_config+0x34>
			regs->OUTSET.reg = BIT(pin);
    5314:	6198      	str	r0, [r3, #24]
    5316:	e7ec      	b.n	52f2 <gpio_sam0_config+0x34>
		regs->DIRCLR.reg = BIT(pin);
    5318:	4660      	mov	r0, ip
    531a:	4088      	lsls	r0, r1
    531c:	6058      	str	r0, [r3, #4]
		if ((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) != 0) {
    531e:	2f00      	cmp	r7, #0
    5320:	d0e8      	beq.n	52f4 <gpio_sam0_config+0x36>
			pincfg.bit.PULLEN = 1;
    5322:	2504      	movs	r5, #4
    5324:	4325      	orrs	r5, r4
			if ((flags & GPIO_PULL_UP) != 0) {
    5326:	06d4      	lsls	r4, r2, #27
    5328:	d501      	bpl.n	532e <gpio_sam0_config+0x70>
				regs->OUTSET.reg = BIT(pin);
    532a:	6198      	str	r0, [r3, #24]
    532c:	e7e2      	b.n	52f4 <gpio_sam0_config+0x36>
				regs->OUTCLR.reg = BIT(pin);
    532e:	6158      	str	r0, [r3, #20]
    5330:	e7e0      	b.n	52f4 <gpio_sam0_config+0x36>
	WRITE_BIT(data->debounce, pin,
    5332:	43a0      	bics	r0, r4
    5334:	e7e6      	b.n	5304 <gpio_sam0_config+0x46>

00005336 <gpio_sam0_port_get_raw>:
	*value = config->regs->IN.reg;
    5336:	6843      	ldr	r3, [r0, #4]
}
    5338:	2000      	movs	r0, #0
	*value = config->regs->IN.reg;
    533a:	685b      	ldr	r3, [r3, #4]
    533c:	6a1b      	ldr	r3, [r3, #32]
    533e:	600b      	str	r3, [r1, #0]
}
    5340:	4770      	bx	lr

00005342 <gpio_sam0_port_set_masked_raw>:
	uint32_t out = config->regs->OUT.reg;
    5342:	6843      	ldr	r3, [r0, #4]
    5344:	685b      	ldr	r3, [r3, #4]
    5346:	6918      	ldr	r0, [r3, #16]
	config->regs->OUT.reg = (out & ~mask) | (value & mask);
    5348:	4042      	eors	r2, r0
    534a:	4011      	ands	r1, r2
    534c:	4041      	eors	r1, r0
    534e:	6119      	str	r1, [r3, #16]
}
    5350:	2000      	movs	r0, #0
    5352:	4770      	bx	lr

00005354 <gpio_sam0_port_set_bits_raw>:
	config->regs->OUTSET.reg = pins;
    5354:	6843      	ldr	r3, [r0, #4]
}
    5356:	2000      	movs	r0, #0
	config->regs->OUTSET.reg = pins;
    5358:	685b      	ldr	r3, [r3, #4]
    535a:	6199      	str	r1, [r3, #24]
}
    535c:	4770      	bx	lr

0000535e <gpio_sam0_port_clear_bits_raw>:
	config->regs->OUTCLR.reg = pins;
    535e:	6843      	ldr	r3, [r0, #4]
}
    5360:	2000      	movs	r0, #0
	config->regs->OUTCLR.reg = pins;
    5362:	685b      	ldr	r3, [r3, #4]
    5364:	6159      	str	r1, [r3, #20]
}
    5366:	4770      	bx	lr

00005368 <gpio_sam0_port_toggle_bits>:
	config->regs->OUTTGL.reg = pins;
    5368:	6843      	ldr	r3, [r0, #4]
}
    536a:	2000      	movs	r0, #0
	config->regs->OUTTGL.reg = pins;
    536c:	685b      	ldr	r3, [r3, #4]
    536e:	61d9      	str	r1, [r3, #28]
}
    5370:	4770      	bx	lr

00005372 <gpio_sam0_init>:
	.manage_callback = gpio_sam0_manage_callback,
	.get_pending_int = gpio_sam0_get_pending_int,
#endif
};

static int gpio_sam0_init(const struct device *dev) { return 0; }
    5372:	2000      	movs	r0, #0
    5374:	4770      	bx	lr

00005376 <gpio_sam0_get_pending_int>:
{
    5376:	b510      	push	{r4, lr}
	return sam0_eic_interrupt_pending(config->id);
    5378:	6843      	ldr	r3, [r0, #4]
    537a:	7a18      	ldrb	r0, [r3, #8]
    537c:	f7fc fcfe 	bl	1d7c <sam0_eic_interrupt_pending>
}
    5380:	bd10      	pop	{r4, pc}

00005382 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5382:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    5384:	6803      	ldr	r3, [r0, #0]
    5386:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    5388:	7905      	ldrb	r5, [r0, #4]
    538a:	6804      	ldr	r4, [r0, #0]
    538c:	00ed      	lsls	r5, r5, #3
    538e:	1964      	adds	r4, r4, r5
    5390:	42a3      	cmp	r3, r4
    5392:	d302      	bcc.n	539a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    5394:	2002      	movs	r0, #2
    5396:	4240      	negs	r0, r0
}
    5398:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    539a:	795c      	ldrb	r4, [r3, #5]
    539c:	428c      	cmp	r4, r1
    539e:	d001      	beq.n	53a4 <pinctrl_lookup_state+0x22>
		(*state)++;
    53a0:	3308      	adds	r3, #8
    53a2:	e7f0      	b.n	5386 <pinctrl_lookup_state+0x4>
			return 0;
    53a4:	2000      	movs	r0, #0
    53a6:	e7f7      	b.n	5398 <pinctrl_lookup_state+0x16>

000053a8 <wait_synchronization>:
	while ((usart->SYNCBUSY.reg & SERCOM_USART_SYNCBUSY_MASK) != 0) {
    53a8:	2307      	movs	r3, #7
    53aa:	69c2      	ldr	r2, [r0, #28]
    53ac:	421a      	tst	r2, r3
    53ae:	d1fc      	bne.n	53aa <wait_synchronization+0x2>
}
    53b0:	4770      	bx	lr

000053b2 <uart_sam0_poll_in>:

static int uart_sam0_poll_in(const struct device *dev, unsigned char *c)
{
	const struct uart_sam0_dev_cfg *config = dev->config;

	SercomUsart * const usart = config->regs;
    53b2:	6843      	ldr	r3, [r0, #4]
    53b4:	681b      	ldr	r3, [r3, #0]

	if (!usart->INTFLAG.bit.RXC) {
    53b6:	7e1a      	ldrb	r2, [r3, #24]
    53b8:	0752      	lsls	r2, r2, #29
    53ba:	d503      	bpl.n	53c4 <uart_sam0_poll_in+0x12>
		return -EBUSY;
	}

	*c = (unsigned char)usart->DATA.reg;
	return 0;
    53bc:	2000      	movs	r0, #0
	*c = (unsigned char)usart->DATA.reg;
    53be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    53c0:	700b      	strb	r3, [r1, #0]
}
    53c2:	4770      	bx	lr
		return -EBUSY;
    53c4:	2010      	movs	r0, #16
    53c6:	4240      	negs	r0, r0
    53c8:	e7fb      	b.n	53c2 <uart_sam0_poll_in+0x10>

000053ca <uart_sam0_poll_out>:

static void uart_sam0_poll_out(const struct device *dev, unsigned char c)
{
	const struct uart_sam0_dev_cfg *config = dev->config;

	SercomUsart * const usart = config->regs;
    53ca:	6843      	ldr	r3, [r0, #4]
    53cc:	681b      	ldr	r3, [r3, #0]

	while (!usart->INTFLAG.bit.DRE) {
    53ce:	7e1a      	ldrb	r2, [r3, #24]
    53d0:	07d2      	lsls	r2, r2, #31
    53d2:	d5fc      	bpl.n	53ce <uart_sam0_poll_out+0x4>
	}

	/* send a character */
	usart->DATA.reg = c;
    53d4:	8519      	strh	r1, [r3, #40]	; 0x28
}
    53d6:	4770      	bx	lr

000053d8 <uart_sam0_err_check>:

static int uart_sam0_err_check(const struct device *dev)
{
    53d8:	b510      	push	{r4, lr}
	const struct uart_sam0_dev_cfg *config = dev->config;

	SercomUsart * const regs = config->regs;
    53da:	6843      	ldr	r3, [r0, #4]

	if (regs->STATUS.reg & SERCOM_USART_STATUS_BUFOVF) {
		err |= UART_ERROR_OVERRUN;
	}

	if (regs->STATUS.reg & SERCOM_USART_STATUS_FERR) {
    53dc:	2202      	movs	r2, #2
	SercomUsart * const regs = config->regs;
    53de:	6818      	ldr	r0, [r3, #0]
	if (regs->STATUS.reg & SERCOM_USART_STATUS_BUFOVF) {
    53e0:	2301      	movs	r3, #1
    53e2:	8b44      	ldrh	r4, [r0, #26]
	if (regs->STATUS.reg & SERCOM_USART_STATUS_FERR) {
    53e4:	8b41      	ldrh	r1, [r0, #26]
	if (regs->STATUS.reg & SERCOM_USART_STATUS_BUFOVF) {
    53e6:	08a4      	lsrs	r4, r4, #2
    53e8:	401c      	ands	r4, r3
	if (regs->STATUS.reg & SERCOM_USART_STATUS_FERR) {
    53ea:	4211      	tst	r1, r2
    53ec:	d000      	beq.n	53f0 <uart_sam0_err_check+0x18>
		err |= UART_ERROR_PARITY;
    53ee:	4314      	orrs	r4, r2
	}

	if (regs->STATUS.reg & SERCOM_USART_STATUS_PERR) {
    53f0:	8b42      	ldrh	r2, [r0, #26]
    53f2:	421a      	tst	r2, r3
    53f4:	d001      	beq.n	53fa <uart_sam0_err_check+0x22>
		err |= UART_ERROR_FRAMING;
    53f6:	2304      	movs	r3, #4
    53f8:	431c      	orrs	r4, r3
			 |	SERCOM_USART_STATUS_FERR
			 |	SERCOM_USART_STATUS_PERR
			 |	SERCOM_USART_STATUS_COLL
			 |	SERCOM_USART_STATUS_ISF;
#else
	regs->STATUS.reg |=	SERCOM_USART_STATUS_BUFOVF
    53fa:	2307      	movs	r3, #7
    53fc:	8b42      	ldrh	r2, [r0, #26]
    53fe:	4313      	orrs	r3, r2
    5400:	8343      	strh	r3, [r0, #26]
			 |	SERCOM_USART_STATUS_FERR
			 |	SERCOM_USART_STATUS_PERR;
#endif

	wait_synchronization(regs);
    5402:	f7ff ffd1 	bl	53a8 <wait_synchronization>
	return err;
}
    5406:	0020      	movs	r0, r4
    5408:	bd10      	pop	{r4, pc}

0000540a <uart_sam0_isr>:

#if CONFIG_UART_INTERRUPT_DRIVEN || CONFIG_UART_ASYNC_API

static void uart_sam0_isr(const struct device *dev)
{
    540a:	b510      	push	{r4, lr}
	struct uart_sam0_dev_data *const dev_data = dev->data;
    540c:	6902      	ldr	r2, [r0, #16]

#if CONFIG_UART_INTERRUPT_DRIVEN
	if (dev_data->cb) {
    540e:	6893      	ldr	r3, [r2, #8]
    5410:	2b00      	cmp	r3, #0
    5412:	d001      	beq.n	5418 <uart_sam0_isr+0xe>
		dev_data->cb(dev, dev_data->cb_data);
    5414:	68d1      	ldr	r1, [r2, #12]
    5416:	4798      	blx	r3

		/* DMA will read the currently ready byte out */
		dma_start(cfg->dma_dev, cfg->rx_dma_channel);
	}
#endif
}
    5418:	bd10      	pop	{r4, pc}

0000541a <uart_sam0_fifo_fill>:

#if CONFIG_UART_INTERRUPT_DRIVEN

static int uart_sam0_fifo_fill(const struct device *dev,
			       const uint8_t *tx_data, int len)
{
    541a:	b510      	push	{r4, lr}
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart *regs = config->regs;
    541c:	6843      	ldr	r3, [r0, #4]
    541e:	681c      	ldr	r4, [r3, #0]

	if (regs->INTFLAG.bit.DRE && len >= 1) {
    5420:	7e23      	ldrb	r3, [r4, #24]
    5422:	07db      	lsls	r3, r3, #31
    5424:	0fd8      	lsrs	r0, r3, #31
    5426:	2b00      	cmp	r3, #0
    5428:	d005      	beq.n	5436 <uart_sam0_fifo_fill+0x1c>
		regs->DATA.reg = tx_data[0];
		return 1;
	} else {
		return 0;
    542a:	2000      	movs	r0, #0
	if (regs->INTFLAG.bit.DRE && len >= 1) {
    542c:	4282      	cmp	r2, r0
    542e:	dd02      	ble.n	5436 <uart_sam0_fifo_fill+0x1c>
		regs->DATA.reg = tx_data[0];
    5430:	780b      	ldrb	r3, [r1, #0]
		return 1;
    5432:	3001      	adds	r0, #1
		regs->DATA.reg = tx_data[0];
    5434:	8523      	strh	r3, [r4, #40]	; 0x28
	}
}
    5436:	bd10      	pop	{r4, pc}

00005438 <uart_sam0_irq_tx_enable>:
static void uart_sam0_irq_tx_enable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENSET.reg = SERCOM_USART_INTENSET_DRE
    5438:	2203      	movs	r2, #3
	SercomUsart * const regs = config->regs;
    543a:	6843      	ldr	r3, [r0, #4]
    543c:	681b      	ldr	r3, [r3, #0]
	regs->INTENSET.reg = SERCOM_USART_INTENSET_DRE
    543e:	759a      	strb	r2, [r3, #22]
			   | SERCOM_USART_INTENSET_TXC;
}
    5440:	4770      	bx	lr

00005442 <uart_sam0_irq_tx_disable>:
static void uart_sam0_irq_tx_disable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_DRE
    5442:	2203      	movs	r2, #3
	SercomUsart * const regs = config->regs;
    5444:	6843      	ldr	r3, [r0, #4]
    5446:	681b      	ldr	r3, [r3, #0]
	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_DRE
    5448:	751a      	strb	r2, [r3, #20]
			   | SERCOM_USART_INTENCLR_TXC;
}
    544a:	4770      	bx	lr

0000544c <uart_sam0_irq_tx_ready>:

static int uart_sam0_irq_tx_ready(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    544c:	6843      	ldr	r3, [r0, #4]

	return (regs->INTFLAG.bit.DRE != 0) && (regs->INTENSET.bit.DRE != 0);
    544e:	2000      	movs	r0, #0
	SercomUsart * const regs = config->regs;
    5450:	681b      	ldr	r3, [r3, #0]
	return (regs->INTFLAG.bit.DRE != 0) && (regs->INTENSET.bit.DRE != 0);
    5452:	7e1a      	ldrb	r2, [r3, #24]
    5454:	07d2      	lsls	r2, r2, #31
    5456:	d502      	bpl.n	545e <uart_sam0_irq_tx_ready+0x12>
    5458:	7d98      	ldrb	r0, [r3, #22]
    545a:	07c0      	lsls	r0, r0, #31
    545c:	0fc0      	lsrs	r0, r0, #31
}
    545e:	4770      	bx	lr

00005460 <uart_sam0_irq_tx_complete>:

static int uart_sam0_irq_tx_complete(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    5460:	6843      	ldr	r3, [r0, #4]

	return (regs->INTFLAG.bit.TXC != 0) && (regs->INTENSET.bit.TXC != 0);
    5462:	2000      	movs	r0, #0
	SercomUsart * const regs = config->regs;
    5464:	681b      	ldr	r3, [r3, #0]
	return (regs->INTFLAG.bit.TXC != 0) && (regs->INTENSET.bit.TXC != 0);
    5466:	7e1a      	ldrb	r2, [r3, #24]
    5468:	0792      	lsls	r2, r2, #30
    546a:	d502      	bpl.n	5472 <uart_sam0_irq_tx_complete+0x12>
    546c:	7d98      	ldrb	r0, [r3, #22]
    546e:	0780      	lsls	r0, r0, #30
    5470:	0fc0      	lsrs	r0, r0, #31
}
    5472:	4770      	bx	lr

00005474 <uart_sam0_irq_rx_enable>:
static void uart_sam0_irq_rx_enable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    5474:	2204      	movs	r2, #4
	SercomUsart * const regs = config->regs;
    5476:	6843      	ldr	r3, [r0, #4]
    5478:	681b      	ldr	r3, [r3, #0]
	regs->INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    547a:	759a      	strb	r2, [r3, #22]
}
    547c:	4770      	bx	lr

0000547e <uart_sam0_irq_rx_disable>:
static void uart_sam0_irq_rx_disable(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;

	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
    547e:	2204      	movs	r2, #4
	SercomUsart * const regs = config->regs;
    5480:	6843      	ldr	r3, [r0, #4]
    5482:	681b      	ldr	r3, [r3, #0]
	regs->INTENCLR.reg = SERCOM_USART_INTENCLR_RXC;
    5484:	751a      	strb	r2, [r3, #20]
}
    5486:	4770      	bx	lr

00005488 <uart_sam0_irq_rx_ready>:

static int uart_sam0_irq_rx_ready(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    5488:	6843      	ldr	r3, [r0, #4]
    548a:	681b      	ldr	r3, [r3, #0]

	return regs->INTFLAG.bit.RXC != 0;
    548c:	7e18      	ldrb	r0, [r3, #24]
    548e:	0740      	lsls	r0, r0, #29
    5490:	0fc0      	lsrs	r0, r0, #31
}
    5492:	4770      	bx	lr

00005494 <uart_sam0_fifo_read>:

static int uart_sam0_fifo_read(const struct device *dev, uint8_t *rx_data,
			       const int size)
{
    5494:	b510      	push	{r4, lr}
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    5496:	6843      	ldr	r3, [r0, #4]
			return 1;
		} else {
			return -EINVAL;
		}
	}
	return 0;
    5498:	2000      	movs	r0, #0
	SercomUsart * const regs = config->regs;
    549a:	681b      	ldr	r3, [r3, #0]
	if (regs->INTFLAG.bit.RXC) {
    549c:	7e1c      	ldrb	r4, [r3, #24]
    549e:	0764      	lsls	r4, r4, #29
    54a0:	d505      	bpl.n	54ae <uart_sam0_fifo_read+0x1a>
		uint8_t ch = regs->DATA.reg;
    54a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    54a4:	b2db      	uxtb	r3, r3
		if (size >= 1) {
    54a6:	4282      	cmp	r2, r0
    54a8:	dd02      	ble.n	54b0 <uart_sam0_fifo_read+0x1c>
			*rx_data = ch;
    54aa:	700b      	strb	r3, [r1, #0]
			return 1;
    54ac:	3001      	adds	r0, #1
}
    54ae:	bd10      	pop	{r4, pc}
			return -EINVAL;
    54b0:	2016      	movs	r0, #22
    54b2:	4240      	negs	r0, r0
    54b4:	e7fb      	b.n	54ae <uart_sam0_fifo_read+0x1a>

000054b6 <uart_sam0_irq_is_pending>:

static int uart_sam0_irq_is_pending(const struct device *dev)
{
	const struct uart_sam0_dev_cfg *config = dev->config;
	SercomUsart * const regs = config->regs;
    54b6:	6843      	ldr	r3, [r0, #4]
    54b8:	681b      	ldr	r3, [r3, #0]

	return (regs->INTENSET.reg & regs->INTFLAG.reg) != 0;
    54ba:	7d9a      	ldrb	r2, [r3, #22]
    54bc:	7e18      	ldrb	r0, [r3, #24]
    54be:	4010      	ands	r0, r2
    54c0:	1e43      	subs	r3, r0, #1
    54c2:	4198      	sbcs	r0, r3
}
    54c4:	4770      	bx	lr

000054c6 <uart_sam0_irq_update>:
	regs->INTFLAG.reg |=	SERCOM_USART_INTENCLR_ERROR
			   |	SERCOM_USART_INTENCLR_RXBRK
			   |	SERCOM_USART_INTENCLR_CTSIC
			   |	SERCOM_USART_INTENCLR_RXS;
#else
	regs->INTFLAG.reg =	SERCOM_USART_INTENCLR_RXS;
    54c6:	2208      	movs	r2, #8
	SercomUsart * const regs = config->regs;
    54c8:	6843      	ldr	r3, [r0, #4]
#endif
	return 1;
}
    54ca:	2001      	movs	r0, #1
	SercomUsart * const regs = config->regs;
    54cc:	681b      	ldr	r3, [r3, #0]
	regs->INTFLAG.reg =	SERCOM_USART_INTENCLR_RXS;
    54ce:	761a      	strb	r2, [r3, #24]
}
    54d0:	4770      	bx	lr

000054d2 <uart_sam0_irq_callback_set>:

static void uart_sam0_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	struct uart_sam0_dev_data *const dev_data = dev->data;
    54d2:	6903      	ldr	r3, [r0, #16]

	dev_data->cb = cb;
    54d4:	6099      	str	r1, [r3, #8]
	dev_data->cb_data = cb_data;
    54d6:	60da      	str	r2, [r3, #12]
}
    54d8:	4770      	bx	lr

000054da <uart_sam0_irq_config_0>:
		    &uart_sam0_config_##n, PRE_KERNEL_1,		\
		    CONFIG_SERIAL_INIT_PRIORITY,			\
		    &uart_sam0_driver_api);				\
UART_SAM0_IRQ_HANDLER(n)

DT_INST_FOREACH_STATUS_OKAY(UART_SAM0_DEVICE_INIT)
    54da:	2200      	movs	r2, #0
    54dc:	b510      	push	{r4, lr}
    54de:	0011      	movs	r1, r2
    54e0:	2009      	movs	r0, #9
    54e2:	f7fb fd15 	bl	f10 <z_arm_irq_priority_set>
    54e6:	2009      	movs	r0, #9
    54e8:	f7fb fd06 	bl	ef8 <arch_irq_enable>
    54ec:	bd10      	pop	{r4, pc}

000054ee <uart_sam0_irq_config_1>:
    54ee:	2200      	movs	r2, #0
    54f0:	b510      	push	{r4, lr}
    54f2:	0011      	movs	r1, r2
    54f4:	200b      	movs	r0, #11
    54f6:	f7fb fd0b 	bl	f10 <z_arm_irq_priority_set>
    54fa:	200b      	movs	r0, #11
    54fc:	f7fb fcfc 	bl	ef8 <arch_irq_enable>
    5500:	bd10      	pop	{r4, pc}

00005502 <uart_sam0_irq_config_2>:
    5502:	2200      	movs	r2, #0
    5504:	b510      	push	{r4, lr}
    5506:	0011      	movs	r1, r2
    5508:	200d      	movs	r0, #13
    550a:	f7fb fd01 	bl	f10 <z_arm_irq_priority_set>
    550e:	200d      	movs	r0, #13
    5510:	f7fb fcf2 	bl	ef8 <arch_irq_enable>
    5514:	bd10      	pop	{r4, pc}

00005516 <uart_sam0_config_get>:
{
    5516:	0003      	movs	r3, r0
    5518:	b510      	push	{r4, lr}
    551a:	0008      	movs	r0, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    551c:	2208      	movs	r2, #8
    551e:	6919      	ldr	r1, [r3, #16]
    5520:	f7ff fb48 	bl	4bb4 <memcpy>
}
    5524:	2000      	movs	r0, #0
    5526:	bd10      	pop	{r4, pc}

00005528 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5528:	2800      	cmp	r0, #0
    552a:	d009      	beq.n	5540 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    552c:	2301      	movs	r3, #1
    552e:	68c2      	ldr	r2, [r0, #12]
    5530:	2000      	movs	r0, #0
    5532:	7851      	ldrb	r1, [r2, #1]
    5534:	4219      	tst	r1, r3
    5536:	d002      	beq.n	553e <z_device_is_ready+0x16>
    5538:	7810      	ldrb	r0, [r2, #0]
    553a:	4242      	negs	r2, r0
    553c:	4150      	adcs	r0, r2
    553e:	4018      	ands	r0, r3
}
    5540:	4770      	bx	lr

00005542 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
    5542:	f3ef 8310 	mrs	r3, PRIMASK
    5546:	b672      	cpsid	i
	for (;;) {
    5548:	e7fe      	b.n	5548 <arch_system_halt+0x6>

0000554a <z_early_memset>:
{
    554a:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
    554c:	f7ff fb7a 	bl	4c44 <memset>
}
    5550:	bd10      	pop	{r4, pc}

00005552 <z_early_memcpy>:
{
    5552:	b510      	push	{r4, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5554:	f7ff fb2e 	bl	4bb4 <memcpy>
}
    5558:	bd10      	pop	{r4, pc}

0000555a <k_thread_name_get>:
	return (const char *)thread->name;
    555a:	3060      	adds	r0, #96	; 0x60
}
    555c:	4770      	bx	lr

0000555e <z_impl_k_thread_start>:
{
    555e:	b510      	push	{r4, lr}
	z_sched_start(thread);
    5560:	f7fd fe22 	bl	31a8 <z_sched_start>
}
    5564:	bd10      	pop	{r4, pc}

00005566 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    5566:	220e      	movs	r2, #14
static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
    5568:	b510      	push	{r4, lr}
	if (mutex->owner->base.prio != new_prio) {
    556a:	5682      	ldrsb	r2, [r0, r2]
	return false;
    556c:	2300      	movs	r3, #0
	if (mutex->owner->base.prio != new_prio) {
    556e:	428a      	cmp	r2, r1
    5570:	d002      	beq.n	5578 <adjust_owner_prio.isra.0+0x12>
		return z_set_prio(mutex->owner, new_prio);
    5572:	f7fe f913 	bl	379c <z_set_prio>
    5576:	0003      	movs	r3, r0
}
    5578:	0018      	movs	r0, r3
    557a:	bd10      	pop	{r4, pc}

0000557c <z_reschedule_irqlock>:
{
    557c:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    557e:	2800      	cmp	r0, #0
    5580:	d105      	bne.n	558e <z_reschedule_irqlock+0x12>
    5582:	f3ef 8005 	mrs	r0, IPSR
    5586:	2800      	cmp	r0, #0
    5588:	d102      	bne.n	5590 <z_reschedule_irqlock+0x14>
    558a:	f7fb fd1d 	bl	fc8 <arch_swap>
}
    558e:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    5590:	b662      	cpsie	i
    5592:	f3bf 8f6f 	isb	sy
    5596:	e7fa      	b.n	558e <z_reschedule_irqlock+0x12>

00005598 <z_reschedule_unlocked>:
{
    5598:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
    559a:	f3ef 8010 	mrs	r0, PRIMASK
    559e:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
    55a0:	f7ff ffec 	bl	557c <z_reschedule_irqlock>
}
    55a4:	bd10      	pop	{r4, pc}

000055a6 <z_thread_timeout>:
{
    55a6:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
    55a8:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
    55aa:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
    55ac:	f7fe fa1a 	bl	39e4 <z_sched_wake_thread>
}
    55b0:	bd10      	pop	{r4, pc}

000055b2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    55b2:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    55b4:	f7fe ffee 	bl	4594 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    55b8:	bd10      	pop	{r4, pc}
	...
